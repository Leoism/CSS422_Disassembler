00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/8/2020 3:59:29 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Disassembler
00000000                             3  * Written by : Cool Dudes (Cheuk-Hang Tse, Leonardo Mota-Villaraldo,
00000000                             4  *              Sean Le, Zachary Joseph Morrison)
00000000                             5  * Date       : 11/02/2020
00000000                             6  * Description: Disassemmbles M68000 machine code into instructions
00000000                             7  *-----------------------------------------------------------
00000000                             8      
00000000  =0000000A                  9  LF      EQU     $0A      ; Line feed
00000000  =0000000D                 10  CR      EQU     $0D      ; Carriage return
00000000                            11  STADR   DS.L    1        ; allocate long in memory for
00000004                            12                           ; starting address
00000004                            13  ENADR   DS.L    1        ; allocate for end address
00000008                            14  LOOPCOUNT DS.L  1       ; keep track of loop
0000000C= 00000001                  15  PC_COUNT  DC.L  1       ; keep track of pc
00000010= 01                        16  IS_IN_MEM_BOOL DC.B  1
00000011                            17  
00000011                            18  ******** USER INPUT/OUTPUT/INTERACTIONS ********
00000011= 50 6C 65 61 73 65 ...     19  ASKST   DC.B    'Please enter starting address in hex:',0
00000037= 0D 0A 50 6C 65 61 ...     20  ASKEN   DC.B    CR,LF,'Please enter ending address in hex:',0
0000005D= 0D 0A 53 74 61 72 ...     21  DISST   DC.B    CR,LF,'Starting Address:',0
00000071= 0D 0A 45 6E 64 69 ...     22  DISEN   DC.B    CR,LF,'Ending Address:',0
00000083= 50 6C 65 61 73 65 ...     23  DISWAIT DC.B    'Please press any key to continue displaying',0
000000AF= 46 69 6E 69 73 68 ...     24  DISDONE DC.B    'Finished.',0
000000B9= 0D 0A 59 6F 75 20 ...     25  INVALIDMSG DC.B    CR,LF,'You entered an invalid address. Try again.',CR,LF,0
000000E8                            26  
000000E8                            27  ******** COMMON CHARACTERS ********
000000E8= 0D 0A 00                  28  NEWLINE DC.B    CR,LF,0
000000EB= 2C 00                     29  DISCOMMA DC.B   ',',0
000000ED= 23 00                     30  DISPOUND DC.B   '#',0
000000EF= 24 00                     31  DISDOLLAR DC.B  '$',0
000000F1= 28 00                     32  DISPARENL DC.B   '(',0
000000F3= 29 00                     33  DISPARENR DC.B   ')',0
000000F5= 2B 00                     34  DISPLUS DC.B    '+',0
000000F7= 2D 00                     35  DISMIN  DC.B    '-',0
000000F9= 20 20 00                  36  DISTAB DC.B     '  ',0
000000FC                            37  ******** INSTRUCTION PRINTS ********
000000FC= 4E 4F 50 00               38  DISNOP  DC.B    'NOP',0
00000100= 52 54 53 00               39  DISRTS  DC.B    'RTS',0
00000104= 4E 4F 54 00               40  DISNOT  DC.B    'NOT',0
00000108= 4A 53 52 20 20 00         41  DISJSR  DC.B    'JSR  ',0
0000010E= 4C 45 41 20 20 00         42  DISLEA  DC.B    'LEA  ',0
00000114= 41 4E 44 00               43  DISAND  DC.B    'AND',0
00000118= 4F 52 00                  44  DISOR   DC.B    'OR',0
0000011B= 4C 53 4C 00               45  DISLSL  DC.B    'LSL',0
0000011F= 4C 53 52 00               46  DISLSR  DC.B    'LSR',0
00000123= 41 53 4C 00               47  DISASL  DC.B    'ASL',0
00000127= 41 53 52 00               48  DISASR  DC.B    'ASR',0
0000012B= 52 4F 4C 00               49  DISROL  DC.B    'ROL',0
0000012F= 52 4F 52 00               50  DISROR  DC.B    'ROR',0
00000133= 41 44 44 00               51  DISADD  DC.B    'ADD',0
00000137= 41 44 44 41 00            52  DISADDA DC.B    'ADDA',0
0000013C= 41 44 44 51 00            53  DISADDQ DC.B    'ADDQ',0
00000141= 53 55 42 00               54  DISSUB  DC.B    'SUB',0
00000145= 42 52 41 20 20 00         55  DISBRA  DC.B    'BRA  ',0
0000014B= 42 4C 54 20 20 00         56  DISBLT  DC.B    'BLT  ',0
00000151= 42 47 54 20 20 00         57  DISBGT  DC.B    'BGT  ',0
00000157= 42 4C 45 20 20 00         58  DISBLE  DC.B    'BLE  ',0
0000015D= 42 47 45 20 20 00         59  DISBGE  DC.B    'BGE  ',0
00000163= 42 45 51 20 20 00         60  DISBEQ  DC.B    'BEQ  ',0
00000169                            61  ******** SIZE PRINTS ********
00000169= 2E 42 20 20 00            62  DISB    DC.B    '.B  ',0
0000016E= 2E 57 20 20 00            63  DISW    DC.B    '.W  ',0
00000173= 2E 4C 20 20 00            64  DISL    DC.B    '.L  ',0
00000178                            65  
00000178                            66  ******** DATAREGISTER/ADDRESS REGISTER PRINTS ********
00000178= 44 30 00                  67  DISD0   DC.B    'D0',0
0000017B= 44 31 00                  68  DISD1   DC.B    'D1',0
0000017E= 44 32 00                  69  DISD2   DC.B    'D2',0
00000181= 44 33 00                  70  DISD3   DC.B    'D3',0
00000184= 44 34 00                  71  DISD4   DC.B    'D4',0
00000187= 44 35 00                  72  DISD5   DC.B    'D5',0
0000018A= 44 36 00                  73  DISD6   DC.B    'D6',0
0000018D= 44 37 00                  74  DISD7   DC.B    'D7',0
00000190= 41 30 00                  75  DISA0   DC.B    'A0',0
00000193= 41 31 00                  76  DISA1   DC.B    'A1',0
00000196= 41 32 00                  77  DISA2   DC.B    'A2',0
00000199= 41 33 00                  78  DISA3   DC.B    'A3',0
0000019C= 41 34 00                  79  DISA4   DC.B    'A4',0
0000019F= 41 35 00                  80  DISA5   DC.B    'A5',0
000001A2= 41 36 00                  81  DISA6   DC.B    'A6',0
000001A5= 41 37 00                  82  DISA7   DC.B    'A7',0
000001A8                            83  
000001A8                            84  ******** INVALID DATA ********
000001A8= 20 20 44 41 54 41 ...     85  DISDATA DC.B    '  DATA  ',0
00001000                            86          ORG     $1000     ; start at 1000
00001000                            87  START:          
00001000                            88  
00001000                            89  STARTADR:                   
00001000  43F8 0011                 90          LEA     ASKST,A1    ; load message to A1
00001004  103C 000D                 91          MOVE.B  #13,D0      ; use trap task 13
00001008  4E4F                      92          TRAP    #15
0000100A  6000 0014                 93          BRA     CHARLOOP    ; loop to get start address
0000100E                            94  ENDADR:
0000100E  43F8 0037                 95          LEA     ASKEN,A1    ; load message to A1
00001012  103C 000D                 96          MOVE.B  #13,D0      ; use trap task 13
00001016  4E4F                      97          TRAP    #15
00001018  1E3C 0001                 98          MOVE.B  #1,D7       ; set D7 to 1 (using as bool)
0000101C                            99                              ; to later check if asking for end
0000101C  6000 0002                100          BRA     CHARLOOP    ; loop to get end address
00001020                           101  CHARLOOP:
00001020  103C 0005                102          MOVE.B  #5,D0       ; loop through user input until two 
00001024                           103                              ; hexa characters are entered.
00001024  4E4F                     104          TRAP    #15
00001026  5203                     105          ADD.B   #1,D3
00001028  6D00 0002                106          BLT     ISEND
0000102C                           107  ISEND:
0000102C  B23C 000D                108          CMP.B   #$D,D1
00001030  6700 005A                109          BEQ     PRESSEDENT
00001034  6000 0002                110          BRA     CONVERTTOHEX
00001038                           111  
00001038                           112  * START: The following section converts ascii characters to
00001038                           113  * corresponding hex
00001038                           114  CONVERTTOHEX:
00001038  B23C 0030                115          CMP.B   #$30,D1     ; if the less than 0x30 not valid
0000103C  6D00 0064                116          BLT     INVALID
00001040  0401 0030                117          SUB.B   #$30,D1     ; offset by 0x30 
00001044  B23C 0009                118          CMP.B   #$9,D1      ; if greater than 0x9, could be a HEX letter
00001048  6E00 0006                119          BGT     ISUPP
0000104C  6000 0030                120          BRA     SHIFT4NXT
00001050                           121  ISUPP: * Checks if the character is a HEX letter in uppercase
00001050  5F01                     122          SUB.B   #$7,D1      ; offset by 0x07 
00001052  B23C 000A                123          CMP.B   #$A,D1      
00001056  6D00 004A                124          BLT     INVALID        ; if less than 0xA, invalid char
0000105A  B23C 000F                125          CMP.B   #$F,D1  
0000105E  6E00 0006                126          BGT     ISLOW       ; could be lowercase HEX letter
00001062  6000 001A                127          BRA     SHIFT4NXT
00001066                           128  ISLOW: * Checks if the character is a HEX letter in lowercase
00001066  0401 0020                129          SUB.B   #$20,D1     ; offset by 0x20
0000106A  B23C 000A                130          CMP.B   #$A,D1      ; if less than 0xA, invalid char
0000106E  6D00 0032                131          BLT     INVALID
00001072  B23C 000F                132          CMP.B   #$F,D1      ; if greater than 0xF, invalid char
00001076  6E00 002A                133          BGT     INVALID
0000107A  6000 0002                134          BRA     SHIFT4NXT
0000107E                           135  * END * 
0000107E                           136  
0000107E                           137  SHIFT4NXT:
0000107E  D401                     138          ADD.B  D1,D2
00001080  B63C 0008                139          CMP.B   #8,D3       ; check if reached max characters
00001084                           140                              ; otherwise bitshift for next char
00001084  6700 0008                141          BEQ     ISLASTIN    ; check if asking for last
00001088  E982                     142          ASL.L   #4,D2
0000108A  6094                     143          BRA     CHARLOOP
0000108C                           144  PRESSEDENT:
0000108C  E882                     145          ASR.L   #4,D2       ; remove the extra bit shift since when
0000108E                           146                              ; pressing enter max chars is 7
0000108E                           147  ISLASTIN:
0000108E  BE3C 0001                148          CMP.B   #1,D7       ; if D7 is set, asking for last input
00001092  6700 002C                149          BEQ     VALIDATEIN  ; branch to the next place if asking for end
00001096  4283                     150          CLR.L   D3          ; Clear character count
00001098  21C2 0000                151          MOVE.L  D2,STADR
0000109C  4282                     152          CLR.L   D2
0000109E  6000 FF6E                153          BRA     ENDADR      ; else ask for input
000010A2                           154  
000010A2                           155  INVALID:                    ; handle an invalid input
000010A2  43F8 00B9                156          LEA     INVALIDMSG,A1
000010A6  103C 000D                157          MOVE.B  #13,D0
000010AA  4E4F                     158          TRAP    #15
000010AC                           159  
000010AC  4280                     160          CLR.L   D0
000010AE  4281                     161          CLR.L   D1
000010B0  4282                     162          CLR.L   D2
000010B2  4283                     163          CLR.L   D3
000010B4  4284                     164          CLR.L   D4
000010B6  4285                     165          CLR.L   D5
000010B8  4286                     166          CLR.L   D6
000010BA  4287                     167          CLR.L   D7
000010BC  6000 FF42                168          BRA     STARTADR
000010C0                           169  VALIDATEIN:
000010C0  4283                     170          CLR.L   D3
000010C2  21C2 0004                171          MOVE.L  D2,ENADR    ; saving since latest address has not been saved yet
000010C6  2238 0000                172          MOVE.L  STADR,D1
000010CA  B481                     173          CMP.L   D1,D2       ; check if ending is before start
000010CC  65D4                     174          BLO     INVALID
000010CE  B2BC 00001000            175          CMP.L   #$1000,D1   ; check if start is before program start
000010D4  6DCC                     176          BLT     INVALID
000010D6  E209                     177          LSR.B   #1,D1       ; check starting address to avoid loading invalid address
000010D8  65C8                     178          BCS     INVALID     ; 68k only allows loading even addresses 
000010DA                           179  READMEM:
000010DA  4287                     180          CLR.L   D7
000010DC  4283                     181          CLR.L   D3     
000010DE  4282                     182          CLR.L   D2
000010E0                           183          * Clear the screen
000010E0  3239 0000FF00            184          MOVE.W  $FF00,D1
000010E6  103C 000F                185          MOVE.B  #15,D0
000010EA  4E4F                     186          TRAP    #15
000010EC                           187  
000010EC  4281                     188          CLR.L   D1
000010EE  2478 0000                189          MOVE.L  STADR,A2    ; load starting address
000010F2                           190  LOOPMEM:
000010F2  52B8 0008                191          ADDQ.L  #1,LOOPCOUNT
000010F6  0CB8 0000001E 0008       192          CMPI.L  #30,LOOPCOUNT
000010FE  4EB9 0000283A            193          JSR     WAIT
00001104  21CA 000C                194          MOVE.L  A2,PC_COUNT
00001108  3412                     195          MOVE.W  (A2),D2    ; each instruction is at least a word in machine code
0000110A                           196          * Do action here *
0000110A                           197  DECODENOP:
0000110A  3602                     198          MOVE.W  D2, D3      ; make a copy in d3 to run tests on the copy
0000110C  0A43 4E71                199          EORI.W  #$4E71,D3   ; NOP XOR NOP would equal 0
00001110  B67C 0000                200          CMP.W   #0,D3
00001114  6700 08AC                201          BEQ     PRINTNOP
00001118                           202  DECODERTS:
00001118  3602                     203          MOVE.W  D2, D3      ; make a copy in d3 to run tests on the copy
0000111A  0A43 4E75                204          EORI.W  #$4E75,D3  ; RTS XOR RTS would eqaul 0
0000111E  B67C 0000                205          CMP.W   #0,D3
00001122  6700 08C8                206          BEQ     PRINTRTS
00001126                           207  ******** DECODE LOGICS ********
00001126                           208  DECODELOGICS:
00001126  3602                     209          MOVE.W  D2,D3
00001128  EE4B                     210          LSR.W   #7,D3       ; NOT, LEA, JSR starts with 0100, RTS starts with 0100 too, but it has a seperate check
0000112A  EA4B                     211          LSR.W   #5,D3
0000112C  0C03 0004                212          CMPI.B  #4,D3
00001130  6700 0016                213          BEQ     DECODELOGIC_CODE
00001134  0C03 000C                214          CMPI.B  #$C,D3
00001138  6700 0082                215          BEQ     DECODE_AND
0000113C  0C03 0008                216          CMPI.B  #$8,D3
00001140  6700 0094                217          BEQ     DECODE_OR
00001144  6000 00AA                218          BRA     DECODESHIFTS
00001148                           219          
00001148                           220  ******** DECODE LOGICS SEQUENCE ********
00001148                           221  DECODELOGIC_CODE:
00001148  3602                     222          MOVE.W  D2,D3
0000114A  0803 000B                223          BTST.L  #11,D3
0000114E  6600 0022                224          BNE     CHECK_IS_MOVEM_OR_JSR
00001152  E04B                     225          LSR.W   #8,D3
00001154  B63C 0046                226          CMP.B   #$46,D3
00001158  6700 0024                227          BEQ     DECODENOT_REG   ; if the opcode starts with 0100 0110, then it is NOT opcode
0000115C                           228          
0000115C  3602                     229          MOVE.W  D2,D3
0000115E  E04B                     230          LSR.W   #8,D3
00001160  B63C 004E                231          CMP.B   #$4E,D3
00001164  6700 0022                232          BEQ     DECODEJSR_REG   ; if the opcode starts with 0100 1110, then it is JSR opcode
00001168                           233          
00001168  2602                     234          MOVE.L  D2,D3
0000116A  0803 0008                235          BTST.L  #8,D3
0000116E  6600 0032                236          BNE     DECODELEA_MEM   ; if the opcode starts with 0100 and the 8th binary is 1, then it is a LEA opcode
00001172                           237  CHECK_IS_MOVEM_OR_JSR:
00001172  0803 0009                238          BTST.L  #9,D3
00001176  6700 061A                239          BEQ     DECODE_MOVEM
0000117A  6600 000C                240          BNE     DECODEJSR_REG
0000117E                           241  DECODENOT_REG:
0000117E  4EB9 00001822            242          JSR     GET_NOT_LOGIC_DATA
00001184  6000 093A                243          BRA     PRINTNOT
00001188                           244          
00001188                           245  DECODEJSR_REG:
00001188  4EB9 00001840            246          JSR     GET_JSR_LOGIC_DATA
0000118E  BC3C 0002                247          CMP.B   #$2,D6
00001192  6700 0A30                248          BEQ     PRINTJSR_ADR
00001196  BC3C 0007                249          CMP.B   #$7,D6      ; the EA is either word or long
0000119A  6700 0A44                250          BEQ     PRINTJSR_ABS_ADR
0000119E  6000 0642                251          BRA     INVALIDOP
000011A2                           252  
000011A2                           253  DECODELEA_MEM:
000011A2  4EB9 00001854            254          JSR     GET_LEA_LOGIC_DATA
000011A8  BC3C 0002                255          CMP.B   #$2,D6
000011AC  6700 0A70                256          BEQ     PRINTLEA_ADR
000011B0  BC3C 0007                257          CMP.B   #$7,D6
000011B4  6700 0A92                258          BEQ     PRINTLEA_ABS_ADR
000011B8  6000 0628                259          BRA     INVALIDOP
000011BC                           260          
000011BC                           261  ******** DECODE AND ***********
000011BC                           262  DECODE_AND:
000011BC                           263          ; Check if the opcode is MULS
000011BC  3602                     264          MOVE.W  D2,D3
000011BE  EC4B                     265          LSR.W   #6,D3
000011C0  0243 0003                266          ANDI.W  #$3,D3
000011C4  0C43 0003                267          CMPI.W  #$3,D3
000011C8  6700 0618                268          BEQ     INVALIDOP
000011CC  4EB9 00001876            269          JSR     GET_AND_DATA
000011D2  6000 0AC0                270          BRA     PRINT_AND_DATA
000011D6                           271          
000011D6                           272  ******** DECODE OR  ***********
000011D6                           273  DECODE_OR:
000011D6                           274          ; Check if the opcode is not DIVU
000011D6  3602                     275          MOVE.W  D2,D3
000011D8  EC4B                     276          LSR.W   #6,D3
000011DA  0243 0003                277          ANDI.W  #$3,D3
000011DE  0C43 0003                278          CMPI.W  #$3,D3
000011E2  6700 05FE                279          BEQ     INVALIDOP
000011E6  4EB9 00001876            280          JSR     GET_AND_DATA
000011EC  6000 0C98                281          BRA     PRINT_OR_DATA
000011F0                           282          
000011F0                           283  ******** DECODE SHIFTS ********
000011F0                           284  DECODESHIFTS:
000011F0  3602                     285          MOVE.W  D2,D3
000011F2  EE4B                     286          LSR.W   #7,D3
000011F4  EA4B                     287          LSR.W   #5,D3
000011F6  0C03 000E                288          CMPI.B  #$E,D3
000011FA  6600 00F2                289          BNE     DECODEADDS  ; REPLACE WITH OPCODES AS THEY GET DONE
000011FE  2602                     290          MOVE.L  D2,D3
00001200  EC8B                     291          LSR.L   #6,D3      
00001202  0203 0003                292          ANDI.B  #$3,D3
00001206  B63C 0003                293          CMP.B   #$3,D3
0000120A  6700 007C                294          BEQ     DECODE_SHIFT_MEM  ; if 0 then a right shift.
0000120E                           295  ******** DECODE REGISTER SHIFTS ********
0000120E                           296  DECODE_REG:
0000120E  2602                     297          MOVE.L  D2,D3       ; restore D3 
00001210  0803 0008                298          BTST    #8,D3
00001214  6700 003A                299          BEQ     DECODELSR_REG
00001218                           300  ******** DECODE LSL REG ******** 
00001218                           301  DECODELSL_REG:
00001218  0803 0004                302          BTST.L  #4,D3      ; shifts are set to 0
0000121C  6600 001E                303          BNE     DECODEROL_REG  ; rotates are set to 1
00001220  0803 0003                304          BTST.L  #3,D3      ; arthimetic shift is set to 0
00001224  6700 000C                305          BEQ     DECODEASL_REG
00001228  4EB9 00001926            306          JSR     GET_REG_SHIFT_DATA
0000122E  6000 0E7E                307          BRA     PRINTLSL_REG       
00001232                           308  ******** DECODE ASL REG ********
00001232                           309  DECODEASL_REG:
00001232  4EB9 00001926            310          JSR     GET_REG_SHIFT_DATA 
00001238  6000 0EB8                311          BRA     PRINTASL_REG
0000123C                           312  ******** DECODE ROL REG ********
0000123C                           313  DECODEROL_REG:
0000123C  2602                     314          MOVE.L  D2,D3
0000123E  0803 0003                315          BTST.L  #3,D3
00001242  6700 059E                316          BEQ     INVALIDOP   ; we are not supporting ROXL
00001246  4EB9 00001926            317          JSR     GET_REG_SHIFT_DATA
0000124C  6000 0EE8                318          BRA     PRINTROL_REG
00001250                           319  ******** DECODE LSR REG ********
00001250                           320  DECODELSR_REG:
00001250  0803 0004                321          BTST.L  #4,D3      ; shifts are set to 0
00001254  6600 001E                322          BNE     DECODEROR_REG  ; rotates are set to 1
00001258  0803 0003                323          BTST.L  #3,D3      ; arthimetic shift is set to 0
0000125C  6700 000C                324          BEQ     DECODEASR_REG
00001260  4EB9 00001926            325          JSR     GET_REG_SHIFT_DATA
00001266  6000 0E68                326          BRA     PRINTLSR_REG    
0000126A                           327  ******** DECODE ASR REG ********
0000126A                           328  DECODEASR_REG:
0000126A  4EB9 00001926            329          JSR     GET_REG_SHIFT_DATA 
00001270  6000 0EA2                330          BRA     PRINTASR_REG
00001274                           331  ******** DECODE ROR REG ********
00001274                           332  DECODEROR_REG:
00001274  2602                     333          MOVE.L  D2,D3
00001276  0803 0003                334          BTST.L  #3,D3
0000127A  6700 0566                335          BEQ     INVALIDOP   ; we are not supporting ROXR
0000127E  4EB9 00001926            336          JSR     GET_REG_SHIFT_DATA
00001284  6000 0ED2                337          BRA     PRINTROR_REG
00001288                           338  ******** DECODE MEMORY SHIFTS ********
00001288                           339  DECODE_SHIFT_MEM:
00001288  2602                     340          MOVE.L  D2,D3       ; restore D3 
0000128A  0803 0008                341          BTST.L  #8,D3
0000128E  6700 0030                342          BEQ     DECODE_LSR_MEM
00001292                           343  ******** DECODE LSL MEM ********
00001292                           344  DECODE_LSL_MEM:
00001292  0803 000A                345          BTST.L  #10,D3
00001296  6600 001E                346          BNE     DECODE_ROL_MEM
0000129A  0803 0009                347          BTST.L  #9,D3
0000129E  6700 000C                348          BEQ     DECODE_ASL_MEM
000012A2  4EB9 00001958            349          JSR     GET_MEM_SHIFT_DATA
000012A8  6000 0ED0                350          BRA     PRINTLSL_MEM
000012AC                           351  ******** DECODE ASL MEM ********
000012AC                           352  DECODE_ASL_MEM:
000012AC  4EB9 00001958            353          JSR     GET_MEM_SHIFT_DATA
000012B2  6000 0F06                354          BRA     PRINTASL_MEM
000012B6                           355  ******** DECODE ROL MEM ********
000012B6                           356  DECODE_ROL_MEM:
000012B6  4EB9 00001958            357          JSR     GET_MEM_SHIFT_DATA
000012BC  6000 0F3C                358          BRA     PRINTROL_MEM
000012C0                           359  ******** DECODE LSR MEM ********
000012C0                           360  DECODE_LSR_MEM:
000012C0  0803 000A                361          BTST.L  #10,D3
000012C4  6600 001E                362          BNE     DECODE_ROR_MEM
000012C8  0803 0009                363          BTST.L  #9,D3
000012CC  6700 000C                364          BEQ     DECODE_ASR_MEM
000012D0  4EB9 00001958            365          JSR     GET_MEM_SHIFT_DATA
000012D6  6000 0EC2                366          BRA     PRINTLSR_MEM
000012DA                           367  ******** DECODE ASR MEM ********
000012DA                           368  DECODE_ASR_MEM:
000012DA  4EB9 00001958            369          JSR     GET_MEM_SHIFT_DATA
000012E0  6000 0EF8                370          BRA     PRINTASR_MEM
000012E4                           371  ******** DECODE ROR MEM ********
000012E4                           372  DECODE_ROR_MEM:
000012E4  4EB9 00001958            373          JSR     GET_MEM_SHIFT_DATA
000012EA  6000 0F2E                374          BRA     PRINTROR_MEM
000012EE                           375  ******** DECODE ADDITIONS ********
000012EE                           376  DECODEADDS:
000012EE  3602                     377          MOVE.W  D2,D3
000012F0  EE4B                     378          LSR.W   #7,D3
000012F2  EA4B                     379          LSR.W   #5,D3
000012F4  0C03 000D                380          CMPI.B  #$D,D3
000012F8  6600 008C                381          BNE     DECODE_ADDQ
000012FC  3602                     382          MOVE.W  D2,D3
000012FE                           383          * Check if its ADDA * 
000012FE  EC4B                     384          LSR.W   #6,D3
00001300  0243 0003                385          ANDI.W  #$3,D3
00001304  0C43 0003                386          CMPI.W  #%011,D3
00001308  6700 004C                387          BEQ     DECODE_ADDA_AnDn
0000130C  0C43 0007                388          CMPI.W  #%111,D3
00001310  6700 0044                389          BEQ     DECODE_ADDA_AnDn
00001314                           390          * Start ADD decode *
00001314                           391          * Check if ea or An/Dn *
00001314  3602                     392          MOVE.W  D2,D3
00001316  E64B                     393          LSR.W   #3,D3
00001318  0243 0007                394          ANDI.W  #$7,D3
0000131C  0C43 0007                395          CMPI.W  #%111,D3
00001320  6700 0018                396          BEQ     DECODE_ADD_EA
00001324                           397  ******** DECODE ADD Dn,Dn ********
00001324                           398  DECODE_ADD_Dn:
00001324  4EB9 000018C0            399          JSR     GET_ADD_MODE_REG
0000132A  4EB9 000018E6            400          JSR     GET_ADD_OPMODE
00001330  4EB9 000018F4            401          JSR     GET_ADD_REG
00001336  6000 0F02                402          BRA     PRINT_ADD_Dn
0000133A                           403  ******** DECODE ADD ea,Dn/Dn,ea ********
0000133A                           404  DECODE_ADD_EA:
0000133A  4EB9 000018C0            405          JSR     GET_ADD_MODE_REG
00001340  4EB9 000018E6            406          JSR     GET_ADD_OPMODE
00001346  4EB9 000018F4            407          JSR     GET_ADD_REG
0000134C  4EB9 00001902            408          JSR     GET_ADD_EA
00001352  6000 0F64                409          BRA     PRINT_ADD_EA
00001356                           410  *****************************
00001356                           411  ******** DECODE ADDA ********
00001356                           412  *****************************
00001356                           413  ******** DECODE ADDA.x Dn,An & An,An ********
00001356                           414  DECODE_ADDA_AnDn:
00001356  4EB9 000018C0            415          JSR     GET_ADD_MODE_REG
0000135C  4EB9 000018E6            416          JSR     GET_ADD_OPMODE
00001362  4EB9 000018F4            417          JSR     GET_ADD_REG
00001368                           418          * Check if we're dealing with Dn,An;An,An * 
00001368  0C07 0001                419          CMPI.B  #1,D7
0000136C  6F00 0F7A                420          BLE     PRINT_ADDA_DnAn
00001370                           421          * CHeck if we're dealing with effective addressing *
00001370  0C07 0007                422          CMPI.B  #%111,D7
00001374  6700 0006                423          BEQ     DECODE_ADDA_EA
00001378  6000 0FB2                424          BRA     PRINT_ADDA_INDIRECT
0000137C                           425  DECODE_ADDA_EA:
0000137C  4EB9 00001902            426          JSR     GET_ADD_EA
00001382  6000 0FEC                427          BRA     PRINT_ADDA_EA
00001386                           428  DECODE_ADDQ:
00001386  3602                     429          MOVE.W  D2,D3
00001388  EE4B                     430          LSR.W   #7,D3
0000138A  EA4B                     431          LSR.W   #5,D3
0000138C  0C03 0005                432          CMPI.B  #5,D3
00001390  6600 0044                433          BNE     DECODE_SUB
00001394  3602                     434          MOVE.W  D2,D3
00001396                           435  DECODE_ADDQ_AnDn:
00001396  0803 0008                436          BTST.L  #8,D3
0000139A  6600 0446                437          BNE     INVALIDOP  ; bit #8 should be 0
0000139E  4EB9 000018C0            438          JSR     GET_ADD_MODE_REG
000013A4  4EB9 000018A2            439          JSR     GET_ADDQ_SIZE
000013AA  4EB9 000018B0            440          JSR     GET_ADDQ_DATA
000013B0                           441  
000013B0                           442          * CHeck if dealing with ea * 
000013B0  0C07 0007                443          CMPI.B  #%111,D7
000013B4  6700 0016                444          BEQ     DECODE_ADDQ_EA
000013B8  0C07 0001                445          CMPI.B  #%1,D7
000013BC                           446          * Check if invalid size *
000013BC  0C05 0003                447          CMPI.B  #%11,D5
000013C0  6700 0420                448          BEQ     INVALIDOP
000013C4                           449          * Check if dealing with An/Dn *
000013C4  6F00 0FEE                450          BLE     PRINT_ADDQ_AnDn
000013C8  6000 106E                451          BRA     PRINT_ADDQ_INDIRECT
000013CC                           452  DECODE_ADDQ_EA:
000013CC  4EB9 00001902            453          JSR     GET_ADD_EA
000013D2  6000 1022                454          BRA     PRINT_ADDQ_EA
000013D6                           455  DECODE_SUB:
000013D6  3602                     456          MOVE.W  D2,D3
000013D8  EE4B                     457          LSR.W   #7,D3
000013DA  EA4B                     458          LSR.W   #5,D3
000013DC  0C03 0009                459          CMPI.B  #9,D3
000013E0  6600 003C                460          BNE     DECODEBRANCHES
000013E4  3602                     461          MOVE.W  D2,D3
000013E6                           462  ******** DECODE SUB Dn,Dn ********
000013E6                           463  DECODE_SUB_Dn:
000013E6  4EB9 000018C0            464          JSR     GET_ADD_MODE_REG
000013EC  4EB9 000018E6            465          JSR     GET_ADD_OPMODE
000013F2  4EB9 000018F4            466          JSR     GET_ADD_REG
000013F8                           467          * check if opmode is 111 or 011 (not supporting addressing for SUB *
000013F8  0C46 0007                468          CMPI.W  #%111,D6
000013FC  6700 03E4                469          BEQ     INVALIDOP
00001400  0C46 0003                470          CMPI.W  #%011,D6
00001404  6700 03DC                471          BEQ     INVALIDOP
00001408                           472          * check if dealing with ea *
00001408  0C47 0007                473          CMPI.W  #%111,D7
0000140C  6700 0006                474          BEQ     DECODE_SUB_EA
00001410  6000 1068                475          BRA     PRINT_SUB_Dn
00001414                           476  ******** DECODE ADD ea,Dn/Dn,ea ********
00001414                           477  DECODE_SUB_EA:
00001414  4EB9 00001902            478          JSR     GET_ADD_EA
0000141A  6000 10AA                479          BRA     PRINT_SUB_EA        
0000141E                           480  *****************************
0000141E                           481  ******** DECODE Bcc ********
0000141E                           482  *****************************
0000141E                           483  ******** DECODE BRA, Bcc ********
0000141E                           484  *Assume that 0110 has been found branching to this
0000141E                           485  *D2 is original, D3 is manipulated copy, D4 is Conditional(4b), d5 is displacement(8b)
0000141E                           486  DECODEBRANCHES:
0000141E  3602                     487          MOVE.W  D2,D3   *reinstate the full machine code
00001420  EE4B                     488          LSR.W   #7,D3 *0110 check probably in main method
00001422  EA4B                     489          LSR.W   #5,D3
00001424  0C03 0006                490          CMPI.B  #%0110,D3
00001428  6600 03B8                491          BNE     INVALIDOP *Or the next decoding branch
0000142C                           492          *-----------------------------------------------------------------------------
0000142C  3602                     493          MOVE.W  D2,D3   *reinstate the full machine code
0000142E  EE4B                     494          LSR.W   #7,D3
00001430  E24B                     495          LSR.W   #1,D3   *Get to the conditional bits
00001432  0243 000F                496          ANDI.W  #$0F,D3 *Mask everything else to get conditional bits
00001436  0C43 0000                497          CMPI.W  #0,D3
0000143A  6700 002A                498          BEQ     DECODE_BRA
0000143E  0C43 000D                499          CMPI.W  #%1101,D3
00001442  6700 0074                500          BEQ     DECODE_BLT
00001446  0C43 000E                501          CMPI.W  #%1110,D3
0000144A  6700 00BE                502          BEQ     DECODE_BGT
0000144E  0C43 000F                503          CMPI.W  #%1111,D3
00001452  6700 0108                504          BEQ     DECODE_BLE
00001456  0C43 000C                505          CMPI.W  #%1100,D3
0000145A  6700 0152                506          BEQ     DECODE_BGE
0000145E  0C43 0007                507          CMPI.W  #%0111,D3
00001462  6700 019C                508          BEQ     DECODE_BEQ
00001466                           509  DECODE_BRA:
00001466  4EB9 0000285A            510          JSR     PRINT_PC
0000146C                           511          *We know that conditional is 0000, BRA
0000146C  4EB9 000016C8            512          JSR     PRINT_BRA *Print just BRA and come back
00001472  4EB9 000016BE            513          JSR     GET_DISPLACEMENT
00001478  B67C 0000                514          CMP.W   #$00, D3    *Check if displacement = $00, word addressing
0000147C  6700 01D4                515          BEQ     BRANCH_WORD
00001480  B67C 00FF                516          CMP.W   #$FF, D3    *Check if displacement = $FF, long word addresing
00001484  6700 0202                517          BEQ     BRANCH_LONG
00001488                           518          *If not, two's complement and subtract from current address   
00001488  4645                     519          NOT     D5          *Flip all
0000148A  5245                     520          ADD.W   #%0000001, D5 *Add one
0000148C  2638 000C                521          MOVE.L  PC_COUNT,D3 *Get current address
00001490  9645                     522          SUB.W  D5,D3        *Subtract D5 from current address
00001492  2203                     523          MOVE.L  D3,D1 *Print D3, as it is the address
00001494  143C 0010                524          MOVE.B  #16,D2
00001498  103C 000F                525          MOVE.B  #15,D0
0000149C  4E4F                     526          TRAP    #15
0000149E  4EB9 00002822            527          JSR     PRINTNEWLINE
000014A4  4EB9 00002876            528          JSR     CLEAR_ALL
000014AA  341A                     529          MOVE.W  (A2)+,D2
000014AC  B5F8 0004                530          CMP.L   ENADR,A2   ; keep looping until reach the end
000014B0  6D00 FC40                531          BLT     LOOPMEM
000014B4  6000 13D0                532          BRA     DONE
000014B8                           533  DECODE_BLT:
000014B8  4EB9 0000285A            534          JSR     PRINT_PC
000014BE                           535          *We know that conditional is 1101, BLT
000014BE  4EB9 000016D4            536          JSR     PRINT_BLT *Print just BLT and come back
000014C4  4EB9 000016BE            537          JSR     GET_DISPLACEMENT
000014CA  B67C 0000                538          CMP.W   #$00, D3    *Check if displacement = $00, word addressing
000014CE  6700 0182                539          BEQ     BRANCH_WORD
000014D2  B67C 00FF                540          CMP.W   #$FF, D3    *Check if displacement = $FF, long word addresing
000014D6  6700 01B0                541          BEQ     BRANCH_LONG
000014DA                           542          *If not, two's complement and subtract from current address   
000014DA  4645                     543          NOT     D5          *Flip all
000014DC  5245                     544          ADD.W   #%0000001, D5 *Add one
000014DE  2638 000C                545          MOVE.L  PC_COUNT,D3 *Get current address
000014E2  9645                     546          SUB.W  D5,D3        *Subtract D5 from current address
000014E4  2203                     547          MOVE.L  D3,D1 *Print D3, as it is the address
000014E6  143C 0010                548          MOVE.B  #16,D2
000014EA  103C 000F                549          MOVE.B  #15,D0
000014EE  4E4F                     550          TRAP    #15
000014F0  4EB9 00002822            551          JSR     PRINTNEWLINE
000014F6  4EB9 00002876            552          JSR     CLEAR_ALL
000014FC  341A                     553          MOVE.W  (A2)+,D2
000014FE  B5F8 0004                554          CMP.L   ENADR,A2   ; keep looping until reach the end
00001502  6D00 FBEE                555          BLT     LOOPMEM
00001506  6000 137E                556          BRA     DONE
0000150A                           557  DECODE_BGT:
0000150A  4EB9 0000285A            558          JSR     PRINT_PC
00001510                           559          *We know that conditional is 1110, BGT
00001510  4EB9 000016E0            560          JSR     PRINT_BGT *Print just BRA and come back
00001516  4EB9 000016BE            561          JSR     GET_DISPLACEMENT
0000151C  B67C 0000                562          CMP.W   #$00, D3    *Check if displacement = $00, word addressing
00001520  6700 0130                563          BEQ     BRANCH_WORD
00001524  B67C 00FF                564          CMP.W   #$FF, D3    *Check if displacement = $FF, long word addresing
00001528  6700 015E                565          BEQ     BRANCH_LONG
0000152C                           566          *If not, two's complement and subtract from current address   
0000152C  4645                     567          NOT     D5          *Flip all
0000152E  5245                     568          ADD.W   #%0000001, D5 *Add one
00001530  2638 000C                569          MOVE.L  PC_COUNT,D3 *Get current address
00001534  9645                     570          SUB.W  D5,D3        *Subtract D5 from current address
00001536  2203                     571          MOVE.L  D3,D1 *Print D3, as it is the address
00001538  143C 0010                572          MOVE.B  #16,D2
0000153C  103C 000F                573          MOVE.B  #15,D0
00001540  4E4F                     574          TRAP    #15
00001542  4EB9 00002822            575          JSR     PRINTNEWLINE
00001548  4EB9 00002876            576          JSR     CLEAR_ALL
0000154E  341A                     577          MOVE.W  (A2)+,D2
00001550  B5F8 0004                578          CMP.L   ENADR,A2   ; keep looping until reach the end
00001554  6D00 FB9C                579          BLT     LOOPMEM
00001558  6000 132C                580          BRA     DONE
0000155C                           581  DECODE_BLE:
0000155C  4EB9 0000285A            582          JSR     PRINT_PC
00001562                           583          *We know that conditional is 1111, BLE
00001562  4EB9 000016EC            584          JSR     PRINT_BLE *Print just BLE and come back
00001568  4EB9 000016BE            585          JSR     GET_DISPLACEMENT
0000156E  B67C 0000                586          CMP.W   #$00, D3    *Check if displacement = $00, word addressing
00001572  6700 00DE                587          BEQ     BRANCH_WORD
00001576  B67C 00FF                588          CMP.W   #$FF, D3    *Check if displacement = $FF, long word addresing
0000157A  6700 010C                589          BEQ     BRANCH_LONG
0000157E                           590          *If not, two's complement and subtract from current address   
0000157E  4645                     591          NOT     D5          *Flip all
00001580  5245                     592          ADD.W   #%0000001, D5 *Add one
00001582  2638 000C                593          MOVE.L  PC_COUNT,D3 *Get current address
00001586  9645                     594          SUB.W  D5,D3        *Subtract D5 from current address
00001588  2203                     595          MOVE.L  D3,D1 *Print D3, as it is the address
0000158A  143C 0010                596          MOVE.B  #16,D2
0000158E  103C 000F                597          MOVE.B  #15,D0
00001592  4E4F                     598          TRAP    #15
00001594  4EB9 00002822            599          JSR     PRINTNEWLINE
0000159A  4EB9 00002876            600          JSR     CLEAR_ALL
000015A0  341A                     601          MOVE.W  (A2)+,D2
000015A2  B5F8 0004                602          CMP.L   ENADR,A2   ; keep looping until reach the end
000015A6  6D00 FB4A                603          BLT     LOOPMEM
000015AA  6000 12DA                604          BRA     DONE
000015AE                           605  DECODE_BGE:
000015AE  4EB9 0000285A            606          JSR     PRINT_PC
000015B4                           607          *We know that conditional is 1100, BGE
000015B4  4EB9 000016F8            608          JSR     PRINT_BGE *Print just BGE and come back
000015BA  4EB9 000016BE            609          JSR     GET_DISPLACEMENT
000015C0  B67C 0000                610          CMP.W   #$00, D3    *Check if displacement = $00, word addressing
000015C4  6700 008C                611          BEQ     BRANCH_WORD
000015C8  B67C 00FF                612          CMP.W   #$FF, D3    *Check if displacement = $FF, long word addresing
000015CC  6700 00BA                613          BEQ     BRANCH_LONG
000015D0                           614          *If not, two's complement and subtract from current address   
000015D0  4645                     615          NOT     D5          *Flip all
000015D2  5245                     616          ADD.W   #%0000001, D5 *Add one
000015D4  2638 000C                617          MOVE.L  PC_COUNT,D3 *Get current address
000015D8  9645                     618          SUB.W  D5,D3        *Subtract D5 from current address
000015DA  2203                     619          MOVE.L  D3,D1 *Print D3, as it is the address
000015DC  143C 0010                620          MOVE.B  #16,D2
000015E0  103C 000F                621          MOVE.B  #15,D0
000015E4  4E4F                     622          TRAP    #15
000015E6  4EB9 00002822            623          JSR     PRINTNEWLINE
000015EC  4EB9 00002876            624          JSR     CLEAR_ALL
000015F2  341A                     625          MOVE.W  (A2)+,D2
000015F4  B5F8 0004                626          CMP.L   ENADR,A2   ; keep looping until reach the end
000015F8  6D00 FAF8                627          BLT     LOOPMEM
000015FC  6000 1288                628          BRA     DONE
00001600                           629  DECODE_BEQ:  
00001600  4EB9 0000285A            630          JSR     PRINT_PC
00001606                           631          *We know that conditional is 0111, BEQ
00001606  4EB9 00001704            632          JSR     PRINT_BEQ *Print just BEQ and come back
0000160C  4EB9 000016BE            633          JSR     GET_DISPLACEMENT
00001612  B67C 0000                634          CMP.W   #$00, D3    *Check if displacement = $00, word addressing
00001616  6700 003A                635          BEQ     BRANCH_WORD
0000161A  B67C 00FF                636          CMP.W   #$FF, D3    *Check if displacement = $FF, long word addresing
0000161E  6700 0068                637          BEQ     BRANCH_LONG
00001622                           638          *If not, two's complement and subtract from current address   
00001622  4645                     639          NOT     D5          *Flip all
00001624  5245                     640          ADD.W   #%0000001, D5 *Add one
00001626  2638 000C                641          MOVE.L  PC_COUNT,D3 *Get current address
0000162A  9645                     642          SUB.W  D5,D3        *Subtract D5 from current address
0000162C  2203                     643          MOVE.L  D3,D1 *Print D3, as it is the address
0000162E  143C 0010                644          MOVE.B  #16,D2
00001632  103C 000F                645          MOVE.B  #15,D0
00001636  4E4F                     646          TRAP    #15
00001638  4EB9 00002822            647          JSR     PRINTNEWLINE
0000163E  4EB9 00002876            648          JSR     CLEAR_ALL
00001644  341A                     649          MOVE.W  (A2)+,D2
00001646  B5F8 0004                650          CMP.L   ENADR,A2   ; keep looping until reach the end
0000164A  6D00 FAA6                651          BLT     LOOPMEM
0000164E  6000 1236                652          BRA     DONE
00001652                           653  BRANCH_WORD:
00001652  1E3C 0000                654          MOVE.B  #0,D7 *(Set 000 for word)
00001656  4EB9 0000199E            655          JSR     DETERMINE_ADDR_MODE *Get word address
0000165C  4EB9 0000282E            656          JSR     PRINTDOLLAR
00001662  2206                     657          MOVE.L  D6,D1
00001664  143C 0010                658          MOVE.B  #16,D2
00001668  103C 000F                659          MOVE.B  #15,D0
0000166C  4E4F                     660          TRAP    #15
0000166E  4EB9 00002822            661          JSR     PRINTNEWLINE
00001674  4EB9 00002876            662          JSR     CLEAR_ALL
0000167A  341A                     663          MOVE.W  (A2)+,D2
0000167C  B5F8 0004                664          CMP.L   ENADR,A2   ; keep looping until reach the end
00001680  6D00 FA70                665          BLT     LOOPMEM
00001684  6000 1200                666          BRA     DONE
00001688                           667  BRANCH_LONG:
00001688  1E3C 0001                668          MOVE.B  #1,D7 *(Set 001 for long)
0000168C  4EB9 0000199E            669          JSR     DETERMINE_ADDR_MODE *Get long address
00001692  4EB9 0000282E            670          JSR     PRINTDOLLAR
00001698  2206                     671          MOVE.L  D6,D1
0000169A  143C 0010                672          MOVE.B  #16,D2
0000169E  103C 000F                673          MOVE.B  #15,D0
000016A2  4E4F                     674          TRAP    #15
000016A4  4EB9 00002822            675          JSR     PRINTNEWLINE
000016AA  4EB9 00002876            676          JSR     CLEAR_ALL
000016B0  341A                     677          MOVE.W  (A2)+,D2
000016B2  B5F8 0004                678          CMP.L   ENADR,A2   ; keep looping until reach the end
000016B6  6D00 FA3A                679          BLT     LOOPMEM
000016BA  6000 11CA                680          BRA     DONE  
000016BE                           681  GET_DISPLACEMENT:
000016BE  2602                     682          MOVE.L  D2,D3   *Get new copy
000016C0  0243 00FF                683          ANDI.W  #$FF,D3 *Mask first 8
000016C4  3A03                     684          MOVE.W  D3,D5   *Store displacement into d5
000016C6  4E75                     685          RTS
000016C8                           686  PRINT_BRA: *Prints just BRA
000016C8  43F8 0145                687          LEA     DISBRA,A1
000016CC  103C 000E                688          MOVE.B  #14,D0
000016D0  4E4F                     689          TRAP    #15
000016D2  4E75                     690          RTS
000016D4                           691  PRINT_BLT:
000016D4  43F8 014B                692          LEA     DISBLT,A1
000016D8  103C 000E                693          MOVE.B  #14,D0
000016DC  4E4F                     694          TRAP    #15
000016DE  4E75                     695          RTS
000016E0                           696  PRINT_BGT:
000016E0  43F8 0151                697          LEA     DISBGT,A1
000016E4  103C 000E                698          MOVE.B  #14,D0
000016E8  4E4F                     699          TRAP    #15
000016EA  4E75                     700          RTS
000016EC                           701  PRINT_BLE:
000016EC  43F8 0157                702          LEA     DISBLE,A1
000016F0  103C 000E                703          MOVE.B  #14,D0
000016F4  4E4F                     704          TRAP    #15
000016F6  4E75                     705          RTS
000016F8                           706  PRINT_BGE:
000016F8  43F8 015D                707          LEA     DISBGE,A1
000016FC  103C 000E                708          MOVE.B  #14,D0
00001700  4E4F                     709          TRAP    #15
00001702  4E75                     710          RTS
00001704                           711  PRINT_BEQ:
00001704  43F8 0163                712          LEA     DISBEQ,A1
00001708  103C 000E                713          MOVE.B  #14,D0
0000170C  4E4F                     714          TRAP    #15
0000170E  4E75                     715          RTS
00001710                           716          
00001710                           717  *****************************
00001710                           718  ******** DECODE MOVE ********
00001710                           719  *****************************
00001710                           720  DECODE_MOVE:
00001710  3602                     721          MOVE.W  D2,D3
00001712  EE4B                     722          LSR.W   #7,D3
00001714  E84B                     723          LSR.W   #4,D3
00001716  0C43 0009                724          CMPI.W  #%01001,D3
0000171A  6700 0076                725          BEQ     DECODE_MOVEM
0000171E                           726          
0000171E  3602                     727          MOVE.W  D2,D3
00001720  EE4B                     728          LSR.W   #7,D3
00001722  EA4B                     729          LSR.W   #5,D3
00001724  0C43 0007                730          CMPI.W  #%0111,D3
00001728  6700 0054                731          BEQ     DECODE_MOVEQ
0000172C                           732          
0000172C  3602                     733          MOVE.W  D2,D3
0000172E  EE4B                     734          LSR.W   #7,D3
00001730  EE4B                     735          LSR.W   #7,D3
00001732  0C03 0000                736          CMPI.B  #%00,D3
00001736  6600 00AA                737          BNE     INVALIDOP
0000173A                           738          
0000173A  3602                     739          MOVE.W  D2,D3
0000173C  EE4B                     740          LSR.W   #7,D3
0000173E  EA4B                     741          LSR.W   #5,D3
00001740  0243 0003                742          ANDI.W  #%0011,D3
00001744  0C03 0000                743          CMPI.B  #%00,D3
00001748  6700 0098                744          BEQ     INVALIDOP
0000174C                           745          
0000174C  3602                     746          MOVE.W  D2,D3
0000174E  EE4B                     747          LSR.W   #7,D3
00001750  0243 0007                748          ANDI.W  #$7,D3
00001754  0C43 0001                749          CMPI.W  #%001,D3
00001758  6700 0002                750          BEQ     DECODE_MOVEA
0000175C                           751          
0000175C                           752          
0000175C                           753  DECODE_MOVEA:
0000175C  4EB9 000017A8            754          JSR     GET_MOVE_SIZE
00001762  0C07 0001                755          CMPI.B  #%01,D7
00001766  6700 007A                756          BEQ     INVALIDOP *MOVEA does not support bytes
0000176A                           757  
0000176A  3602                     758          MOVE.W  D2,D3
0000176C  EE4B                     759          LSR.W   #7,D3
0000176E  0243 0007                760          ANDI.W  #$7,D3
00001772  0C43 0001                761          CMPI.W  #%001,D3
00001776  3C03                     762          MOVE.W  D3,D6 *getting destination register
00001778                           763          
00001778  4EB9 000017CE            764          JSR     GET_MOVE_SOURCE
0000177E                           765          
0000177E                           766  DECODE_MOVEQ:
0000177E  3602                     767          MOVE.W  D2,D3
00001780  EE4B                     768          LSR.W   #7,D3
00001782  E24B                     769          LSR.W   #1,D3
00001784  0243 0001                770          ANDI.W  #$1,D3
00001788  0C03 0000                771          CMPI.B  #%0,D3
0000178C  6600 0054                772          BNE     INVALIDOP
00001790  3602                     773          MOVE.W  D2,D3
00001792                           774          
00001792                           775  DECODE_MOVEM:
00001792  6000 004E                776          BRA     INVALIDOP
00001796  3602                     777          MOVE.W  D2,D3
00001798  EE4B                     778          LSR.W   #7,D3
0000179A  0243 0007                779          ANDI.W  #%111,D3
0000179E  0C43 0001                780          CMPI.W  #%001,D3
000017A2  6600 003E                781          BNE     INVALIDOP
000017A6  3602                     782          MOVE.W  D2,D3
000017A8                           783          
000017A8                           784  *******MOVE FUNCTIONS*******
000017A8                           785  GET_MOVE_SIZE:
000017A8  3602                     786          MOVE.W  D2,D3
000017AA  EE4B                     787          LSR.W   #7,D3
000017AC  EA4B                     788          LSR.W   #5,D3
000017AE  0243 0003                789          ANDI.W  #%0011,D3
000017B2  1E03                     790          MOVE.B  D3,D7 *storing size in D7
000017B4  4E75                     791          RTS
000017B6                           792  GET_MOVE_DEST:
000017B6  3602                     793          MOVE.W  D2,D3
000017B8  EC4B                     794          LSR.W   #6,D3
000017BA  E64B                     795          LSR.W   #3,D3
000017BC  0243 0007                796          ANDI.W  #$7,D3
000017C0  3803                     797          MOVE.W  D3,D4 *storing destination register in D4
000017C2  3602                     798          MOVE.W  D2,D3
000017C4  EC4B                     799          LSR.W   #6,D3
000017C6  0243 0007                800          ANDI.W  #$7,D3
000017CA  3A03                     801          MOVE.W  D3,D5 *storing destination mode in D5
000017CC  4E75                     802          RTS
000017CE                           803  GET_MOVE_SOURCE:
000017CE  3602                     804          MOVE.W  D2,D3
000017D0  E64B                     805          LSR.W   #3,D3
000017D2  0243 0007                806          ANDI.W  #$7,D3
000017D6  3A03                     807          MOVE.W  D3,D5 *storing source mode in D5
000017D8  3602                     808          MOVE.W  D2,D3
000017DA  0243 0007                809          ANDI.W  #$7,D3
000017DE  3803                     810          MOVE.W  D3,D4 *storing source register in D4
000017E0  4E75                     811          RTS
000017E2                           812  ******** INVALID OUTPUT ********
000017E2                           813  * THIS SHOULD ALWAYS BE THE LAST DECODE BRANCH
000017E2                           814  * THAT WAY AFTER ATTEMPTING ALL ADDRESSING MODE AND FAILING
000017E2                           815  * IT WILL FALLBACK TO THIS BRANCH
000017E2                           816  INVALIDOP:                 ; when an opcode is invalid, print the address, 'data', and data in memory
000017E2  220A                     817          MOVE.L  A2,D1      ; load the current address to print
000017E4  143C 0010                818          MOVE.B  #16,D2
000017E8  103C 000F                819          MOVE.B  #15,D0
000017EC  4E4F                     820          TRAP    #15
000017EE                           821  
000017EE  43F8 01A8                822          LEA     DISDATA,A1 ; load 'DATA' string to print
000017F2  103C 000E                823          MOVE.B  #14,D0
000017F6  4E4F                     824          TRAP    #15
000017F8                           825  
000017F8  3212                     826          MOVE.W  (A2),D1    ; load data in A2 to print
000017FA  143C 0010                827          MOVE.B  #16,D2
000017FE  103C 000F                828          MOVE.B  #15,D0
00001802  4E4F                     829          TRAP    #15
00001804                           830  
00001804  43F8 00E8                831          LEA     NEWLINE,A1 ; print a new line for reading purposes
00001808  103C 000E                832          MOVE.B  #14,D0
0000180C  4E4F                     833          TRAP    #15
0000180E                           834  
0000180E  4EB9 00002876            835          JSR     CLEAR_ALL
00001814  341A                     836          MOVE.W  (A2)+,D2   ; increment the address
00001816  B5F8 0004                837          CMP.L   ENADR,A2   ; keep looping until reach the end
0000181A  6D00 F8D6                838          BLT     LOOPMEM
0000181E  6000 1066                839          BRA     DONE
00001822                           840  
00001822                           841  ******** NOT LOGIC FUNCTIONS ***********
00001822                           842  * Returns:
00001822                           843  *   D7 - EA Register
00001822                           844  *   D6 - EA Mode
00001822                           845  *   D5 - Contains size
00001822                           846  GET_NOT_LOGIC_DATA:
00001822  2602                     847          MOVE.L  D2,D3
00001824  0203 0007                848          ANDI.B  #$7,D3
00001828  1E03                     849          MOVE.B  D3,D7      ; D7 will contain the EA register
0000182A  2602                     850          MOVE.L  D2,D3
0000182C  E64B                     851          LSR.W   #3,D3
0000182E  0203 0007                852          ANDI.B  #$7,D3
00001832  1C03                     853          MOVE.B  D3,D6      ; D6 will contain 000 because its for data register
00001834  2602                     854          MOVE.L  D2,D3
00001836  EC4B                     855          LSR.W   #6,D3
00001838  0203 0007                856          ANDI.B  #$7,D3
0000183C  1A03                     857          MOVE.B  D3,D5      ; D5 will contain the size, 0 for B, 1 for word, 2 for long      
0000183E  4E75                     858          RTS
00001840                           859   
00001840                           860  ******** JSR LOGIC FUNCTIONS ***********
00001840                           861  * Returns:
00001840                           862  *   D7 - EA Register
00001840                           863  *   D6 - EA Mode     
00001840                           864  GET_JSR_LOGIC_DATA:
00001840  2602                     865          MOVE.L  D2,D3
00001842  0203 0007                866          ANDI.B  #$7,D3
00001846  1E03                     867          MOVE.B  D3,D7      ; D7 will contain the EA register
00001848  2602                     868          MOVE.L  D2,D3
0000184A  E64B                     869          LSR.W   #3,D3
0000184C  0203 0007                870          ANDI.B  #$7,D3
00001850  1C03                     871          MOVE.B  D3,D6      ; D6 will contain the EA mode
00001852  4E75                     872          RTS
00001854                           873  
00001854                           874  ******** LEA LOGIC FUNCTIONS ***********
00001854                           875  * Returns:
00001854                           876  *   D7 - EA Register
00001854                           877  *   D6 - EA Mode   
00001854                           878  *   D5 - Address Register         
00001854                           879  GET_LEA_LOGIC_DATA:
00001854  2602                     880          MOVE.L  D2,D3
00001856  0203 0007                881          ANDI.B  #$7,D3
0000185A  1E03                     882          MOVE.B  D3,D7       ; D7 will contain the EA register
0000185C  2602                     883          MOVE.L  D2,D3
0000185E  E64B                     884          LSR.W   #3,D3
00001860  0203 0007                885          ANDI.B  #$7,D3
00001864  1C03                     886          MOVE.B  D3,D6       ; D6 will contain the EA mode
00001866  2602                     887          MOVE.L  D2,D3
00001868  EA4B                     888          LSR.W   #5,D3
0000186A  E84B                     889          LSR.W   #4,D3
0000186C  0203 0007                890          ANDI.B  #$7,D3
00001870  1A03                     891          MOVE.B  D3,D5       ; D5 will contain the Address Register
00001872  2602                     892          MOVE.L  D2,D3
00001874  4E75                     893          RTS
00001876                           894          
00001876                           895  ******** AND LOGIC FUNCTIONS ***********
00001876                           896  * Returns:
00001876                           897  *   D7 - EA Register
00001876                           898  *   D6 - EA Mode   
00001876                           899  *   D5 - Opmode
00001876                           900  *   D4 - Register
00001876                           901  GET_AND_DATA:
00001876  2602                     902          MOVE.L  D2,D3
00001878  0203 0007                903          ANDI.B  #$7,D3
0000187C  1E03                     904          MOVE.B  D3,D7       ; D7 will contain the EA register
0000187E  2602                     905          MOVE.L  D2,D3
00001880  E64B                     906          LSR.W   #3,D3
00001882  0203 0007                907          ANDI.B  #$7,D3
00001886  1C03                     908          MOVE.B  D3,D6       ; D6 will contain the EA register
00001888  2602                     909          MOVE.L  D2,D3
0000188A  EC4B                     910          LSR.W   #6,D3
0000188C  0203 0007                911          ANDI.B  #$7,D3
00001890  1A03                     912          MOVE.B  D3,D5       ; D5 will contain the opmode
00001892  2602                     913          MOVE.L  D2,D3
00001894  E84B                     914          LSR.W   #4,D3
00001896  EA4B                     915          LSR.W   #5,D3
00001898  0203 0007                916          ANDI.B  #$7,D3
0000189C  1803                     917          MOVE.B  D3,D4       ; D4 will contain the register number
0000189E  2602                     918          MOVE.L  D2,D3
000018A0  4E75                     919          RTS
000018A2                           920          
000018A2                           921          
000018A2                           922  ******** ADDQ FUNCTIONS ********
000018A2                           923  * Returns:
000018A2                           924  *   D5 - contains size operation
000018A2                           925  GET_ADDQ_SIZE:
000018A2  3602                     926          MOVE.W  D2,D3
000018A4  EC4B                     927          LSR.W   #6,D3
000018A6  0243 0003                928          ANDI.W  #%11,D3    ; gets the size operation
000018AA  1A03                     929          MOVE.B  D3,D5
000018AC  3602                     930          MOVE.W  D2,D3
000018AE  4E75                     931          RTS
000018B0                           932  * Returns:
000018B0                           933  *   D6 - contains data
000018B0                           934  GET_ADDQ_DATA:
000018B0  3602                     935          MOVE.W  D2,D3
000018B2  EC4B                     936          LSR.W   #6,D3
000018B4  E64B                     937          LSR.W   #3,D3
000018B6  0243 0007                938          ANDI.W  #%111,D3   ; gets the data 
000018BA  1C03                     939          MOVE.B  D3,D6
000018BC  3602                     940          MOVE.W  D2,D3
000018BE  4E75                     941          RTS
000018C0                           942  ******** ADD FUNCTIONS ********
000018C0                           943  * Returns:
000018C0                           944  *   D7 - contains the register mode
000018C0                           945  *   D4 - contains the register number
000018C0                           946  GET_ADD_MODE_REG:
000018C0  3602                     947          MOVE.W  D2,D3
000018C2  E64B                     948          LSR.W   #3,D3
000018C4  0243 0007                949          ANDI.W  #$7,D3     ; Gets the mode
000018C8  0C43 0005                950          CMPI.W  #%101,D3
000018CC  6700 FF14                951          BEQ     INVALIDOP
000018D0  0C43 0006                952          CMPI.W  #%110,D3   ; we are not supporting this addressing modes
000018D4  6700 FF0C                953          BEQ     INVALIDOP 
000018D8  3E03                     954          MOVE.W  D3,D7
000018DA  3602                     955          MOVE.W  D2,D3
000018DC  0243 0007                956          ANDI.W  #$7,D3     ; gets the register number
000018E0  3803                     957          MOVE.W  D3,D4
000018E2  3602                     958          MOVE.W  D2,D3
000018E4  4E75                     959          RTS
000018E6                           960  * Returns:
000018E6                           961  *   D6 - contains opmode
000018E6                           962  GET_ADD_OPMODE:
000018E6  3602                     963          MOVE.W  D2,D3
000018E8  EC4B                     964          LSR.W   #6,D3
000018EA  0243 0007                965          ANDI.W  #$7,D3
000018EE  3C03                     966          MOVE.W  D3,D6
000018F0  3602                     967          MOVE.W  D2,D3
000018F2  4E75                     968          RTS
000018F4                           969  * Returns:
000018F4                           970  *   D5 - contains register
000018F4                           971  GET_ADD_REG:
000018F4  3602                     972          MOVE.W  D2,D3
000018F6  EA4B                     973          LSR.W   #5,D3
000018F8  E84B                     974          LSR.W   #4,D3
000018FA  0243 0007                975          ANDI.W  #$7,D3
000018FE  3A03                     976          MOVE.W  D3,D5
00001900  4E75                     977          RTS
00001902                           978  * Returns:
00001902                           979  *   D7 - contains ea 
00001902                           980  GET_ADD_EA:
00001902  B83C 0000                981          CMP.B   #0,D4
00001906  6700 000E                982          BEQ     ADD_WORD_ADDR
0000190A  B83C 0001                983          CMP.B   #1,D4
0000190E  6700 000E                984          BEQ     ADD_LONG_ADDR
00001912  6000 FECE                985          BRA     INVALIDOP
00001916                           986  ADD_WORD_ADDR:
00001916                           987          * Increment PC Counter
00001916  0C5A 0000                988          CMP.W   #0,(A2)+   ; instructions are word size
0000191A  3E1A                     989          MOVE.W  (A2)+,D7    ; D6 will contain the address
0000191C  4E75                     990          RTS
0000191E                           991  ADD_LONG_ADDR:
0000191E                           992          * Increment PC Counter
0000191E  0C5A 0000                993          CMP.W   #0,(A2)+   ; instructions are word size
00001922  2E1A                     994          MOVE.L  (A2)+,D7    ; D6 will contain the address
00001924  4E75                     995          RTS
00001926                           996  
00001926                           997  ******** COMMON SHIFT FUNCTIONS ********
00001926                           998  * Returns:
00001926                           999  *   D7 - Register
00001926                          1000  *   D6 - 1 or 0, determines if count or data register
00001926                          1001  *   D5 - Contains size of operation
00001926                          1002  *   D4 - Contains count or register as determined by D6
00001926                          1003  GET_REG_SHIFT_DATA:
00001926  2602                    1004          MOVE.L  D2,D3
00001928  0203 0007               1005          ANDI.B  #$7,D3     ; clear the 4th bit
0000192C  1E03                    1006          MOVE.B  D3,D7      ; D7 will contain the register
0000192E  2602                    1007          MOVE.L  D2,D3      ; reset D3
00001930  EA4B                    1008          LSR.W   #5,D3      ; test the i/r bit
00001932  0203 0001               1009          ANDI.B  #$1,D3
00001936  1C03                    1010          MOVE.B  D3,D6      ; D6 will contain if count or Dn
00001938  2602                    1011          MOVE.L  D2,D3
0000193A  EC4B                    1012          LSR.W   #6,D3
0000193C  0243 0003               1013          ANDI.W  #$3,D3
00001940  1A03                    1014          MOVE.B  D3,D5      ; D5 will contain size operation
00001942  0C05 0003               1015          CMPI.B  #%11,D5
00001946  6700 FE9A               1016          BEQ     INVALIDOP
0000194A  2602                    1017          MOVE.L  D2,D3
0000194C  EA4B                    1018          LSR.W   #5,D3
0000194E  E84B                    1019          LSR.W   #4,D3
00001950  0243 0007               1020          ANDI.W  #$7,D3
00001954  1803                    1021          MOVE.B  D3,D4      ; D4 will contain count/reg
00001956  4E75                    1022          RTS
00001958                          1023  * Returns:
00001958                          1024  *   D7 - Contains register (word or long addressing)
00001958                          1025  *   D6 - Contains the address 
00001958                          1026  GET_MEM_SHIFT_DATA:
00001958  0803 000B               1027          BTST.L  #11,D3     ; the 11th bit must always be 0 for shifts
0000195C  6600 FE84               1028          BNE     INVALIDOP
00001960  0283 00000007           1029          ANDI.L  #$7,D3
00001966  1E03                    1030          MOVE.B  D3,D7      ; D7 will have register
00001968  2602                    1031          MOVE.L  D2,D3
0000196A  4EB9 00001982           1032          JSR     IS_MEM_INDIRECT
00001970  0C38 00FF 0010          1033          CMPI.B  #$FF,IS_IN_MEM_BOOL
00001976  6700 0EE0               1034          BEQ     RETURN  
0000197A  4EB9 0000199E           1035          JSR     DETERMINE_ADDR_MODE
00001980  4E75                    1036          RTS
00001982                          1037          
00001982                          1038  IS_MEM_INDIRECT:
00001982  3602                    1039          MOVE.W  D2,D3
00001984  E64B                    1040          LSR.W   #3,D3
00001986  0243 0007               1041          ANDI.W  #%111,D3
0000198A  0C43 0007               1042          CMPI.W  #%111,D3
0000198E  6700 0EC8               1043          BEQ     RETURN
00001992  1807                    1044          MOVE.B  D7,D4
00001994  1E03                    1045          MOVE.B  D3,D7
00001996  11FC 00FF 0010          1046          MOVE.B #$FF,IS_IN_MEM_BOOL
0000199C  4E75                    1047          RTS
0000199E                          1048          
0000199E                          1049  ******** DETERMINING ADDRESS MODES ********
0000199E                          1050  * D7 should contain register.
0000199E                          1051  * 000 for Word addressing
0000199E                          1052  * 001 for Long addressing
0000199E                          1053  DETERMINE_ADDR_MODE:
0000199E  BE3C 0000               1054          CMP.B   #0,D7
000019A2  6700 000E               1055          BEQ     WORD_ADDR
000019A6  BE3C 0001               1056          CMP.B   #1,D7
000019AA  6700 000E               1057          BEQ     LONG_ADDR
000019AE  6000 FE32               1058          BRA     INVALIDOP
000019B2                          1059  WORD_ADDR:
000019B2                          1060          * Increment PC Counter
000019B2  0C5A 0000               1061          CMP.W   #0,(A2)+   ; instructions are word size
000019B6  3C1A                    1062          MOVE.W  (A2)+,D6    ; D6 will contain the address
000019B8  4E75                    1063          RTS
000019BA                          1064  LONG_ADDR:
000019BA                          1065          * Increment PC Counter
000019BA  0C5A 0000               1066          CMP.W   #0,(A2)+   ; instructions are word size
000019BE  2C1A                    1067          MOVE.L  (A2)+,D6    ; D6 will contain the address
000019C0  4E75                    1068          RTS
000019C2                          1069  ************************************        
000019C2                          1070  ******** PRINT INSTRUCTIONS ********
000019C2                          1071  ************************************
000019C2                          1072  PRINTNOP:
000019C2  4EB9 0000285A           1073          JSR     PRINT_PC
000019C8  43F8 00FC               1074          LEA     DISNOP,A1  ; display NOP string
000019CC  103C 000E               1075          MOVE.B  #14,D0     
000019D0  4E4F                    1076          TRAP    #15
000019D2  4EB9 00002822           1077          JSR     PRINTNEWLINE
000019D8  4EB9 00002876           1078          JSR     CLEAR_ALL
000019DE  341A                    1079          MOVE.W  (A2)+,D2    ; address should be incremented at the end of each print
000019E0  B5F8 0004               1080          CMP.L   ENADR,A2   ; keep looping until reach the end
000019E4  6D00 F70C               1081          BLT     LOOPMEM
000019E8  6000 0E9C               1082          BRA     DONE
000019EC                          1083  
000019EC                          1084  PRINTRTS:
000019EC  4EB9 0000285A           1085          JSR     PRINT_PC
000019F2  43F8 0100               1086          LEA     DISRTS,A1   ; display RTS string
000019F6  103C 000E               1087          MOVE.B  #14,D0
000019FA  4E4F                    1088          TRAP    #15
000019FC  4EB9 00002822           1089          JSR     PRINTNEWLINE
00001A02  4EB9 00002876           1090          JSR     CLEAR_ALL
00001A08  341A                    1091          MOVE.W  (A2)+,D2    ; address should be incremented at the end of each print
00001A0A  B5F8 0004               1092          CMP.L   ENADR,A2    ; keep looping until reach the end address
00001A0E  6D00 F6E2               1093          BLT     LOOPMEM
00001A12  6000 0E72               1094          BRA     DONE            
00001A16                          1095  
00001A16                          1096  ******** PRINT SHIFT INSTRUCTIONS ********
00001A16                          1097  ******** COMMON SHIFT FUNCS ********
00001A16                          1098  SHIFT_IN1:
00001A16  0C06 0000               1099          CMPI.B  #0,D6
00001A1A  6700 000A               1100          BEQ     PRINT_SHIFT_REG_CONT
00001A1E  4EB9 00002670           1101          JSR     PRINTDn
00001A24  4E75                    1102          RTS
00001A26                          1103  PRINT_SHIFT_REG_CONT:
00001A26  43F8 00ED               1104          LEA     DISPOUND,A1
00001A2A  103C 000E               1105          MOVE.B  #14,D0
00001A2E  4E4F                    1106          TRAP    #15
00001A30                          1107  
00001A30  4281                    1108          CLR.L   D1
00001A32  1204                    1109          MOVE.B  D4,D1
00001A34  143C 000A               1110          MOVE.B  #10,D2
00001A38  103C 000F               1111          MOVE.B  #15,D0
00001A3C  4E4F                    1112          TRAP    #15
00001A3E  4E75                    1113          RTS
00001A40                          1114  PRINT_REG_SHIFT_INFO:
00001A40  4EB9 00002632           1115          JSR     PRINTSIZEOP
00001A46  4EB8 1A16               1116          JSR     SHIFT_IN1
00001A4A  4EB9 00002816           1117          JSR     PRINTCOMMA
00001A50  1807                    1118          MOVE.B  D7,D4
00001A52  4EB9 00002670           1119          JSR     PRINTDn
00001A58  4EB9 00002822           1120          JSR     PRINTNEWLINE
00001A5E  4EB9 00002876           1121          JSR     CLEAR_ALL
00001A64  4E75                    1122          RTS
00001A66                          1123  PRINT_MEM_SHIFT_INFO:
00001A66  1A3C 0001               1124          MOVE.B  #1,D5
00001A6A  4EB9 00002632           1125          JSR     PRINTSIZEOP
00001A70                          1126  
00001A70  4EB9 00001A96           1127          JSR     PRINT_IS_MEM_IN
00001A76  4EB9 0000282E           1128          JSR     PRINTDOLLAR
00001A7C  2206                    1129          MOVE.L  D6,D1
00001A7E  143C 0010               1130          MOVE.B  #16,D2
00001A82  103C 000F               1131          MOVE.B  #15,D0
00001A86  4E4F                    1132          TRAP    #15
00001A88                          1133  
00001A88  4EB9 00002822           1134          JSR     PRINTNEWLINE
00001A8E  4EB9 00002876           1135          JSR     CLEAR_ALL
00001A94  4E75                    1136          RTS
00001A96                          1137          
00001A96                          1138  PRINT_IS_MEM_IN:
00001A96  0C38 00FF 0010          1139          CMPI.B  #$FF,IS_IN_MEM_BOOL
00001A9C  6600 0DBA               1140          BNE     RETURN
00001AA0  11FC 0000 0010          1141          MOVE.B  #0,IS_IN_MEM_BOOL
00001AA6  4EB9 00002530           1142          JSR     PRINT_ADDA_INDIRECT_TYPE
00001AAC  4EB9 00002822           1143          JSR     PRINTNEWLINE
00001AB2  341A                    1144          MOVE.W  (A2)+,D2    ; address should be incremented at the end of each print
00001AB4  B5F8 0004               1145          CMP.L   ENADR,A2   ; keep looping until reach the end
00001AB8  6D00 F638               1146          BLT     LOOPMEM
00001ABC  6000 0DC8               1147          BRA     DONE
00001AC0                          1148  ************************************        
00001AC0                          1149  ******** PRINT LOGIC INSTRUCTIONS ********
00001AC0                          1150  ************************************
00001AC0                          1151  ; PRINT NOT EA:
00001AC0                          1152  PRINTNOT:
00001AC0  BC3C 0000               1153          CMP.B   #0,D6
00001AC4  6700 0026               1154          BEQ     PRINTNOT_REG
00001AC8  BC3C 0002               1155          CMP.B   #2,D6
00001ACC  6700 0040               1156          BEQ     PRINTNOT_INAn
00001AD0  BC3C 0003               1157          CMP.B   #3,D6
00001AD4  6700 005A               1158          BEQ     PRINTNOT_POS_INAn
00001AD8  BC3C 0004               1159          CMP.B   #4,D6
00001ADC  6700 007A               1160          BEQ     PRINTNOT_PRE_INAn
00001AE0  BC3C 0007               1161          CMP.B   #7,D6
00001AE4  6700 009A               1162          BEQ     PRINTNOT_ABS_ADR
00001AE8  6000 FCF8               1163          BRA     INVALIDOP
00001AEC                          1164  
00001AEC                          1165  PRINTNOT_REG:
00001AEC  4EB9 0000285A           1166          JSR     PRINT_PC
00001AF2  43F8 0104               1167          LEA     DISNOT,A1   ; display NOT string
00001AF6  103C 000E               1168          MOVE.B  #14,D0
00001AFA  4E4F                    1169          TRAP    #15
00001AFC  4EB9 00002632           1170          JSR     PRINTSIZEOP
00001B02  1807                    1171          MOVE.B  D7,D4
00001B04  4EB9 00002670           1172          JSR     PRINTDn                 ; print the data register
00001B0A  6000 0588               1173          BRA     CLOSING
00001B0E                          1174          
00001B0E                          1175  PRINTNOT_INAn:
00001B0E  4EB9 0000285A           1176          JSR     PRINT_PC
00001B14  43F8 0104               1177          LEA     DISNOT,A1
00001B18  103C 000E               1178          MOVE.B  #14,D0
00001B1C  4E4F                    1179          TRAP    #15
00001B1E  4EB9 00002632           1180          JSR     PRINTSIZEOP
00001B24  1807                    1181          MOVE.B  D7,D4
00001B26  4EB9 000027B0           1182          JSR     PRINT_An_IN
00001B2C  6000 0566               1183          BRA     CLOSING
00001B30                          1184          
00001B30                          1185  PRINTNOT_POS_INAn:
00001B30  4EB9 0000285A           1186          JSR     PRINT_PC
00001B36  43F8 0104               1187          LEA     DISNOT,A1
00001B3A  103C 000E               1188          MOVE.B  #14,D0
00001B3E  4E4F                    1189          TRAP    #15
00001B40  4EB9 00002632           1190          JSR     PRINTSIZEOP
00001B46  1807                    1191          MOVE.B  D7,D4
00001B48  4EB9 000027B0           1192          JSR     PRINT_An_IN
00001B4E  4EB9 000027FE           1193          JSR     PRINTPLUS
00001B54  6000 053E               1194          BRA     CLOSING
00001B58                          1195  
00001B58                          1196  PRINTNOT_PRE_INAn:
00001B58  4EB9 0000285A           1197          JSR     PRINT_PC
00001B5E  43F8 0104               1198          LEA     DISNOT,A1
00001B62  103C 000E               1199          MOVE.B  #14,D0
00001B66  4E4F                    1200          TRAP    #15
00001B68  4EB9 00002632           1201          JSR     PRINTSIZEOP
00001B6E  4EB9 0000280A           1202          JSR     PRINTMINUS
00001B74  1807                    1203          MOVE.B  D7,D4
00001B76  4EB9 000027B0           1204          JSR     PRINT_An_IN
00001B7C  6000 0516               1205          BRA     CLOSING
00001B80                          1206          
00001B80                          1207  PRINTNOT_ABS_ADR:
00001B80  4EB9 0000285A           1208          JSR     PRINT_PC
00001B86  43F8 0104               1209          LEA     DISNOT,A1
00001B8A  103C 000E               1210          MOVE.B  #14,D0
00001B8E  4E4F                    1211          TRAP    #15
00001B90  4EB9 00002632           1212          JSR     PRINTSIZEOP
00001B96  4EB8 199E               1213          JSR     DETERMINE_ADDR_MODE
00001B9A  4EB9 0000282E           1214          JSR     PRINTDOLLAR
00001BA0  2206                    1215          MOVE.L  D6,D1
00001BA2  143C 0010               1216          MOVE.B  #16,D2
00001BA6  103C 000F               1217          MOVE.B  #15,D0
00001BAA  4E4F                    1218          TRAP    #15
00001BAC  4EB9 00002822           1219          JSR     PRINTNEWLINE
00001BB2  4EB9 00002876           1220          JSR     CLEAR_ALL
00001BB8  B5F8 0004               1221          CMP.L   ENADR,A2
00001BBC  6D00 F534               1222          BLT     LOOPMEM
00001BC0  6000 0CC4               1223          BRA     DONE
00001BC4                          1224        
00001BC4                          1225  ; PRINT JSR EA  
00001BC4                          1226  PRINTJSR_ADR:
00001BC4  4EB9 0000285A           1227          JSR     PRINT_PC
00001BCA  43F8 0108               1228          LEA     DISJSR,A1
00001BCE  103C 000E               1229          MOVE.B  #14,D0
00001BD2  4E4F                    1230          TRAP    #15
00001BD4  1807                    1231          MOVE.B  D7,D4
00001BD6  4EB9 000027B0           1232          JSR     PRINT_An_IN             ; Print the indirect address
00001BDC  6000 04B6               1233          BRA     CLOSING
00001BE0                          1234          
00001BE0                          1235  PRINTJSR_ABS_ADR:
00001BE0  4EB9 0000285A           1236          JSR     PRINT_PC
00001BE6  43F8 0108               1237          LEA     DISJSR,A1
00001BEA  103C 000E               1238          MOVE.B  #14,D0
00001BEE  4E4F                    1239          TRAP    #15
00001BF0  4EB8 199E               1240          JSR     DETERMINE_ADDR_MODE
00001BF4  4EB9 0000282E           1241          JSR     PRINTDOLLAR             ; Print the absolute address
00001BFA  2206                    1242          MOVE.L  D6,D1
00001BFC  143C 0010               1243          MOVE.B  #16,D2
00001C00  103C 000F               1244          MOVE.B  #15,D0
00001C04  4E4F                    1245          TRAP    #15
00001C06  4EB9 00002822           1246          JSR     PRINTNEWLINE
00001C0C  4EB9 00002876           1247          JSR     CLEAR_ALL
00001C12  B5F8 0004               1248          CMP.L   ENADR,A2
00001C16  6D00 F4DA               1249          BLT     LOOPMEM
00001C1A  6000 0C6A               1250          BRA     DONE
00001C1E                          1251          
00001C1E                          1252  ; PRINT LEA EA     
00001C1E                          1253  PRINTLEA_ADR:
00001C1E  4EB9 0000285A           1254          JSR     PRINT_PC
00001C24  43F8 010E               1255          LEA     DISLEA,A1
00001C28  103C 000E               1256          MOVE.B  #14,D0
00001C2C  4E4F                    1257          TRAP    #15
00001C2E  1807                    1258          MOVE.B  D7,D4
00001C30  4EB9 000027B0           1259          JSR     PRINT_An_IN             ; Print indirect address of the LEA EA
00001C36  4EB9 00002816           1260          JSR     PRINTCOMMA
00001C3C  1805                    1261          MOVE.B  D5,D4
00001C3E  4EB9 00002710           1262          JSR     PRINTAn                 ;  Print the address register of the LEA destination
00001C44  6000 044E               1263          BRA     CLOSING
00001C48                          1264          
00001C48                          1265  PRINTLEA_ABS_ADR:
00001C48  4EB9 0000285A           1266          JSR     PRINT_PC
00001C4E  43F8 010E               1267          LEA     DISLEA,A1
00001C52  103C 000E               1268          MOVE.B  #14,D0
00001C56  4E4F                    1269          TRAP    #15
00001C58  4EB8 199E               1270          JSR     DETERMINE_ADDR_MODE     ; Determine is it is a word or long absolute addressing
00001C5C  4EB9 0000282E           1271          JSR     PRINTDOLLAR             ; print absolute address
00001C62  2206                    1272          MOVE.L  D6,D1
00001C64  143C 0010               1273          MOVE.B  #16,D2
00001C68  103C 000F               1274          MOVE.B  #15,D0
00001C6C  4E4F                    1275          TRAP    #15
00001C6E  4EB9 00002816           1276          JSR     PRINTCOMMA
00001C74  1805                    1277          MOVE.B  D5,D4
00001C76  4EB9 00002710           1278          JSR     PRINTAn                 ; print destination address register
00001C7C  4EB9 00002822           1279          JSR     PRINTNEWLINE
00001C82  4EB9 00002876           1280          JSR     CLEAR_ALL
00001C88  B5F8 0004               1281          CMP.L   ENADR,A2
00001C8C  6D00 F464               1282          BLT     LOOPMEM
00001C90  6000 0BF4               1283          BRA     DONE
00001C94                          1284          
00001C94                          1285  ************************************        
00001C94                          1286  ******** PRINT AND INSTRUCTIONS ********
00001C94                          1287  ************************************       
00001C94                          1288  PRINT_AND_DATA:
00001C94  0805 0002               1289          BTST.L  #2,D5           ; determine opmode, start with 0 = <ea>, Dn; 1 = Dn, <ea>
00001C98  6700 0006               1290          BEQ     PRINT_AND_EA_Dn
00001C9C  6000 0102               1291          BRA     PRINT_AND_Dn_EA
00001CA0                          1292          
00001CA0                          1293  PRINT_AND_EA_Dn:
00001CA0  BC3C 0000               1294          CMP.B   #0,D6
00001CA4  6700 0026               1295          BEQ     PRINT_AND_Dn_Dn
00001CA8  BC3C 0002               1296          CMP.B   #2,D6
00001CAC  6700 0040               1297          BEQ     PRINT_AND_INAn_Dn
00001CB0  BC3C 0003               1298          CMP.B   #3,D6
00001CB4  6700 005A               1299          BEQ     PRINT_AND_POS_INAn_Dn
00001CB8  BC3C 0004               1300          CMP.B   #4,D6
00001CBC  6700 007A               1301          BEQ     PRINT_AND_PRE_INAn_Dn
00001CC0  BC3C 0007               1302          CMP.B   #7,D6
00001CC4  6700 009A               1303          BEQ     PRINT_AND_ABS_ADR_Dn
00001CC8  6000 FB18               1304          BRA     INVALIDOP
00001CCC                          1305          
00001CCC                          1306          
00001CCC                          1307  PRINT_AND_Dn_Dn:
00001CCC  4EB9 00001E6A           1308          JSR     PRINT_AND_OPENING
00001CD2  1604                    1309          MOVE.B  D4,D3       ; Temp. put the register to D3
00001CD4  1807                    1310          MOVE.B  D7,D4
00001CD6  4EB9 00002670           1311          JSR     PRINTDn
00001CDC  4EB9 00002816           1312          JSR     PRINTCOMMA
00001CE2  1803                    1313          MOVE.B  D3,D4
00001CE4  4EB9 00002670           1314          JSR     PRINTDn
00001CEA  6000 03A8               1315          BRA     CLOSING
00001CEE                          1316          
00001CEE                          1317  PRINT_AND_INAn_Dn:
00001CEE  4EB9 00001E6A           1318          JSR     PRINT_AND_OPENING
00001CF4  1604                    1319          MOVE.B  D4,D3
00001CF6  1807                    1320          MOVE.B  D7,D4
00001CF8  4EB9 000027B0           1321          JSR     PRINT_An_IN
00001CFE  4EB9 00002816           1322          JSR     PRINTCOMMA
00001D04  1803                    1323          MOVE.B  D3,D4
00001D06  4EB9 00002670           1324          JSR     PRINTDn
00001D0C  6000 0386               1325          BRA     CLOSING
00001D10                          1326          
00001D10                          1327  PRINT_AND_POS_INAn_Dn:
00001D10  4EB9 00001E6A           1328          JSR     PRINT_AND_OPENING
00001D16  1604                    1329          MOVE.B  D4,D3
00001D18  1807                    1330          MOVE.B  D7,D4
00001D1A  4EB9 000027B0           1331          JSR     PRINT_An_IN
00001D20  4EB9 000027FE           1332          JSR     PRINTPLUS
00001D26  4EB9 00002816           1333          JSR     PRINTCOMMA
00001D2C  1803                    1334          MOVE.B  D3,D4
00001D2E  4EB9 00002670           1335          JSR     PRINTDn
00001D34  6000 035E               1336          BRA     CLOSING
00001D38                          1337          
00001D38                          1338  PRINT_AND_PRE_INAn_Dn:
00001D38  4EB9 00001E6A           1339          JSR     PRINT_AND_OPENING
00001D3E  1604                    1340          MOVE.B  D4,D3
00001D40  1807                    1341          MOVE.B  D7,D4
00001D42  4EB9 0000280A           1342          JSR     PRINTMINUS
00001D48  4EB9 000027B0           1343          JSR     PRINT_An_IN
00001D4E  4EB9 00002816           1344          JSR     PRINTCOMMA
00001D54  1803                    1345          MOVE.B  D3,D4
00001D56  4EB9 00002670           1346          JSR     PRINTDn
00001D5C  6000 0336               1347          BRA     CLOSING
00001D60                          1348          
00001D60                          1349  PRINT_AND_ABS_ADR_Dn:
00001D60  4EB9 00001E6A           1350          JSR     PRINT_AND_OPENING
00001D66  4EB8 199E               1351          JSR     DETERMINE_ADDR_MODE
00001D6A  4EB9 00002078           1352          JSR     DOLLAR_OR_HASHTAG
00001D70  2206                    1353          MOVE.L  D6,D1
00001D72  143C 0010               1354          MOVE.B  #16,D2
00001D76  103C 000F               1355          MOVE.B  #15,D0
00001D7A  4E4F                    1356          TRAP    #15
00001D7C  4EB9 00002816           1357          JSR     PRINTCOMMA
00001D82  4EB9 00002670           1358          JSR     PRINTDn
00001D88  4EB9 00002822           1359          JSR     PRINTNEWLINE
00001D8E  4EB9 00002876           1360          JSR     CLEAR_ALL
00001D94  B5F8 0004               1361          CMP.L   ENADR,A2
00001D98  6D00 F358               1362          BLT     LOOPMEM
00001D9C  6000 0AE8               1363          BRA     DONE 
00001DA0                          1364       
00001DA0                          1365  PRINT_AND_Dn_EA:
00001DA0  BC3C 0002               1366          CMP.B   #2,D6
00001DA4  6700 001E               1367          BEQ     PRINT_AND_Dn_INAn
00001DA8  BC3C 0003               1368          CMP.B   #3,D6
00001DAC  6700 0034               1369          BEQ     PRINT_AND_Dn_POS_INAn
00001DB0  BC3C 0004               1370          CMP.B   #4,D6
00001DB4  6700 0050               1371          BEQ     PRINT_AND_Dn_PRE_INAn
00001DB8  BC3C 0007               1372          CMP.B   #7,D6
00001DBC  6700 006C               1373          BEQ     PRINT_AND_Dn_ABS_ADR
00001DC0  6000 FA20               1374          BRA     INVALIDOP
00001DC4                          1375          
00001DC4                          1376  PRINT_AND_Dn_INAn:
00001DC4  4EB9 00001E6A           1377          JSR     PRINT_AND_OPENING
00001DCA  4EB9 00002670           1378          JSR     PRINTDn
00001DD0  4EB9 00002816           1379          JSR     PRINTCOMMA
00001DD6  1807                    1380          MOVE.B  D7,D4
00001DD8  4EB9 000027B0           1381          JSR     PRINT_An_IN
00001DDE  6000 02B4               1382          BRA     CLOSING
00001DE2                          1383          
00001DE2                          1384  PRINT_AND_Dn_POS_INAn:
00001DE2  4EB9 00001E6A           1385          JSR     PRINT_AND_OPENING
00001DE8  4EB9 00002670           1386          JSR     PRINTDn
00001DEE  4EB9 00002816           1387          JSR     PRINTCOMMA
00001DF4  1807                    1388          MOVE.B  D7,D4
00001DF6  4EB9 000027B0           1389          JSR     PRINT_An_IN
00001DFC  4EB9 000027FE           1390          JSR     PRINTPLUS
00001E02  6000 0290               1391          BRA     CLOSING
00001E06                          1392  
00001E06                          1393  PRINT_AND_Dn_PRE_INAn:
00001E06  4EB9 00001E6A           1394          JSR     PRINT_AND_OPENING
00001E0C  4EB9 00002670           1395          JSR     PRINTDn
00001E12  4EB9 00002816           1396          JSR     PRINTCOMMA
00001E18  1807                    1397          MOVE.B  D7,D4
00001E1A  4EB9 0000280A           1398          JSR     PRINTMINUS
00001E20  4EB9 000027B0           1399          JSR     PRINT_An_IN
00001E26  6000 026C               1400          BRA     CLOSING
00001E2A                          1401          
00001E2A                          1402  PRINT_AND_Dn_ABS_ADR:
00001E2A  4EB9 00001E6A           1403          JSR     PRINT_AND_OPENING
00001E30  4EB9 00002670           1404          JSR     PRINTDn
00001E36  4EB9 00002816           1405          JSR     PRINTCOMMA
00001E3C  4EB8 199E               1406          JSR     DETERMINE_ADDR_MODE
00001E40  4EB9 0000282E           1407          JSR     PRINTDOLLAR
00001E46  2206                    1408          MOVE.L  D6,D1
00001E48  143C 0010               1409          MOVE.B  #16,D2
00001E4C  103C 000F               1410          MOVE.B  #15,D0
00001E50  4E4F                    1411          TRAP    #15
00001E52  4EB9 00002822           1412          JSR     PRINTNEWLINE
00001E58  4EB9 00002876           1413          JSR     CLEAR_ALL
00001E5E  B5F8 0004               1414          CMP.L   ENADR,A2
00001E62  6D00 F28E               1415          BLT     LOOPMEM
00001E66  6000 0A1E               1416          BRA     DONE 
00001E6A                          1417        
00001E6A                          1418  PRINT_AND_OPENING:
00001E6A  4EB9 0000285A           1419          JSR     PRINT_PC
00001E70  43F8 0114               1420          LEA     DISAND,A1
00001E74  103C 000E               1421          MOVE.B  #14,D0
00001E78  4E4F                    1422          TRAP    #15
00001E7A  0205 0003               1423          ANDI.B  #$3,D5
00001E7E  4EB9 00002632           1424          JSR     PRINTSIZEOP
00001E84  4E75                    1425          RTS
00001E86                          1426          
00001E86                          1427  ************************************        
00001E86                          1428  ******** PRINT OR INSTRUCTIONS ********
00001E86                          1429  ************************************       
00001E86                          1430  PRINT_OR_DATA:
00001E86  0805 0002               1431          BTST.L  #2,D5           ; determine opmode, start with 0 = <ea>, Dn; 1 = Dn, <ea>
00001E8A  6700 0006               1432          BEQ     PRINT_OR_EA_Dn
00001E8E  6000 0102               1433          BRA     PRINT_OR_Dn_EA
00001E92                          1434          
00001E92                          1435  PRINT_OR_EA_Dn:
00001E92  BC3C 0000               1436          CMP.B   #0,D6
00001E96  6700 0026               1437          BEQ     PRINT_OR_Dn_Dn
00001E9A  BC3C 0002               1438          CMP.B   #2,D6
00001E9E  6700 0040               1439          BEQ     PRINT_OR_INAn_Dn
00001EA2  BC3C 0003               1440          CMP.B   #3,D6
00001EA6  6700 005A               1441          BEQ     PRINT_OR_POS_INAn_Dn
00001EAA  BC3C 0004               1442          CMP.B   #4,D6
00001EAE  6700 007A               1443          BEQ     PRINT_OR_PRE_INAn_Dn
00001EB2  BC3C 0007               1444          CMP.B   #7,D6
00001EB6  6700 009A               1445          BEQ     PRINT_OR_ABS_ADR_Dn
00001EBA  6000 F926               1446          BRA     INVALIDOP
00001EBE                          1447          
00001EBE                          1448          
00001EBE                          1449  PRINT_OR_Dn_Dn:
00001EBE  4EB9 0000205C           1450          JSR     PRINT_OR_OPENING
00001EC4  1604                    1451          MOVE.B  D4,D3       ; Temp. put the register to D3
00001EC6  1807                    1452          MOVE.B  D7,D4
00001EC8  4EB9 00002670           1453          JSR     PRINTDn
00001ECE  4EB9 00002816           1454          JSR     PRINTCOMMA
00001ED4  1803                    1455          MOVE.B  D3,D4
00001ED6  4EB9 00002670           1456          JSR     PRINTDn
00001EDC  6000 01B6               1457          BRA     CLOSING
00001EE0                          1458          
00001EE0                          1459  PRINT_OR_INAn_Dn:
00001EE0  4EB9 0000205C           1460          JSR     PRINT_OR_OPENING
00001EE6  1604                    1461          MOVE.B  D4,D3
00001EE8  1807                    1462          MOVE.B  D7,D4
00001EEA  4EB9 000027B0           1463          JSR     PRINT_An_IN
00001EF0  4EB9 00002816           1464          JSR     PRINTCOMMA
00001EF6  1803                    1465          MOVE.B  D3,D4
00001EF8  4EB9 00002670           1466          JSR     PRINTDn
00001EFE  6000 0194               1467          BRA     CLOSING
00001F02                          1468          
00001F02                          1469  PRINT_OR_POS_INAn_Dn:
00001F02  4EB9 0000205C           1470          JSR     PRINT_OR_OPENING
00001F08  1604                    1471          MOVE.B  D4,D3
00001F0A  1807                    1472          MOVE.B  D7,D4
00001F0C  4EB9 000027B0           1473          JSR     PRINT_An_IN
00001F12  4EB9 000027FE           1474          JSR     PRINTPLUS
00001F18  4EB9 00002816           1475          JSR     PRINTCOMMA
00001F1E  1803                    1476          MOVE.B  D3,D4
00001F20  4EB9 00002670           1477          JSR     PRINTDn
00001F26  6000 016C               1478          BRA     CLOSING
00001F2A                          1479          
00001F2A                          1480  PRINT_OR_PRE_INAn_Dn:
00001F2A  4EB9 0000205C           1481          JSR     PRINT_OR_OPENING
00001F30  1604                    1482          MOVE.B  D4,D3
00001F32  1807                    1483          MOVE.B  D7,D4
00001F34  4EB9 0000280A           1484          JSR     PRINTMINUS
00001F3A  4EB9 000027B0           1485          JSR     PRINT_An_IN
00001F40  4EB9 00002816           1486          JSR     PRINTCOMMA
00001F46  1803                    1487          MOVE.B  D3,D4
00001F48  4EB9 00002670           1488          JSR     PRINTDn
00001F4E  6000 0144               1489          BRA     CLOSING
00001F52                          1490          
00001F52                          1491  PRINT_OR_ABS_ADR_Dn:
00001F52  4EB9 0000205C           1492          JSR     PRINT_OR_OPENING
00001F58  4EB8 199E               1493          JSR     DETERMINE_ADDR_MODE
00001F5C  4EB9 00002078           1494          JSR     DOLLAR_OR_HASHTAG
00001F62  2206                    1495          MOVE.L  D6,D1
00001F64  143C 0010               1496          MOVE.B  #16,D2
00001F68  103C 000F               1497          MOVE.B  #15,D0
00001F6C  4E4F                    1498          TRAP    #15
00001F6E  4EB9 00002816           1499          JSR     PRINTCOMMA
00001F74  4EB9 00002670           1500          JSR     PRINTDn
00001F7A  4EB9 00002822           1501          JSR     PRINTNEWLINE
00001F80  4EB9 00002876           1502          JSR     CLEAR_ALL
00001F86  B5F8 0004               1503          CMP.L   ENADR,A2
00001F8A  6D00 F166               1504          BLT     LOOPMEM
00001F8E  6000 08F6               1505          BRA     DONE 
00001F92                          1506       
00001F92                          1507  PRINT_OR_Dn_EA:
00001F92  BC3C 0002               1508          CMP.B   #2,D6
00001F96  6700 001E               1509          BEQ     PRINT_OR_Dn_INAn
00001F9A  BC3C 0003               1510          CMP.B   #3,D6
00001F9E  6700 0034               1511          BEQ     PRINT_OR_Dn_POS_INAn
00001FA2  BC3C 0004               1512          CMP.B   #4,D6
00001FA6  6700 0050               1513          BEQ     PRINT_OR_Dn_PRE_INAn
00001FAA  BC3C 0007               1514          CMP.B   #7,D6
00001FAE  6700 006C               1515          BEQ     PRINT_OR_Dn_ABS_ADR
00001FB2  6000 F82E               1516          BRA     INVALIDOP
00001FB6                          1517          
00001FB6                          1518  PRINT_OR_Dn_INAn:
00001FB6  4EB9 0000205C           1519          JSR     PRINT_OR_OPENING
00001FBC  4EB9 00002670           1520          JSR     PRINTDn
00001FC2  4EB9 00002816           1521          JSR     PRINTCOMMA
00001FC8  1807                    1522          MOVE.B  D7,D4
00001FCA  4EB9 000027B0           1523          JSR     PRINT_An_IN
00001FD0  6000 00C2               1524          BRA     CLOSING
00001FD4                          1525          
00001FD4                          1526  PRINT_OR_Dn_POS_INAn:
00001FD4  4EB9 0000205C           1527          JSR     PRINT_OR_OPENING
00001FDA  4EB9 00002670           1528          JSR     PRINTDn
00001FE0  4EB9 00002816           1529          JSR     PRINTCOMMA
00001FE6  1807                    1530          MOVE.B  D7,D4
00001FE8  4EB9 000027B0           1531          JSR     PRINT_An_IN
00001FEE  4EB9 000027FE           1532          JSR     PRINTPLUS
00001FF4  6000 009E               1533          BRA     CLOSING
00001FF8                          1534  
00001FF8                          1535  PRINT_OR_Dn_PRE_INAn:
00001FF8  4EB9 0000205C           1536          JSR     PRINT_OR_OPENING
00001FFE  4EB9 00002670           1537          JSR     PRINTDn
00002004  4EB9 00002816           1538          JSR     PRINTCOMMA
0000200A  1807                    1539          MOVE.B  D7,D4
0000200C  4EB9 0000280A           1540          JSR     PRINTMINUS
00002012  4EB9 000027B0           1541          JSR     PRINT_An_IN
00002018  6000 007A               1542          BRA     CLOSING
0000201C                          1543          
0000201C                          1544  PRINT_OR_Dn_ABS_ADR:
0000201C  4EB9 0000205C           1545          JSR     PRINT_OR_OPENING
00002022  4EB9 00002670           1546          JSR     PRINTDn
00002028  4EB9 00002816           1547          JSR     PRINTCOMMA
0000202E  4EB8 199E               1548          JSR     DETERMINE_ADDR_MODE
00002032  4EB9 0000282E           1549          JSR     PRINTDOLLAR
00002038  2206                    1550          MOVE.L  D6,D1
0000203A  143C 0010               1551          MOVE.B  #16,D2
0000203E  103C 000F               1552          MOVE.B  #15,D0
00002042  4E4F                    1553          TRAP    #15
00002044  4EB9 00002822           1554          JSR     PRINTNEWLINE
0000204A  4EB9 00002876           1555          JSR     CLEAR_ALL
00002050  B5F8 0004               1556          CMP.L   ENADR,A2
00002054  6D00 F09C               1557          BLT     LOOPMEM
00002058  6000 082C               1558          BRA     DONE 
0000205C                          1559        
0000205C                          1560  PRINT_OR_OPENING:
0000205C  4EB9 0000285A           1561          JSR     PRINT_PC
00002062  43F8 0118               1562          LEA     DISOR,A1
00002066  103C 000E               1563          MOVE.B  #14,D0
0000206A  4E4F                    1564          TRAP    #15
0000206C  0205 0003               1565          ANDI.B  #$3,D5
00002070  4EB9 00002632           1566          JSR     PRINTSIZEOP
00002076  4E75                    1567          RTS
00002078                          1568  
00002078                          1569          
00002078                          1570  DOLLAR_OR_HASHTAG:
00002078  BE3C 0004               1571          CMP.B   #4,D7
0000207C  6700 0006               1572          BEQ     HASHTAG
00002080  6000 000A               1573          BRA     DOLLAR
00002084                          1574          
00002084                          1575  HASHTAG:
00002084  4EB9 000027DA           1576          JSR     PRINTPOUND
0000208A  4E75                    1577          RTS
0000208C                          1578          
0000208C                          1579  DOLLAR:
0000208C  4EB9 0000282E           1580          JSR     PRINTDOLLAR
00002092  4E75                    1581          RTS
00002094                          1582    
00002094                          1583  CLOSING:
00002094  4EB9 00002822           1584          JSR     PRINTNEWLINE
0000209A  4EB9 00002876           1585          JSR     CLEAR_ALL
000020A0  341A                    1586          MOVE.W  (A2)+,D2
000020A2  B5F8 0004               1587          CMP.L   ENADR,A2
000020A6  6D00 F04A               1588          BLT     LOOPMEM
000020AA  6000 07DA               1589          BRA     DONE 
000020AE                          1590  
000020AE                          1591  ******** PRINT REGISTER SHIFTS ********
000020AE                          1592  ******** PRINT LOGIC REGISTER SHIFTS ********
000020AE                          1593  PRINTLSL_REG:
000020AE                          1594          * D7: register, D6: is Count/Dn
000020AE                          1595          * D5: Size Op,  D4: Count/Dn
000020AE  4EB9 0000285A           1596          JSR     PRINT_PC
000020B4  43F8 011B               1597          LEA     DISLSL,A1
000020B8  103C 000E               1598          MOVE.B  #14,D0
000020BC  4E4F                    1599          TRAP    #15
000020BE                          1600  
000020BE  4EB8 1A40               1601          JSR     PRINT_REG_SHIFT_INFO
000020C2  341A                    1602          MOVE.W  (A2)+,D2    ; address should be incremented at the end of each print
000020C4  B5F8 0004               1603          CMP.L   ENADR,A2   ; keep looping until reach the end
000020C8  6D00 F028               1604          BLT     LOOPMEM
000020CC  6000 07B8               1605          BRA     DONE
000020D0                          1606  PRINTLSR_REG:
000020D0                          1607          * D7: register, D6: is Count/Dn
000020D0                          1608          * D5: Size Op,  D4: Count/Dn
000020D0  4EB9 0000285A           1609          JSR     PRINT_PC
000020D6  43F8 011F               1610          LEA     DISLSR,A1
000020DA  103C 000E               1611          MOVE.B  #14,D0
000020DE  4E4F                    1612          TRAP    #15
000020E0                          1613  
000020E0  4EB8 1A40               1614          JSR     PRINT_REG_SHIFT_INFO
000020E4  341A                    1615          MOVE.W  (A2)+,D2    ; address should be incremented at the end of each print
000020E6  B5F8 0004               1616          CMP.L   ENADR,A2   ; keep looping until reach the end
000020EA  6D00 F006               1617          BLT     LOOPMEM
000020EE  6000 0796               1618          BRA     DONE
000020F2                          1619  ******** PRINT ARITHMETIC REGISTER SHIFTS ********
000020F2                          1620  PRINTASL_REG:
000020F2                          1621          * D7: register, D6: is Count/Dn
000020F2                          1622          * D5: Size Op,  D4: Count/Dn
000020F2  4EB9 0000285A           1623          JSR     PRINT_PC
000020F8  43F8 0123               1624          LEA     DISASL,A1
000020FC  103C 000E               1625          MOVE.B  #14,D0
00002100  4E4F                    1626          TRAP    #15
00002102                          1627  
00002102  4EB8 1A40               1628          JSR     PRINT_REG_SHIFT_INFO
00002106  341A                    1629          MOVE.W  (A2)+,D2    ; address should be incremented at the end of each print
00002108  B5F8 0004               1630          CMP.L   ENADR,A2   ; keep looping until reach the end
0000210C  6D00 EFE4               1631          BLT     LOOPMEM
00002110  6000 0774               1632          BRA     DONE
00002114                          1633  PRINTASR_REG:
00002114                          1634          * D7: register, D6: is Count/Dn
00002114                          1635          * D5: Size Op,  D4: Count/Dn
00002114  4EB9 0000285A           1636          JSR     PRINT_PC
0000211A  43F8 0127               1637          LEA     DISASR,A1
0000211E  103C 000E               1638          MOVE.B  #14,D0
00002122  4E4F                    1639          TRAP    #15
00002124                          1640  
00002124  4EB8 1A40               1641          JSR     PRINT_REG_SHIFT_INFO
00002128  341A                    1642          MOVE.W  (A2)+,D2    ; address should be incremented at the end of each print
0000212A  B5F8 0004               1643          CMP.L   ENADR,A2   ; keep looping until reach the end
0000212E  6D00 EFC2               1644          BLT     LOOPMEM
00002132  6000 0752               1645          BRA     DONE
00002136                          1646  ******** PRINT ROTATATE SHIFTS ********
00002136                          1647  PRINTROL_REG:
00002136                          1648          * D7: register, D6: is Count/Dn
00002136                          1649          * D5: Size Op,  D4: Count/Dn
00002136  4EB9 0000285A           1650          JSR     PRINT_PC
0000213C  43F8 012B               1651          LEA     DISROL,A1
00002140  103C 000E               1652          MOVE.B  #14,D0
00002144  4E4F                    1653          TRAP    #15
00002146                          1654  
00002146  4EB8 1A40               1655          JSR     PRINT_REG_SHIFT_INFO
0000214A  341A                    1656          MOVE.W  (A2)+,D2    ; address should be incremented at the end of each print
0000214C  B5F8 0004               1657          CMP.L   ENADR,A2   ; keep looping until reach the end
00002150  6D00 EFA0               1658          BLT     LOOPMEM
00002154  6000 0730               1659          BRA     DONE
00002158                          1660  PRINTROR_REG:
00002158                          1661          * D7: register, D6: is Count/Dn
00002158                          1662          * D5: Size Op,  D4: Count/Dn
00002158  4EB9 0000285A           1663          JSR     PRINT_PC
0000215E  43F8 012F               1664          LEA     DISROR,A1
00002162  103C 000E               1665          MOVE.B  #14,D0
00002166  4E4F                    1666          TRAP    #15
00002168                          1667  
00002168  4EB8 1A40               1668          JSR     PRINT_REG_SHIFT_INFO
0000216C  341A                    1669          MOVE.W  (A2)+,D2    ; address should be incremented at the end of each print
0000216E  B5F8 0004               1670          CMP.L   ENADR,A2   ; keep looping until reach the end
00002172  6D00 EF7E               1671          BLT     LOOPMEM
00002176  6000 070E               1672          BRA     DONE
0000217A                          1673  ******** PRINT MEMORY SHIFTS ********
0000217A                          1674  ******** PRINT LOGIC MEMORY SHIFTS ********
0000217A                          1675  PRINTLSL_MEM:
0000217A                          1676          * D6 contains the EA
0000217A  4EB9 0000285A           1677          JSR     PRINT_PC
00002180  43F8 011B               1678          LEA     DISLSL,A1
00002184  103C 000E               1679          MOVE.B  #14,D0
00002188  4E4F                    1680          TRAP    #15
0000218A                          1681  
0000218A  4EB8 1A66               1682          JSR     PRINT_MEM_SHIFT_INFO
0000218E  B5F8 0004               1683          CMP.L   ENADR,A2   ; keep looping until reach the end
00002192  6D00 EF5E               1684          BLT     LOOPMEM
00002196  6000 06EE               1685          BRA     DONE
0000219A                          1686  PRINTLSR_MEM:
0000219A                          1687          * D6 contains the EA
0000219A  4EB9 0000285A           1688          JSR     PRINT_PC
000021A0  43F8 011F               1689          LEA     DISLSR,A1
000021A4  103C 000E               1690          MOVE.B  #14,D0
000021A8  4E4F                    1691          TRAP    #15
000021AA                          1692  
000021AA  4EB8 1A66               1693          JSR     PRINT_MEM_SHIFT_INFO
000021AE  B5F8 0004               1694          CMP.L   ENADR,A2   ; keep looping until reach the end
000021B2  6D00 EF3E               1695          BLT     LOOPMEM
000021B6  6000 06CE               1696          BRA     DONE
000021BA                          1697  ******** PRINT ARITHMETIC MEMORY SHIFTS ********
000021BA                          1698  PRINTASL_MEM:
000021BA                          1699          * D6 contains the EA
000021BA  4EB9 0000285A           1700          JSR     PRINT_PC
000021C0  43F8 0123               1701          LEA     DISASL,A1
000021C4  103C 000E               1702          MOVE.B  #14,D0
000021C8  4E4F                    1703          TRAP    #15
000021CA                          1704  
000021CA  4EB8 1A66               1705          JSR     PRINT_MEM_SHIFT_INFO
000021CE  B5F8 0004               1706          CMP.L   ENADR,A2   ; keep looping until reach the end
000021D2  6D00 EF1E               1707          BLT     LOOPMEM
000021D6  6000 06AE               1708          BRA     DONE
000021DA                          1709  PRINTASR_MEM:
000021DA                          1710          * D6 contains the EA
000021DA  4EB9 0000285A           1711          JSR     PRINT_PC
000021E0  43F8 0127               1712          LEA     DISASR,A1
000021E4  103C 000E               1713          MOVE.B  #14,D0
000021E8  4E4F                    1714          TRAP    #15
000021EA                          1715  
000021EA  4EB8 1A66               1716          JSR     PRINT_MEM_SHIFT_INFO
000021EE  B5F8 0004               1717          CMP.L   ENADR,A2   ; keep looping until reach the end
000021F2  6D00 EEFE               1718          BLT     LOOPMEM
000021F6  6000 068E               1719          BRA     DONE
000021FA                          1720  PRINTROL_MEM:
000021FA                          1721          * D6 contains the EA
000021FA  4EB9 0000285A           1722          JSR     PRINT_PC
00002200  43F8 012B               1723          LEA     DISROL,A1
00002204  103C 000E               1724          MOVE.B  #14,D0
00002208  4E4F                    1725          TRAP    #15
0000220A                          1726  
0000220A  4EB8 1A66               1727          JSR     PRINT_MEM_SHIFT_INFO
0000220E  B5F8 0004               1728          CMP.L   ENADR,A2   ; keep looping until reach the end
00002212  6D00 EEDE               1729          BLT     LOOPMEM
00002216  6000 066E               1730          BRA     DONE
0000221A                          1731  PRINTROR_MEM:
0000221A                          1732          * D6 contains the EA
0000221A  4EB9 0000285A           1733          JSR     PRINT_PC
00002220  43F8 012F               1734          LEA     DISROR,A1
00002224  103C 000E               1735          MOVE.B  #14,D0
00002228  4E4F                    1736          TRAP    #15
0000222A                          1737  
0000222A  4EB8 1A66               1738          JSR     PRINT_MEM_SHIFT_INFO
0000222E  B5F8 0004               1739          CMP.L   ENADR,A2   ; keep looping until reach the end
00002232  6D00 EEBE               1740          BLT     LOOPMEM
00002236  6000 064E               1741          BRA     DONE
0000223A                          1742  ******** ADDITION INSTRUCTIONS ********
0000223A                          1743  ******** PRINT ADD Dn,Dn ********
0000223A                          1744  PRINT_ADD_Dn:
0000223A                          1745  *   D7 - register mode, D4 - register number
0000223A                          1746  *   D6 - opmode, D5 - register
0000223A  4EB9 0000285A           1747          JSR     PRINT_PC
00002240  43F8 0133               1748          LEA     DISADD,A1
00002244  103C 000E               1749          MOVE.B  #14,D0
00002248  4E4F                    1750          TRAP    #15
0000224A                          1751  
0000224A  4EB9 0000255E           1752          JSR     PRINT_ADD_OPMODE
00002250                          1753          * Check if its Dn, ea *
00002250  0C06 0008               1754          CMPI.B  #8,D6 
00002254  6600 0030               1755          BNE     PRINT_ADD_Dn_Ea
00002258                          1756  
00002258  4EB9 0000250A           1757          JSR     PRINT_ADDA_Dn_OR_An
0000225E  4EB9 00002816           1758          JSR     PRINTCOMMA
00002264  3805                    1759          MOVE.W  D5,D4
00002266  4EB9 00002670           1760          JSR     PRINTDn
0000226C  4EB9 00002822           1761          JSR     PRINTNEWLINE
00002272  4EB9 00002876           1762          JSR     CLEAR_ALL
00002278                          1763  
00002278  341A                    1764          MOVE.W  (A2)+,D2
0000227A  B5F8 0004               1765          CMP.L   ENADR,A2   ; keep looping until reach the end
0000227E  6D00 EE72               1766          BLT     LOOPMEM
00002282  6000 0602               1767          BRA     DONE
00002286                          1768  PRINT_ADD_Dn_Ea:
00002286  3204                    1769          MOVE.W  D4,D1
00002288  3805                    1770          MOVE.W  D5,D4
0000228A  4EB9 00002670           1771          JSR     PRINTDn
00002290  4EB9 00002816           1772          JSR     PRINTCOMMA
00002296  3801                    1773          MOVE.W  D1,D4
00002298  4EB9 0000250A           1774          JSR     PRINT_ADDA_Dn_OR_An
0000229E  4EB9 00002822           1775          JSR     PRINTNEWLINE
000022A4  4EB9 00002876           1776          JSR     CLEAR_ALL
000022AA                          1777  
000022AA  341A                    1778          MOVE.W  (A2)+,D2
000022AC  B5F8 0004               1779          CMP.L   ENADR,A2   ; keep looping until reach the end
000022B0  6D00 EE40               1780          BLT     LOOPMEM
000022B4  6000 05D0               1781          BRA     DONE  
000022B8                          1782  PRINT_ADD_EA:
000022B8                          1783  *   D7 - EA, D4 - register number
000022B8                          1784  *   D6 - opmode, D5 - register
000022B8  4EB9 0000285A           1785          JSR     PRINT_PC
000022BE  43F8 0133               1786          LEA     DISADD,A1
000022C2  103C 000E               1787          MOVE.B  #14,D0
000022C6  4E4F                    1788          TRAP    #15
000022C8                          1789  
000022C8  4EB9 0000255E           1790          JSR     PRINT_ADD_OPMODE
000022CE  4EB9 0000256C           1791          JSR     PRINT_EA_DN_OR_DN_EA
000022D4  4EB9 00002876           1792          JSR     CLEAR_ALL
000022DA                          1793  
000022DA  3412                    1794          MOVE.W  (A2),D2
000022DC  B5F8 0004               1795          CMP.L   ENADR,A2   ; keep looping until reach the end
000022E0  6D00 EE10               1796          BLT     LOOPMEM
000022E4  6000 05A0               1797          BRA     DONE
000022E8                          1798  ******** PRINT ADDA Dn,An & An,An ********
000022E8                          1799  PRINT_ADDA_DnAn:
000022E8                          1800  *   D7 - ea mode, D4 - ea number
000022E8                          1801  *   D6 - opmode, D5 - register
000022E8  4EB9 0000285A           1802          JSR     PRINT_PC
000022EE  43F8 0137               1803          LEA     DISADDA,A1
000022F2  103C 000E               1804          MOVE.B  #14,D0
000022F6  4E4F                    1805          TRAP    #15
000022F8                          1806  
000022F8  4EB9 0000251E           1807          JSR     PRINT_ADDA_OPMODE
000022FE  4EB9 0000250A           1808          JSR     PRINT_ADDA_Dn_OR_An
00002304  4EB9 00002816           1809          JSR     PRINTCOMMA
0000230A  3805                    1810          MOVE.W  D5,D4
0000230C  4EB9 00002710           1811          JSR     PRINTAn
00002312  4EB9 00002822           1812          JSR     PRINTNEWLINE
00002318  4EB9 00002876           1813          JSR     CLEAR_ALL
0000231E                          1814  
0000231E  341A                    1815          MOVE.W  (A2)+,D2
00002320  B5F8 0004               1816          CMP.L   ENADR,A2   ; keep looping until reach the end
00002324  6D00 EDCC               1817          BLT     LOOPMEM
00002328  6000 055C               1818          BRA     DONE
0000232C                          1819  ******** PRINT ADDA (An),An & (An)+,An & -(An),An ********
0000232C                          1820  PRINT_ADDA_INDIRECT:
0000232C  4EB9 0000285A           1821          JSR     PRINT_PC
00002332  43F8 0137               1822          LEA     DISADDA,A1
00002336  103C 000E               1823          MOVE.B  #14,D0
0000233A  4E4F                    1824          TRAP    #15
0000233C                          1825  
0000233C  4EB9 0000251E           1826          JSR     PRINT_ADDA_OPMODE
00002342  4EB9 00002530           1827          JSR     PRINT_ADDA_INDIRECT_TYPE
00002348  4EB9 00002816           1828          JSR     PRINTCOMMA
0000234E                          1829  
0000234E  3805                    1830          MOVE.W  D5,D4
00002350  4EB9 00002710           1831          JSR     PRINTAn
00002356  4EB9 00002822           1832          JSR     PRINTNEWLINE
0000235C  4EB9 00002876           1833          JSR     CLEAR_ALL
00002362                          1834  
00002362  341A                    1835          MOVE.W  (A2)+,D2
00002364  B5F8 0004               1836          CMP.L   ENADR,A2   ; keep looping until reach the end
00002368  6D00 ED88               1837          BLT     LOOPMEM
0000236C  6000 0518               1838          BRA     DONE
00002370                          1839  ******** PRINT ADDA ea,An ********
00002370                          1840  PRINT_ADDA_EA:
00002370                          1841  *   D7 - EA, D4 - register number
00002370                          1842  *   D6 - opmode, D5 - register
00002370  4EB9 0000285A           1843          JSR     PRINT_PC
00002376  43F8 0137               1844          LEA     DISADDA,A1
0000237A  103C 000E               1845          MOVE.B  #14,D0
0000237E  4E4F                    1846          TRAP    #15
00002380                          1847  
00002380  4EB9 0000251E           1848          JSR     PRINT_ADDA_OPMODE
00002386  4EB9 0000254A           1849          JSR     PRINT_ADDA_EADDR
0000238C  4EB9 00002816           1850          JSR     PRINTCOMMA
00002392                          1851  
00002392  3805                    1852          MOVE.W  D5,D4
00002394  4EB9 00002710           1853          JSR     PRINTAn
0000239A  4EB9 00002822           1854          JSR     PRINTNEWLINE
000023A0  4EB9 00002876           1855          JSR     CLEAR_ALL
000023A6                          1856  
000023A6  3412                    1857          MOVE.W  (A2),D2
000023A8  B5F8 0004               1858          CMP.L   ENADR,A2   ; keep looping until reach the end
000023AC  6D00 ED44               1859          BLT     LOOPMEM
000023B0  6000 04D4               1860          BRA     DONE 
000023B4                          1861  ******** PRINT ADDQ #data,Dn/An ********
000023B4                          1862  PRINT_ADDQ_AnDn:
000023B4                          1863  * D7 - mode, D6 - data
000023B4                          1864  * D5 - size, D4 - register
000023B4  4EB9 0000285A           1865          JSR     PRINT_PC
000023BA  43F8 013C               1866          LEA     DISADDQ,A1
000023BE  103C 000E               1867          MOVE.B  #14,D0
000023C2  4E4F                    1868          TRAP    #15
000023C4                          1869  
000023C4  4EB9 00002632           1870          JSR     PRINTSIZEOP
000023CA  4EB9 000024F6           1871          JSR     PRINT_ADDQ_DATA
000023D0  4EB9 00002816           1872          JSR     PRINTCOMMA
000023D6  4EB9 0000250A           1873          JSR     PRINT_ADDA_Dn_OR_An
000023DC  4EB9 00002822           1874          JSR     PRINTNEWLINE
000023E2  4EB9 00002876           1875          JSR     CLEAR_ALL
000023E8                          1876  
000023E8  341A                    1877          MOVE.W  (A2)+,D2
000023EA  B5F8 0004               1878          CMP.L   ENADR,A2   ; keep looping until reach the end
000023EE  6D00 ED02               1879          BLT     LOOPMEM
000023F2  6000 0492               1880          BRA     DONE
000023F6                          1881  PRINT_ADDQ_EA:
000023F6  4EB9 0000285A           1882          JSR     PRINT_PC
000023FC  43F8 013C               1883          LEA     DISADDQ,A1
00002400  103C 000E               1884          MOVE.B  #14,D0
00002404  4E4F                    1885          TRAP    #15
00002406                          1886  
00002406  4EB9 00002632           1887          JSR     PRINTSIZEOP
0000240C  4EB9 000024F6           1888          JSR     PRINT_ADDQ_DATA
00002412  4EB9 00002816           1889          JSR     PRINTCOMMA
00002418  4EB9 0000254A           1890          JSR     PRINT_ADDA_EADDR
0000241E  4EB9 00002822           1891          JSR     PRINTNEWLINE
00002424  4EB9 00002876           1892          JSR     CLEAR_ALL
0000242A                          1893  
0000242A  3412                    1894          MOVE.W  (A2),D2
0000242C  B5F8 0004               1895          CMP.L   ENADR,A2   ; keep looping until reach the end
00002430  6D00 ECC0               1896          BLT     LOOPMEM
00002434  6000 0450               1897          BRA     DONE 
00002438                          1898  PRINT_ADDQ_INDIRECT:
00002438  4EB9 0000285A           1899          JSR     PRINT_PC
0000243E  43F8 013C               1900          LEA     DISADDQ,A1
00002442  103C 000E               1901          MOVE.B  #14,D0
00002446  4E4F                    1902          TRAP    #15
00002448                          1903  
00002448  4EB9 00002632           1904          JSR     PRINTSIZEOP
0000244E  4EB9 000024F6           1905          JSR     PRINT_ADDQ_DATA
00002454  4EB9 00002816           1906          JSR     PRINTCOMMA
0000245A  4EB9 00002530           1907          JSR     PRINT_ADDA_INDIRECT_TYPE
00002460  4EB9 00002822           1908          JSR     PRINTNEWLINE
00002466  4EB9 00002876           1909          JSR     CLEAR_ALL
0000246C                          1910  
0000246C  341A                    1911          MOVE.W  (A2)+,D2
0000246E  B5F8 0004               1912          CMP.L   ENADR,A2   ; keep looping until reach the end
00002472  6D00 EC7E               1913          BLT     LOOPMEM
00002476  6000 040E               1914          BRA     DONE
0000247A                          1915  PRINT_SUB_Dn:
0000247A                          1916  *   D7 - register mode, D4 - register number
0000247A                          1917  *   D6 - opmode, D5 - register
0000247A  4EB9 0000285A           1918          JSR     PRINT_PC
00002480  43F8 0141               1919          LEA     DISSUB,A1
00002484  103C 000E               1920          MOVE.B  #14,D0
00002488  4E4F                    1921          TRAP    #15
0000248A                          1922  
0000248A  4EB9 0000255E           1923          JSR     PRINT_ADD_OPMODE
00002490                          1924          * Check if its Dn, ea *
00002490  0C06 0008               1925          CMPI.B  #8,D6 
00002494  6600 FDF0               1926          BNE     PRINT_ADD_Dn_Ea
00002498                          1927  
00002498  4EB9 0000250A           1928          JSR     PRINT_ADDA_Dn_OR_An
0000249E  4EB9 00002816           1929          JSR     PRINTCOMMA
000024A4  3805                    1930          MOVE.W  D5,D4
000024A6  4EB9 00002670           1931          JSR     PRINTDn
000024AC  4EB9 00002822           1932          JSR     PRINTNEWLINE
000024B2  4EB9 00002876           1933          JSR     CLEAR_ALL
000024B8                          1934  
000024B8  341A                    1935          MOVE.W  (A2)+,D2
000024BA  B5F8 0004               1936          CMP.L   ENADR,A2   ; keep looping until reach the end
000024BE  6D00 EC32               1937          BLT     LOOPMEM
000024C2  6000 03C2               1938          BRA     DONE
000024C6                          1939  PRINT_SUB_EA:
000024C6                          1940  *   D7 - EA, D4 - register number
000024C6                          1941  *   D6 - opmode, D5 - register
000024C6  4EB9 0000285A           1942          JSR     PRINT_PC
000024CC  43F8 0141               1943          LEA     DISSUB,A1
000024D0  103C 000E               1944          MOVE.B  #14,D0
000024D4  4E4F                    1945          TRAP    #15
000024D6                          1946  
000024D6  4EB9 0000255E           1947          JSR     PRINT_ADD_OPMODE
000024DC  4EB9 0000256C           1948          JSR     PRINT_EA_DN_OR_DN_EA
000024E2  4EB9 00002876           1949          JSR     CLEAR_ALL
000024E8                          1950  
000024E8  3412                    1951          MOVE.W  (A2),D2
000024EA  B5F8 0004               1952          CMP.L   ENADR,A2   ; keep looping until reach the end
000024EE  6D00 EC02               1953          BLT     LOOPMEM
000024F2  6000 0392               1954          BRA     DONE
000024F6                          1955  ******** ADDQ FUNCTIONS ********
000024F6                          1956  PRINT_ADDQ_DATA:
000024F6  4EB9 000027DA           1957          JSR     PRINTPOUND
000024FC  1206                    1958          MOVE.B  D6,D1
000024FE  143C 000A               1959          MOVE.B  #10,D2
00002502  103C 000F               1960          MOVE.B  #15,D0
00002506  4E4F                    1961          TRAP    #15
00002508  4E75                    1962          RTS    
0000250A                          1963  ******** ADDA FUNCTIONS ********
0000250A                          1964  PRINT_ADDA_Dn_OR_An:
0000250A  0C07 0000               1965          CMPI.B  #0,D7
0000250E  6700 0160               1966          BEQ     PRINTDn
00002512  0C07 0001               1967          CMPI.B  #1,D7 
00002516  6700 01F8               1968          BEQ     PRINTAn
0000251A  6000 0014               1969          BRA     PRINT_ADDA_INDIRECT_TYPE
0000251E                          1970  PRINT_ADDA_OPMODE:
0000251E  0C06 0003               1971          CMPI.B  #%011,D6
00002522  6700 0134               1972          BEQ     PRINTW
00002526  0C06 0007               1973          CMPI.B  #%111,D6
0000252A  6700 0138               1974          BEQ     PRINTL
0000252E  4E75                    1975          RTS
00002530                          1976  PRINT_ADDA_INDIRECT_TYPE:
00002530  0C07 0002               1977          CMPI.B  #%010,D7
00002534  6700 027A               1978          BEQ     PRINT_An_IN
00002538  0C07 0003               1979          CMPI.B  #%011,D7
0000253C  6700 0284               1980          BEQ     PRINT_An_POST
00002540  0C07 0004               1981          CMPI.B  #%100,D7
00002544  6700 0288               1982          BEQ     PRINT_An_PRE
00002548  4E75                    1983          RTS
0000254A                          1984  PRINT_ADDA_EADDR:
0000254A  4EB9 0000282E           1985          JSR     PRINTDOLLAR
00002550  2207                    1986          MOVE.L  D7,D1
00002552  143C 0010               1987          MOVE.B  #16,D2
00002556  103C 000F               1988          MOVE.B  #15,D0
0000255A  4E4F                    1989          TRAP    #15
0000255C  4E75                    1990          RTS
0000255E                          1991  ******** ADD FUNCTIONS ********
0000255E                          1992  PRINT_ADD_OPMODE:
0000255E  4EB9 000025CA           1993          JSR     ADD_EA_DN
00002564  4EB9 0000260E           1994          JSR     ADD_DN_EA
0000256A  4E75                    1995          RTS
0000256C                          1996  PRINT_EA_DN_OR_DN_EA:
0000256C  0C46 0008               1997          CMPI.W  #8,D6
00002570  6700 0008               1998          BEQ     PRINT_EA_DN
00002574  6000 002C               1999          BRA     PRINT_DN_EA
00002578  4E75                    2000          RTS
0000257A                          2001  ****************
0000257A                          2002  * Returns
0000257A                          2003  *   Prints ADD instruction from ea,Dn
0000257A                          2004  PRINT_EA_DN:
0000257A  4EB9 0000282E           2005          JSR     PRINTDOLLAR
00002580  2207                    2006          MOVE.L  D7,D1
00002582  143C 0010               2007          MOVE.B  #16,D2
00002586  103C 000F               2008          MOVE.B  #15,D0
0000258A  4E4F                    2009          TRAP    #15
0000258C  4EB9 00002816           2010          JSR     PRINTCOMMA
00002592  3805                    2011          MOVE.W  D5,D4
00002594  4EB9 00002670           2012          JSR     PRINTDn
0000259A  4EB9 00002822           2013          JSR     PRINTNEWLINE
000025A0  4E75                    2014          RTS
000025A2                          2015  ****************
000025A2                          2016  * Returns
000025A2                          2017  *   Prints ADD instruction from Dn,ea
000025A2                          2018  PRINT_DN_EA:
000025A2  3805                    2019          MOVE.W  D5,D4
000025A4  4EB9 00002670           2020          JSR     PRINTDn
000025AA  4EB9 00002816           2021          JSR     PRINTCOMMA
000025B0  4EB9 0000282E           2022          JSR     PRINTDOLLAR
000025B6                          2023  
000025B6  2207                    2024          MOVE.L  D7,D1
000025B8  143C 0010               2025          MOVE.B  #16,D2
000025BC  103C 000F               2026          MOVE.B  #15,D0
000025C0  4E4F                    2027          TRAP    #15
000025C2  4EB9 00002822           2028          JSR     PRINTNEWLINE
000025C8  4E75                    2029          RTS
000025CA                          2030  ******************
000025CA                          2031  * Returns
000025CA                          2032  *   D6 - contains %1000 if ADD mode is ea,Dn
000025CA                          2033  ADD_EA_DN:
000025CA  0C06 0000               2034          CMPI.B  #0,D6
000025CE  4EB9 00002628           2035          JSR     IS_EA_TO_DN
000025D4  6700 0076               2036          BEQ     PRINTB
000025D8  0C06 0008               2037          CMPI.B  #8,D6      ; MOVE alters Z tag, must get it back.
000025DC  6700 006E               2038          BEQ     PRINTB
000025E0                          2039  
000025E0  0C46 0001               2040          CMPI.W  #%001,D6
000025E4  4EB9 00002628           2041          JSR     IS_EA_TO_DN
000025EA  6700 006C               2042          BEQ     PRINTW
000025EE  0C06 0008               2043          CMPI.B  #8,D6   ; MOVE alters Z tag, must get it back.
000025F2  6700 0064               2044          BEQ     PRINTW
000025F6                          2045  
000025F6  0C46 0002               2046          CMPI.W  #%010,D6
000025FA  4EB9 00002628           2047          JSR     IS_EA_TO_DN
00002600  6700 0062               2048          BEQ     PRINTL
00002604  0C06 0008               2049          CMPI.B  #8,D6   ; MOVE alters Z tag, must get it back.
00002608  6700 005A               2050          BEQ     PRINTL
0000260C  4E75                    2051          RTS
0000260E                          2052  ADD_DN_EA:
0000260E  0C46 0004               2053          CMPI.W  #%100,D6
00002612  6700 0038               2054          BEQ     PRINTB
00002616  0C46 0005               2055          CMPI.W  #%101,D6
0000261A  6700 003C               2056          BEQ     PRINTW
0000261E  0C46 0006               2057          CMPI.W  #%110,D6
00002622  6700 0040               2058          BEQ     PRINTL
00002626  4E75                    2059          RTS
00002628                          2060  IS_EA_TO_DN:
00002628  6700 0004               2061          BEQ     TRUE_EA_TO_DN
0000262C  4E75                    2062          RTS
0000262E                          2063  TRUE_EA_TO_DN:
0000262E  7C08                    2064          MOVE.L  #8,D6
00002630  4E75                    2065          RTS
00002632                          2066  ****************************************
00002632                          2067  ******** PRINT INSTRUCTION SIZE ********
00002632                          2068  ****************************************
00002632                          2069  PRINTSIZEOP:
00002632  0C05 0000               2070          CMPI.B  #$0,D5
00002636  6700 0014               2071          BEQ     PRINTB
0000263A  0C05 0001               2072          CMPI.B  #$1,D5
0000263E  6700 0018               2073          BEQ     PRINTW
00002642  0C05 0002               2074          CMPI.B  #$2,D5
00002646  6700 001C               2075          BEQ     PRINTL
0000264A  4E75                    2076          RTS
0000264C                          2077  PRINTB:
0000264C  43F8 0169               2078          LEA     DISB,A1
00002650  103C 000E               2079          MOVE.B  #14,D0
00002654  4E4F                    2080          TRAP    #15
00002656  4E75                    2081          RTS
00002658                          2082  PRINTW:
00002658  43F8 016E               2083          LEA     DISW,A1
0000265C  103C 000E               2084          MOVE.B  #14,D0
00002660  4E4F                    2085          TRAP    #15
00002662  4E75                    2086          RTS
00002664                          2087  PRINTL:
00002664  43F8 0173               2088          LEA     DISL,A1
00002668  103C 000E               2089          MOVE.B  #14,D0
0000266C  4E4F                    2090          TRAP    #15
0000266E  4E75                    2091          RTS
00002670                          2092  **********************************************
00002670                          2093  ******** PRINT ADDRESS/DATA REGISTERS ********
00002670                          2094  **********************************************
00002670                          2095  * D4 should contain data register
00002670                          2096  PRINTDn:
00002670  B83C 0007               2097          CMP.B #$7,D4
00002674  6700 008E               2098          BEQ PRINTD7
00002678  B83C 0006               2099          CMP.B #$6,D4
0000267C  6700 007A               2100          BEQ PRINTD6
00002680  B83C 0005               2101          CMP.B #$5,D4
00002684  6700 0066               2102          BEQ PRINTD5
00002688  B83C 0004               2103          CMP.B #$4,D4
0000268C  6700 0052               2104          BEQ PRINTD4
00002690  B83C 0003               2105          CMP.B #$3,D4
00002694  6700 003E               2106          BEQ PRINTD3
00002698  B83C 0002               2107          CMP.B #$2,D4
0000269C  6700 002A               2108          BEQ PRINTD2
000026A0  B83C 0001               2109          CMP.B #$1,D4
000026A4  6700 0016               2110          BEQ PRINTD1
000026A8  B83C 0000               2111          CMP.B #$0,D4
000026AC  6700 0002               2112          BEQ PRINTD0
000026B0                          2113  PRINTD0:
000026B0  43F8 0178               2114          LEA     DISD0,A1
000026B4  103C 000E               2115          MOVE.B  #14, D0
000026B8  4E4F                    2116          TRAP    #15
000026BA  4E75                    2117          RTS
000026BC                          2118  PRINTD1:
000026BC  43F8 017B               2119          LEA     DISD1,A1
000026C0  103C 000E               2120          MOVE.B  #14, D0
000026C4  4E4F                    2121          TRAP    #15
000026C6  4E75                    2122          RTS
000026C8                          2123  PRINTD2:
000026C8  43F8 017E               2124          LEA     DISD2,A1
000026CC  103C 000E               2125          MOVE.B  #14, D0
000026D0  4E4F                    2126          TRAP    #15
000026D2  4E75                    2127          RTS
000026D4                          2128  PRINTD3:
000026D4  43F8 0181               2129          LEA     DISD3,A1
000026D8  103C 000E               2130          MOVE.B  #14, D0
000026DC  4E4F                    2131          TRAP    #15
000026DE  4E75                    2132          RTS
000026E0                          2133  PRINTD4:
000026E0  43F8 0184               2134          LEA     DISD4,A1
000026E4  103C 000E               2135          MOVE.B  #14, D0
000026E8  4E4F                    2136          TRAP    #15
000026EA  4E75                    2137          RTS
000026EC                          2138  PRINTD5:
000026EC  43F8 0187               2139          LEA     DISD5,A1
000026F0  103C 000E               2140          MOVE.B  #14, D0
000026F4  4E4F                    2141          TRAP    #15
000026F6  4E75                    2142          RTS
000026F8                          2143  PRINTD6:
000026F8  43F8 018A               2144          LEA     DISD6,A1
000026FC  103C 000E               2145          MOVE.B  #14, D0
00002700  4E4F                    2146          TRAP    #15
00002702  4E75                    2147          RTS
00002704                          2148  PRINTD7:
00002704  43F8 018D               2149          LEA     DISD7,A1
00002708  103C 000E               2150          MOVE.B  #14, D0
0000270C  4E4F                    2151          TRAP    #15
0000270E  4E75                    2152          RTS
00002710                          2153          
00002710                          2154  * D4 should contain data register
00002710                          2155  PRINTAn:
00002710  B83C 0007               2156          CMP.B #$7,D4
00002714  6700 008E               2157          BEQ PRINTA7
00002718  B83C 0006               2158          CMP.B #$6,D4
0000271C  6700 007A               2159          BEQ PRINTA6
00002720  B83C 0005               2160          CMP.B #$5,D4
00002724  6700 0066               2161          BEQ PRINTA5
00002728  B83C 0004               2162          CMP.B #$4,D4
0000272C  6700 0052               2163          BEQ PRINTA4
00002730  B83C 0003               2164          CMP.B #$3,D4
00002734  6700 003E               2165          BEQ PRINTA3
00002738  B83C 0002               2166          CMP.B #$2,D4
0000273C  6700 002A               2167          BEQ PRINTA2
00002740  B83C 0001               2168          CMP.B #$1,D4
00002744  6700 0016               2169          BEQ PRINTA1
00002748  B83C 0000               2170          CMP.B #$0,D4
0000274C  6700 0002               2171          BEQ PRINTA0
00002750                          2172  PRINTA0:
00002750  43F8 0190               2173          LEA     DISA0,A1
00002754  103C 000E               2174          MOVE.B  #14, D0
00002758  4E4F                    2175          TRAP    #15
0000275A  4E75                    2176          RTS
0000275C                          2177  PRINTA1:
0000275C  43F8 0193               2178          LEA     DISA1,A1
00002760  103C 000E               2179          MOVE.B  #14, D0
00002764  4E4F                    2180          TRAP    #15
00002766  4E75                    2181          RTS
00002768                          2182  PRINTA2:
00002768  43F8 0196               2183          LEA     DISA2,A1
0000276C  103C 000E               2184          MOVE.B  #14, D0
00002770  4E4F                    2185          TRAP    #15
00002772  4E75                    2186          RTS
00002774                          2187  PRINTA3:
00002774  43F8 0199               2188          LEA     DISA3,A1
00002778  103C 000E               2189          MOVE.B  #14, D0
0000277C  4E4F                    2190          TRAP    #15
0000277E  4E75                    2191          RTS
00002780                          2192  PRINTA4:
00002780  43F8 019C               2193          LEA     DISA4,A1
00002784  103C 000E               2194          MOVE.B  #14, D0
00002788  4E4F                    2195          TRAP    #15
0000278A  4E75                    2196          RTS
0000278C                          2197  PRINTA5:
0000278C  43F8 019F               2198          LEA     DISA5,A1
00002790  103C 000E               2199          MOVE.B  #14, D0
00002794  4E4F                    2200          TRAP    #15
00002796  4E75                    2201          RTS
00002798                          2202  PRINTA6:
00002798  43F8 01A2               2203          LEA     DISA6,A1
0000279C  103C 000E               2204          MOVE.B  #14, D0
000027A0  4E4F                    2205          TRAP    #15
000027A2  4E75                    2206          RTS
000027A4                          2207  PRINTA7:
000027A4  43F8 01A5               2208          LEA     DISA7,A1
000027A8  103C 000E               2209          MOVE.B  #14, D0
000027AC  4E4F                    2210          TRAP    #15
000027AE  4E75                    2211          RTS
000027B0                          2212  PRINT_An_IN:
000027B0  4EB9 000027E6           2213          JSR     PRINTLEFTPAREN
000027B6  4EB8 2710               2214          JSR     PRINTAn
000027BA  4EB9 000027F2           2215          JSR     PRINTRIGHTPAREN
000027C0  4E75                    2216          RTS
000027C2                          2217  PRINT_An_POST:
000027C2  4EB8 27B0               2218          JSR     PRINT_An_IN
000027C6  4EB9 000027FE           2219          JSR     PRINTPLUS
000027CC  4E75                    2220          RTS
000027CE                          2221  PRINT_An_PRE:
000027CE  4EB9 0000280A           2222          JSR     PRINTMINUS
000027D4  4EB8 27B0               2223          JSR     PRINT_An_IN
000027D8  4E75                    2224          RTS
000027DA                          2225  
000027DA                          2226          
000027DA                          2227  ****************************************
000027DA                          2228  ******** PRINT COMMON CHARCTERS ********
000027DA                          2229  ****************************************
000027DA                          2230  PRINTPOUND:
000027DA  43F8 00ED               2231          LEA     DISPOUND,A1
000027DE  103C 000E               2232          MOVE.B  #14,D0
000027E2  4E4F                    2233          TRAP    #15
000027E4  4E75                    2234          RTS
000027E6                          2235  PRINTLEFTPAREN:
000027E6  43F8 00F1               2236          LEA     DISPARENL,A1
000027EA  103C 000E               2237          MOVE.B  #14,D0
000027EE  4E4F                    2238          TRAP    #15
000027F0  4E75                    2239          RTS
000027F2                          2240  PRINTRIGHTPAREN:
000027F2  43F8 00F3               2241          LEA     DISPARENR,A1
000027F6  103C 000E               2242          MOVE.B  #14,D0
000027FA  4E4F                    2243          TRAP    #15
000027FC  4E75                    2244          RTS
000027FE                          2245  PRINTPLUS:
000027FE  43F8 00F5               2246          LEA     DISPLUS,A1
00002802  103C 000E               2247          MOVE.B  #14,D0
00002806  4E4F                    2248          TRAP    #15
00002808  4E75                    2249          RTS
0000280A                          2250  PRINTMINUS:
0000280A  43F8 00F7               2251          LEA     DISMIN,A1
0000280E  103C 000E               2252          MOVE.B  #14,D0
00002812  4E4F                    2253          TRAP    #15
00002814  4E75                    2254          RTS
00002816                          2255  PRINTCOMMA:
00002816  43F8 00EB               2256          LEA     DISCOMMA,A1
0000281A  103C 000E               2257          MOVE.B  #14,D0
0000281E  4E4F                    2258          TRAP    #15
00002820  4E75                    2259          RTS
00002822                          2260  PRINTNEWLINE:
00002822  43F8 00E8               2261          LEA     NEWLINE,A1
00002826  103C 000E               2262          MOVE.B  #14,D0
0000282A  4E4F                    2263          TRAP    #15
0000282C  4E75                    2264          RTS
0000282E                          2265  PRINTDOLLAR:
0000282E  43F8 00EF               2266          LEA     DISDOLLAR,A1
00002832  103C 000E               2267          MOVE.B  #14,D0
00002836  4E4F                    2268          TRAP    #15
00002838  4E75                    2269          RTS
0000283A                          2270  ***********************
0000283A                          2271  ******** MISC. ********
0000283A                          2272  ***********************
0000283A                          2273  WAIT:
0000283A  6D00 001C               2274          BLT     RETURN     
0000283E  43F8 0083               2275          LEA     DISWAIT,A1
00002842  103C 000E               2276          MOVE.B  #14,D0
00002846  4E4F                    2277          TRAP    #15
00002848                          2278  
00002848  103C 0005               2279          MOVE.B  #5,D0
0000284C  4E4F                    2280          TRAP    #15
0000284E                          2281  
0000284E  21FC 00000000 0008      2282          MOVE.L  #0,LOOPCOUNT
00002856  4E75                    2283          RTS
00002858                          2284  RETURN:
00002858  4E75                    2285          RTS
0000285A                          2286  PRINT_PC:
0000285A  2238 000C               2287          MOVE.L  PC_COUNT,D1
0000285E  143C 0010               2288          MOVE.B  #16,D2
00002862  103C 000F               2289          MOVE.B  #15,D0
00002866  4E4F                    2290          TRAP    #15
00002868  4281                    2291          CLR.L   D1   ; prevent dirty writing
0000286A  43F8 00F9               2292          LEA     DISTAB,A1
0000286E  103C 000E               2293          MOVE.B  #14,D0
00002872  4E4F                    2294          TRAP    #15
00002874                          2295  
00002874  4E75                    2296          RTS
00002876                          2297  CLEAR_ALL:
00002876  4281                    2298          CLR.L   D1
00002878  4282                    2299          CLR.L   D2
0000287A  4283                    2300          CLR.L   D3
0000287C  4284                    2301          CLR.L   D4
0000287E  4285                    2302          CLR.L   D5
00002880  4286                    2303          CLR.L   D6
00002882  4287                    2304          CLR.L   D7
00002884  4E75                    2305          RTS
00002886                          2306  DONE:
00002886  43F8 00AF               2307          LEA     DISDONE,A1
0000288A  103C 000E               2308          MOVE.B  #14,D0
0000288E  4E4F                    2309          TRAP    #15
00002890  4281                    2310          CLR.L   D1          ; clear up the data registers used.
00002892  4282                    2311          CLR.L   D2
00002894  4283                    2312          CLR.L   D3
00002896  4287                    2313          CLR.L   D7
00002898                          2314          END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD_DN_EA           260E
ADD_EA_DN           25CA
ADD_LONG_ADDR       191E
ADD_WORD_ADDR       1916
ASKEN               37
ASKST               11
BRANCH_LONG         1688
BRANCH_WORD         1652
CHARLOOP            1020
CHECK_IS_MOVEM_OR_JSR  1172
CLEAR_ALL           2876
CLOSING             2094
CONVERTTOHEX        1038
CR                  D
DECODEADDS          12EE
DECODEASL_REG       1232
DECODEASR_REG       126A
DECODEBRANCHES      141E
DECODEJSR_REG       1188
DECODELEA_MEM       11A2
DECODELOGICS        1126
DECODELOGIC_CODE    1148
DECODELSL_REG       1218
DECODELSR_REG       1250
DECODENOP           110A
DECODENOT_REG       117E
DECODEROL_REG       123C
DECODEROR_REG       1274
DECODERTS           1118
DECODESHIFTS        11F0
DECODE_ADDA_ANDN    1356
DECODE_ADDA_EA      137C
DECODE_ADDQ         1386
DECODE_ADDQ_ANDN    1396
DECODE_ADDQ_EA      13CC
DECODE_ADD_DN       1324
DECODE_ADD_EA       133A
DECODE_AND          11BC
DECODE_ASL_MEM      12AC
DECODE_ASR_MEM      12DA
DECODE_BEQ          1600
DECODE_BGE          15AE
DECODE_BGT          150A
DECODE_BLE          155C
DECODE_BLT          14B8
DECODE_BRA          1466
DECODE_LSL_MEM      1292
DECODE_LSR_MEM      12C0
DECODE_MOVE         1710
DECODE_MOVEA        175C
DECODE_MOVEM        1792
DECODE_MOVEQ        177E
DECODE_OR           11D6
DECODE_REG          120E
DECODE_ROL_MEM      12B6
DECODE_ROR_MEM      12E4
DECODE_SHIFT_MEM    1288
DECODE_SUB          13D6
DECODE_SUB_DN       13E6
DECODE_SUB_EA       1414
DETERMINE_ADDR_MODE  199E
DISA0               190
DISA1               193
DISA2               196
DISA3               199
DISA4               19C
DISA5               19F
DISA6               1A2
DISA7               1A5
DISADD              133
DISADDA             137
DISADDQ             13C
DISAND              114
DISASL              123
DISASR              127
DISB                169
DISBEQ              163
DISBGE              15D
DISBGT              151
DISBLE              157
DISBLT              14B
DISBRA              145
DISCOMMA            EB
DISD0               178
DISD1               17B
DISD2               17E
DISD3               181
DISD4               184
DISD5               187
DISD6               18A
DISD7               18D
DISDATA             1A8
DISDOLLAR           EF
DISDONE             AF
DISEN               71
DISJSR              108
DISL                173
DISLEA              10E
DISLSL              11B
DISLSR              11F
DISMIN              F7
DISNOP              FC
DISNOT              104
DISOR               118
DISPARENL           F1
DISPARENR           F3
DISPLUS             F5
DISPOUND            ED
DISROL              12B
DISROR              12F
DISRTS              100
DISST               5D
DISSUB              141
DISTAB              F9
DISW                16E
DISWAIT             83
DOLLAR              208C
DOLLAR_OR_HASHTAG   2078
DONE                2886
ENADR               4
ENDADR              100E
GET_ADDQ_DATA       18B0
GET_ADDQ_SIZE       18A2
GET_ADD_EA          1902
GET_ADD_MODE_REG    18C0
GET_ADD_OPMODE      18E6
GET_ADD_REG         18F4
GET_AND_DATA        1876
GET_DISPLACEMENT    16BE
GET_JSR_LOGIC_DATA  1840
GET_LEA_LOGIC_DATA  1854
GET_MEM_SHIFT_DATA  1958
GET_MOVE_DEST       17B6
GET_MOVE_SIZE       17A8
GET_MOVE_SOURCE     17CE
GET_NOT_LOGIC_DATA  1822
GET_REG_SHIFT_DATA  1926
HASHTAG             2084
INVALID             10A2
INVALIDMSG          B9
INVALIDOP           17E2
ISEND               102C
ISLASTIN            108E
ISLOW               1066
ISUPP               1050
IS_EA_TO_DN         2628
IS_IN_MEM_BOOL      10
IS_MEM_INDIRECT     1982
LF                  A
LONG_ADDR           19BA
LOOPCOUNT           8
LOOPMEM             10F2
NEWLINE             E8
PC_COUNT            C
PRESSEDENT          108C
PRINTA0             2750
PRINTA1             275C
PRINTA2             2768
PRINTA3             2774
PRINTA4             2780
PRINTA5             278C
PRINTA6             2798
PRINTA7             27A4
PRINTAN             2710
PRINTASL_MEM        21BA
PRINTASL_REG        20F2
PRINTASR_MEM        21DA
PRINTASR_REG        2114
PRINTB              264C
PRINTCOMMA          2816
PRINTD0             26B0
PRINTD1             26BC
PRINTD2             26C8
PRINTD3             26D4
PRINTD4             26E0
PRINTD5             26EC
PRINTD6             26F8
PRINTD7             2704
PRINTDN             2670
PRINTDOLLAR         282E
PRINTJSR_ABS_ADR    1BE0
PRINTJSR_ADR        1BC4
PRINTL              2664
PRINTLEA_ABS_ADR    1C48
PRINTLEA_ADR        1C1E
PRINTLEFTPAREN      27E6
PRINTLSL_MEM        217A
PRINTLSL_REG        20AE
PRINTLSR_MEM        219A
PRINTLSR_REG        20D0
PRINTMINUS          280A
PRINTNEWLINE        2822
PRINTNOP            19C2
PRINTNOT            1AC0
PRINTNOT_ABS_ADR    1B80
PRINTNOT_INAN       1B0E
PRINTNOT_POS_INAN   1B30
PRINTNOT_PRE_INAN   1B58
PRINTNOT_REG        1AEC
PRINTPLUS           27FE
PRINTPOUND          27DA
PRINTRIGHTPAREN     27F2
PRINTROL_MEM        21FA
PRINTROL_REG        2136
PRINTROR_MEM        221A
PRINTROR_REG        2158
PRINTRTS            19EC
PRINTSIZEOP         2632
PRINTW              2658
PRINT_ADDA_DNAN     22E8
PRINT_ADDA_DN_OR_AN  250A
PRINT_ADDA_EA       2370
PRINT_ADDA_EADDR    254A
PRINT_ADDA_INDIRECT  232C
PRINT_ADDA_INDIRECT_TYPE  2530
PRINT_ADDA_OPMODE   251E
PRINT_ADDQ_ANDN     23B4
PRINT_ADDQ_DATA     24F6
PRINT_ADDQ_EA       23F6
PRINT_ADDQ_INDIRECT  2438
PRINT_ADD_DN        223A
PRINT_ADD_DN_EA     2286
PRINT_ADD_EA        22B8
PRINT_ADD_OPMODE    255E
PRINT_AND_ABS_ADR_DN  1D60
PRINT_AND_DATA      1C94
PRINT_AND_DN_ABS_ADR  1E2A
PRINT_AND_DN_DN     1CCC
PRINT_AND_DN_EA     1DA0
PRINT_AND_DN_INAN   1DC4
PRINT_AND_DN_POS_INAN  1DE2
PRINT_AND_DN_PRE_INAN  1E06
PRINT_AND_EA_DN     1CA0
PRINT_AND_INAN_DN   1CEE
PRINT_AND_OPENING   1E6A
PRINT_AND_POS_INAN_DN  1D10
PRINT_AND_PRE_INAN_DN  1D38
PRINT_AN_IN         27B0
PRINT_AN_POST       27C2
PRINT_AN_PRE        27CE
PRINT_BEQ           1704
PRINT_BGE           16F8
PRINT_BGT           16E0
PRINT_BLE           16EC
PRINT_BLT           16D4
PRINT_BRA           16C8
PRINT_DN_EA         25A2
PRINT_EA_DN         257A
PRINT_EA_DN_OR_DN_EA  256C
PRINT_IS_MEM_IN     1A96
PRINT_MEM_SHIFT_INFO  1A66
PRINT_OR_ABS_ADR_DN  1F52
PRINT_OR_DATA       1E86
PRINT_OR_DN_ABS_ADR  201C
PRINT_OR_DN_DN      1EBE
PRINT_OR_DN_EA      1F92
PRINT_OR_DN_INAN    1FB6
PRINT_OR_DN_POS_INAN  1FD4
PRINT_OR_DN_PRE_INAN  1FF8
PRINT_OR_EA_DN      1E92
PRINT_OR_INAN_DN    1EE0
PRINT_OR_OPENING    205C
PRINT_OR_POS_INAN_DN  1F02
PRINT_OR_PRE_INAN_DN  1F2A
PRINT_PC            285A
PRINT_REG_SHIFT_INFO  1A40
PRINT_SHIFT_REG_CONT  1A26
PRINT_SUB_DN        247A
PRINT_SUB_EA        24C6
READMEM             10DA
RETURN              2858
SHIFT4NXT           107E
SHIFT_IN1           1A16
STADR               0
START               1000
STARTADR            1000
TRUE_EA_TO_DN       262E
VALIDATEIN          10C0
WAIT                283A
WORD_ADDR           19B2
