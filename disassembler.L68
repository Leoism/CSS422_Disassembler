00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/8/2020 7:44:52 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Disassembler
00000000                             3  * Written by : Cool Dudes (Cheuk-Hang Tse, Leonardo Mota-Villaraldo,
00000000                             4  *              Sean Le, Zachary Joseph Morrison)
00000000                             5  * Date       : 11/02/2020
00000000                             6  * Description: Disassemmbles M68000 machine code into instructions
00000000                             7  *-----------------------------------------------------------
00000000                             8      
00000000  =0000000A                  9  LF      EQU     $0A      ; Line feed
00000000  =0000000D                 10  CR      EQU     $0D      ; Carriage return
00000000                            11  STADR   DS.L    1        ; allocate long in memory for
00000004                            12                           ; starting address
00000004                            13  ENADR   DS.L    1        ; allocate for end address
00000008                            14  LOOPCOUNT DS.L  1       ; keep track of loop
0000000C= 00000001                  15  PC_COUNT  DC.L  1       ; keep track of pc
00000010= 01                        16  IS_IN_MEM_BOOL DC.B  1
00000011                            17  
00000011                            18  ******** USER INPUT/OUTPUT/INTERACTIONS ********
00000011= 50 6C 65 61 73 65 ...     19  ASKST   DC.B    'Please enter starting address in hex:',0
00000037= 0D 0A 50 6C 65 61 ...     20  ASKEN   DC.B    CR,LF,'Please enter ending address in hex:',0
0000005D= 0D 0A 53 74 61 72 ...     21  DISST   DC.B    CR,LF,'Starting Address:',0
00000071= 0D 0A 45 6E 64 69 ...     22  DISEN   DC.B    CR,LF,'Ending Address:',0
00000083= 50 6C 65 61 73 65 ...     23  DISWAIT DC.B    'Please press any key to continue displaying',0
000000AF= 46 69 6E 69 73 68 ...     24  DISDONE DC.B    'Finished.',0
000000B9= 0D 0A 59 6F 75 20 ...     25  INVALIDMSG DC.B    CR,LF,'You entered an invalid address. Try again.',CR,LF,0
000000E8                            26  
000000E8                            27  ******** COMMON CHARACTERS ********
000000E8= 0D 0A 00                  28  NEWLINE DC.B    CR,LF,0
000000EB= 2C 00                     29  DISCOMMA DC.B   ',',0
000000ED= 23 00                     30  DISPOUND DC.B   '#',0
000000EF= 24 00                     31  DISDOLLAR DC.B  '$',0
000000F1= 28 00                     32  DISPARENL DC.B   '(',0
000000F3= 29 00                     33  DISPARENR DC.B   ')',0
000000F5= 2B 00                     34  DISPLUS DC.B    '+',0
000000F7= 2D 00                     35  DISMIN  DC.B    '-',0
000000F9= 20 20 00                  36  DISTAB DC.B     '  ',0
000000FC                            37  ******** INSTRUCTION PRINTS ********
000000FC= 4E 4F 50 00               38  DISNOP  DC.B    'NOP',0
00000100= 52 54 53 00               39  DISRTS  DC.B    'RTS',0
00000104= 4E 4F 54 00               40  DISNOT  DC.B    'NOT',0
00000108= 4A 53 52 20 20 00         41  DISJSR  DC.B    'JSR  ',0
0000010E= 4C 45 41 20 20 00         42  DISLEA  DC.B    'LEA  ',0
00000114= 41 4E 44 00               43  DISAND  DC.B    'AND',0
00000118= 4F 52 00                  44  DISOR   DC.B    'OR',0
0000011B= 4C 53 4C 00               45  DISLSL  DC.B    'LSL',0
0000011F= 4C 53 52 00               46  DISLSR  DC.B    'LSR',0
00000123= 41 53 4C 00               47  DISASL  DC.B    'ASL',0
00000127= 41 53 52 00               48  DISASR  DC.B    'ASR',0
0000012B= 52 4F 4C 00               49  DISROL  DC.B    'ROL',0
0000012F= 52 4F 52 00               50  DISROR  DC.B    'ROR',0
00000133= 41 44 44 00               51  DISADD  DC.B    'ADD',0
00000137= 41 44 44 41 00            52  DISADDA DC.B    'ADDA',0
0000013C= 41 44 44 51 00            53  DISADDQ DC.B    'ADDQ',0
00000141= 53 55 42 00               54  DISSUB  DC.B    'SUB',0
00000145= 42 52 41 20 20 00         55  DISBRA  DC.B    'BRA  ',0
0000014B= 42 4C 54 20 20 00         56  DISBLT  DC.B    'BLT  ',0
00000151= 42 47 54 20 20 00         57  DISBGT  DC.B    'BGT  ',0
00000157= 42 4C 45 20 20 00         58  DISBLE  DC.B    'BLE  ',0
0000015D= 42 47 45 20 20 00         59  DISBGE  DC.B    'BGE  ',0
00000163= 42 45 51 20 20 00         60  DISBEQ  DC.B    'BEQ  ',0
00000169                            61  ******** SIZE PRINTS ********
00000169= 2E 42 20 20 00            62  DISB    DC.B    '.B  ',0
0000016E= 2E 57 20 20 00            63  DISW    DC.B    '.W  ',0
00000173= 2E 4C 20 20 00            64  DISL    DC.B    '.L  ',0
00000178                            65  
00000178                            66  ******** DATAREGISTER/ADDRESS REGISTER PRINTS ********
00000178= 44 30 00                  67  DISD0   DC.B    'D0',0
0000017B= 44 31 00                  68  DISD1   DC.B    'D1',0
0000017E= 44 32 00                  69  DISD2   DC.B    'D2',0
00000181= 44 33 00                  70  DISD3   DC.B    'D3',0
00000184= 44 34 00                  71  DISD4   DC.B    'D4',0
00000187= 44 35 00                  72  DISD5   DC.B    'D5',0
0000018A= 44 36 00                  73  DISD6   DC.B    'D6',0
0000018D= 44 37 00                  74  DISD7   DC.B    'D7',0
00000190= 41 30 00                  75  DISA0   DC.B    'A0',0
00000193= 41 31 00                  76  DISA1   DC.B    'A1',0
00000196= 41 32 00                  77  DISA2   DC.B    'A2',0
00000199= 41 33 00                  78  DISA3   DC.B    'A3',0
0000019C= 41 34 00                  79  DISA4   DC.B    'A4',0
0000019F= 41 35 00                  80  DISA5   DC.B    'A5',0
000001A2= 41 36 00                  81  DISA6   DC.B    'A6',0
000001A5= 41 37 00                  82  DISA7   DC.B    'A7',0
000001A8                            83  
000001A8                            84  ******** INVALID DATA ********
000001A8= 20 20 44 41 54 41 ...     85  DISDATA DC.B    '  DATA  ',0
00001000                            86          ORG     $1000     ; start at 1000
00001000                            87  START:          
00001000                            88  
00001000                            89  STARTADR:                   
00001000  43F8 0011                 90          LEA     ASKST,A1    ; load message to A1
00001004  103C 000D                 91          MOVE.B  #13,D0      ; use trap task 13
00001008  4E4F                      92          TRAP    #15
0000100A  6000 0014                 93          BRA     CHARLOOP    ; loop to get start address
0000100E                            94  ENDADR:
0000100E  43F8 0037                 95          LEA     ASKEN,A1    ; load message to A1
00001012  103C 000D                 96          MOVE.B  #13,D0      ; use trap task 13
00001016  4E4F                      97          TRAP    #15
00001018  1E3C 0001                 98          MOVE.B  #1,D7       ; set D7 to 1 (using as bool)
0000101C                            99                              ; to later check if asking for end
0000101C  6000 0002                100          BRA     CHARLOOP    ; loop to get end address
00001020                           101  CHARLOOP:
00001020  103C 0005                102          MOVE.B  #5,D0       ; loop through user input until two 
00001024                           103                              ; hexa characters are entered.
00001024  4E4F                     104          TRAP    #15
00001026  5203                     105          ADD.B   #1,D3
00001028  6D00 0002                106          BLT     ISEND
0000102C                           107  ISEND:
0000102C  B23C 000D                108          CMP.B   #$D,D1
00001030  6700 005A                109          BEQ     PRESSEDENT
00001034  6000 0002                110          BRA     CONVERTTOHEX
00001038                           111  
00001038                           112  * START: The following section converts ascii characters to
00001038                           113  * corresponding hex
00001038                           114  CONVERTTOHEX:
00001038  B23C 0030                115          CMP.B   #$30,D1     ; if the less than 0x30 not valid
0000103C  6D00 0064                116          BLT     INVALID
00001040  0401 0030                117          SUB.B   #$30,D1     ; offset by 0x30 
00001044  B23C 0009                118          CMP.B   #$9,D1      ; if greater than 0x9, could be a HEX letter
00001048  6E00 0006                119          BGT     ISUPP
0000104C  6000 0030                120          BRA     SHIFT4NXT
00001050                           121  ISUPP: * Checks if the character is a HEX letter in uppercase
00001050  5F01                     122          SUB.B   #$7,D1      ; offset by 0x07 
00001052  B23C 000A                123          CMP.B   #$A,D1      
00001056  6D00 004A                124          BLT     INVALID        ; if less than 0xA, invalid char
0000105A  B23C 000F                125          CMP.B   #$F,D1  
0000105E  6E00 0006                126          BGT     ISLOW       ; could be lowercase HEX letter
00001062  6000 001A                127          BRA     SHIFT4NXT
00001066                           128  ISLOW: * Checks if the character is a HEX letter in lowercase
00001066  0401 0020                129          SUB.B   #$20,D1     ; offset by 0x20
0000106A  B23C 000A                130          CMP.B   #$A,D1      ; if less than 0xA, invalid char
0000106E  6D00 0032                131          BLT     INVALID
00001072  B23C 000F                132          CMP.B   #$F,D1      ; if greater than 0xF, invalid char
00001076  6E00 002A                133          BGT     INVALID
0000107A  6000 0002                134          BRA     SHIFT4NXT
0000107E                           135  * END * 
0000107E                           136  
0000107E                           137  SHIFT4NXT:
0000107E  D401                     138          ADD.B  D1,D2
00001080  B63C 0008                139          CMP.B   #8,D3       ; check if reached max characters
00001084                           140                              ; otherwise bitshift for next char
00001084  6700 0008                141          BEQ     ISLASTIN    ; check if asking for last
00001088  E982                     142          ASL.L   #4,D2
0000108A  6094                     143          BRA     CHARLOOP
0000108C                           144  PRESSEDENT:
0000108C  E882                     145          ASR.L   #4,D2       ; remove the extra bit shift since when
0000108E                           146                              ; pressing enter max chars is 7
0000108E                           147  ISLASTIN:
0000108E  BE3C 0001                148          CMP.B   #1,D7       ; if D7 is set, asking for last input
00001092  6700 002C                149          BEQ     VALIDATEIN  ; branch to the next place if asking for end
00001096  4283                     150          CLR.L   D3          ; Clear character count
00001098  21C2 0000                151          MOVE.L  D2,STADR
0000109C  4282                     152          CLR.L   D2
0000109E  6000 FF6E                153          BRA     ENDADR      ; else ask for input
000010A2                           154  
000010A2                           155  INVALID:                    ; handle an invalid input
000010A2  43F8 00B9                156          LEA     INVALIDMSG,A1
000010A6  103C 000D                157          MOVE.B  #13,D0
000010AA  4E4F                     158          TRAP    #15
000010AC                           159  
000010AC  4280                     160          CLR.L   D0
000010AE  4281                     161          CLR.L   D1
000010B0  4282                     162          CLR.L   D2
000010B2  4283                     163          CLR.L   D3
000010B4  4284                     164          CLR.L   D4
000010B6  4285                     165          CLR.L   D5
000010B8  4286                     166          CLR.L   D6
000010BA  4287                     167          CLR.L   D7
000010BC  6000 FF42                168          BRA     STARTADR
000010C0                           169  VALIDATEIN:
000010C0  4283                     170          CLR.L   D3
000010C2  21C2 0004                171          MOVE.L  D2,ENADR    ; saving since latest address has not been saved yet
000010C6  2238 0000                172          MOVE.L  STADR,D1
000010CA  B481                     173          CMP.L   D1,D2       ; check if ending is before start
000010CC  65D4                     174          BLO     INVALID
000010CE  B2BC 00001000            175          CMP.L   #$1000,D1   ; check if start is before program start
000010D4  6DCC                     176          BLT     INVALID
000010D6  E209                     177          LSR.B   #1,D1       ; check starting address to avoid loading invalid address
000010D8  65C8                     178          BCS     INVALID     ; 68k only allows loading even addresses 
000010DA                           179  READMEM:
000010DA  4287                     180          CLR.L   D7
000010DC  4283                     181          CLR.L   D3     
000010DE  4282                     182          CLR.L   D2
000010E0                           183          * Clear the screen
000010E0  3239 0000FF00            184          MOVE.W  $FF00,D1
000010E6  103C 000F                185          MOVE.B  #15,D0
000010EA  4E4F                     186          TRAP    #15
000010EC                           187  
000010EC  4281                     188          CLR.L   D1
000010EE  2478 0000                189          MOVE.L  STADR,A2    ; load starting address
000010F2                           190  LOOPMEM:
000010F2  52B8 0008                191          ADDQ.L  #1,LOOPCOUNT
000010F6  0CB8 0000001E 0008       192          CMPI.L  #30,LOOPCOUNT
000010FE  4EB9 0000287A            193          JSR     WAIT
00001104  21CA 000C                194          MOVE.L  A2,PC_COUNT
00001108  3412                     195          MOVE.W  (A2),D2    ; each instruction is at least a word in machine code
0000110A                           196          * Do action here *
0000110A                           197  DECODENOP:
0000110A  3602                     198          MOVE.W  D2, D3      ; make a copy in d3 to run tests on the copy
0000110C  0A43 4E71                199          EORI.W  #$4E71,D3   ; NOP XOR NOP would equal 0
00001110  B67C 0000                200          CMP.W   #0,D3
00001114  6700 08DC                201          BEQ     PRINTNOP
00001118                           202  DECODERTS:
00001118  3602                     203          MOVE.W  D2, D3      ; make a copy in d3 to run tests on the copy
0000111A  0A43 4E75                204          EORI.W  #$4E75,D3  ; RTS XOR RTS would eqaul 0
0000111E  B67C 0000                205          CMP.W   #0,D3
00001122  6700 08F8                206          BEQ     PRINTRTS
00001126                           207  ******** DECODE LOGICS ********
00001126                           208  DECODELOGICS:
00001126  3602                     209          MOVE.W  D2,D3
00001128  EE4B                     210          LSR.W   #7,D3       ; NOT, LEA, JSR starts with 0100, RTS starts with 0100 too, but it has a seperate check
0000112A  EA4B                     211          LSR.W   #5,D3
0000112C  0C03 0004                212          CMPI.B  #4,D3
00001130  6700 0016                213          BEQ     DECODELOGIC_CODE
00001134  0C03 000C                214          CMPI.B  #$C,D3
00001138  6700 0082                215          BEQ     DECODE_AND
0000113C  0C03 0008                216          CMPI.B  #$8,D3
00001140  6700 0094                217          BEQ     DECODE_OR
00001144  6000 00AA                218          BRA     DECODESHIFTS
00001148                           219          
00001148                           220  ******** DECODE LOGICS SEQUENCE ********
00001148                           221  DECODELOGIC_CODE:
00001148  3602                     222          MOVE.W  D2,D3
0000114A  0803 000B                223          BTST.L  #11,D3
0000114E  6600 0022                224          BNE     CHECK_IS_MOVEM_OR_JSR
00001152  E04B                     225          LSR.W   #8,D3
00001154  B63C 0046                226          CMP.B   #$46,D3
00001158  6700 0024                227          BEQ     DECODENOT_REG   ; if the opcode starts with 0100 0110, then it is NOT opcode
0000115C                           228          
0000115C  3602                     229          MOVE.W  D2,D3
0000115E  E04B                     230          LSR.W   #8,D3
00001160  B63C 004E                231          CMP.B   #$4E,D3
00001164  6700 0022                232          BEQ     DECODEJSR_REG   ; if the opcode starts with 0100 1110, then it is JSR opcode
00001168                           233          
00001168  2602                     234          MOVE.L  D2,D3
0000116A  0803 0008                235          BTST.L  #8,D3
0000116E  6600 0032                236          BNE     DECODELEA_MEM   ; if the opcode starts with 0100 and the 8th binary is 1, then it is a LEA opcode
00001172                           237  CHECK_IS_MOVEM_OR_JSR:
00001172  0803 0009                238          BTST.L  #9,D3
00001176  6700 0642                239          BEQ     DECODE_MOVEM
0000117A  6600 000C                240          BNE     DECODEJSR_REG
0000117E                           241  DECODENOT_REG:
0000117E  4EB9 0000184A            242          JSR     GET_NOT_LOGIC_DATA
00001184  6000 096A                243          BRA     PRINTNOT
00001188                           244          
00001188                           245  DECODEJSR_REG:
00001188  4EB9 00001868            246          JSR     GET_JSR_LOGIC_DATA
0000118E  BC3C 0002                247          CMP.B   #$2,D6
00001192  6700 0A60                248          BEQ     PRINTJSR_ADR
00001196  BC3C 0007                249          CMP.B   #$7,D6      ; the EA is either word or long
0000119A  6700 0A74                250          BEQ     PRINTJSR_ABS_ADR
0000119E  6000 066A                251          BRA     INVALIDOP
000011A2                           252  
000011A2                           253  DECODELEA_MEM:
000011A2  4EB9 0000187C            254          JSR     GET_LEA_LOGIC_DATA
000011A8  BC3C 0002                255          CMP.B   #$2,D6
000011AC  6700 0AA0                256          BEQ     PRINTLEA_ADR
000011B0  BC3C 0007                257          CMP.B   #$7,D6
000011B4  6700 0AC2                258          BEQ     PRINTLEA_ABS_ADR
000011B8  6000 0650                259          BRA     INVALIDOP
000011BC                           260          
000011BC                           261  ******** DECODE AND ***********
000011BC                           262  DECODE_AND:
000011BC                           263          ; Check if the opcode is MULS
000011BC  3602                     264          MOVE.W  D2,D3
000011BE  EC4B                     265          LSR.W   #6,D3
000011C0  0243 0003                266          ANDI.W  #$3,D3
000011C4  0C43 0003                267          CMPI.W  #$3,D3
000011C8  6700 0640                268          BEQ     INVALIDOP
000011CC  4EB9 0000189E            269          JSR     GET_AND_DATA
000011D2  6000 0AF0                270          BRA     PRINT_AND_DATA
000011D6                           271          
000011D6                           272  ******** DECODE OR  ***********
000011D6                           273  DECODE_OR:
000011D6                           274          ; Check if the opcode is not DIVU
000011D6  3602                     275          MOVE.W  D2,D3
000011D8  EC4B                     276          LSR.W   #6,D3
000011DA  0243 0003                277          ANDI.W  #$3,D3
000011DE  0C43 0003                278          CMPI.W  #$3,D3
000011E2  6700 0626                279          BEQ     INVALIDOP
000011E6  4EB9 0000189E            280          JSR     GET_AND_DATA
000011EC  6000 0CC8                281          BRA     PRINT_OR_DATA
000011F0                           282          
000011F0                           283  ******** DECODE SHIFTS ********
000011F0                           284  DECODESHIFTS:
000011F0  3602                     285          MOVE.W  D2,D3
000011F2  EE4B                     286          LSR.W   #7,D3
000011F4  EA4B                     287          LSR.W   #5,D3
000011F6  0C03 000E                288          CMPI.B  #$E,D3
000011FA  6600 00F2                289          BNE     DECODEADDS  ; REPLACE WITH OPCODES AS THEY GET DONE
000011FE  2602                     290          MOVE.L  D2,D3
00001200  EC8B                     291          LSR.L   #6,D3      
00001202  0203 0003                292          ANDI.B  #$3,D3
00001206  B63C 0003                293          CMP.B   #$3,D3
0000120A  6700 007C                294          BEQ     DECODE_SHIFT_MEM  ; if 0 then a right shift.
0000120E                           295  ******** DECODE REGISTER SHIFTS ********
0000120E                           296  DECODE_REG:
0000120E  2602                     297          MOVE.L  D2,D3       ; restore D3 
00001210  0803 0008                298          BTST    #8,D3
00001214  6700 003A                299          BEQ     DECODELSR_REG
00001218                           300  ******** DECODE LSL REG ******** 
00001218                           301  DECODELSL_REG:
00001218  0803 0004                302          BTST.L  #4,D3      ; shifts are set to 0
0000121C  6600 001E                303          BNE     DECODEROL_REG  ; rotates are set to 1
00001220  0803 0003                304          BTST.L  #3,D3      ; arthimetic shift is set to 0
00001224  6700 000C                305          BEQ     DECODEASL_REG
00001228  4EB9 00001956            306          JSR     GET_REG_SHIFT_DATA
0000122E  6000 0EAE                307          BRA     PRINTLSL_REG       
00001232                           308  ******** DECODE ASL REG ********
00001232                           309  DECODEASL_REG:
00001232  4EB9 00001956            310          JSR     GET_REG_SHIFT_DATA 
00001238  6000 0EE8                311          BRA     PRINTASL_REG
0000123C                           312  ******** DECODE ROL REG ********
0000123C                           313  DECODEROL_REG:
0000123C  2602                     314          MOVE.L  D2,D3
0000123E  0803 0003                315          BTST.L  #3,D3
00001242  6700 05C6                316          BEQ     INVALIDOP   ; we are not supporting ROXL
00001246  4EB9 00001956            317          JSR     GET_REG_SHIFT_DATA
0000124C  6000 0F18                318          BRA     PRINTROL_REG
00001250                           319  ******** DECODE LSR REG ********
00001250                           320  DECODELSR_REG:
00001250  0803 0004                321          BTST.L  #4,D3      ; shifts are set to 0
00001254  6600 001E                322          BNE     DECODEROR_REG  ; rotates are set to 1
00001258  0803 0003                323          BTST.L  #3,D3      ; arthimetic shift is set to 0
0000125C  6700 000C                324          BEQ     DECODEASR_REG
00001260  4EB9 00001956            325          JSR     GET_REG_SHIFT_DATA
00001266  6000 0E98                326          BRA     PRINTLSR_REG    
0000126A                           327  ******** DECODE ASR REG ********
0000126A                           328  DECODEASR_REG:
0000126A  4EB9 00001956            329          JSR     GET_REG_SHIFT_DATA 
00001270  6000 0ED2                330          BRA     PRINTASR_REG
00001274                           331  ******** DECODE ROR REG ********
00001274                           332  DECODEROR_REG:
00001274  2602                     333          MOVE.L  D2,D3
00001276  0803 0003                334          BTST.L  #3,D3
0000127A  6700 058E                335          BEQ     INVALIDOP   ; we are not supporting ROXR
0000127E  4EB9 00001956            336          JSR     GET_REG_SHIFT_DATA
00001284  6000 0F02                337          BRA     PRINTROR_REG
00001288                           338  ******** DECODE MEMORY SHIFTS ********
00001288                           339  DECODE_SHIFT_MEM:
00001288  2602                     340          MOVE.L  D2,D3       ; restore D3 
0000128A  0803 0008                341          BTST.L  #8,D3
0000128E  6700 0030                342          BEQ     DECODE_LSR_MEM
00001292                           343  ******** DECODE LSL MEM ********
00001292                           344  DECODE_LSL_MEM:
00001292  0803 000A                345          BTST.L  #10,D3
00001296  6600 001E                346          BNE     DECODE_ROL_MEM
0000129A  0803 0009                347          BTST.L  #9,D3
0000129E  6700 000C                348          BEQ     DECODE_ASL_MEM
000012A2  4EB9 00001988            349          JSR     GET_MEM_SHIFT_DATA
000012A8  6000 0F00                350          BRA     PRINTLSL_MEM
000012AC                           351  ******** DECODE ASL MEM ********
000012AC                           352  DECODE_ASL_MEM:
000012AC  4EB9 00001988            353          JSR     GET_MEM_SHIFT_DATA
000012B2  6000 0F36                354          BRA     PRINTASL_MEM
000012B6                           355  ******** DECODE ROL MEM ********
000012B6                           356  DECODE_ROL_MEM:
000012B6  4EB9 00001988            357          JSR     GET_MEM_SHIFT_DATA
000012BC  6000 0F6C                358          BRA     PRINTROL_MEM
000012C0                           359  ******** DECODE LSR MEM ********
000012C0                           360  DECODE_LSR_MEM:
000012C0  0803 000A                361          BTST.L  #10,D3
000012C4  6600 001E                362          BNE     DECODE_ROR_MEM
000012C8  0803 0009                363          BTST.L  #9,D3
000012CC  6700 000C                364          BEQ     DECODE_ASR_MEM
000012D0  4EB9 00001988            365          JSR     GET_MEM_SHIFT_DATA
000012D6  6000 0EF2                366          BRA     PRINTLSR_MEM
000012DA                           367  ******** DECODE ASR MEM ********
000012DA                           368  DECODE_ASR_MEM:
000012DA  4EB9 00001988            369          JSR     GET_MEM_SHIFT_DATA
000012E0  6000 0F28                370          BRA     PRINTASR_MEM
000012E4                           371  ******** DECODE ROR MEM ********
000012E4                           372  DECODE_ROR_MEM:
000012E4  4EB9 00001988            373          JSR     GET_MEM_SHIFT_DATA
000012EA  6000 0F5E                374          BRA     PRINTROR_MEM
000012EE                           375  ******** DECODE ADDITIONS ********
000012EE                           376  DECODEADDS:
000012EE  3602                     377          MOVE.W  D2,D3
000012F0  EE4B                     378          LSR.W   #7,D3
000012F2  EA4B                     379          LSR.W   #5,D3
000012F4  0C03 000D                380          CMPI.B  #$D,D3
000012F8  6600 008C                381          BNE     DECODE_ADDQ
000012FC  3602                     382          MOVE.W  D2,D3
000012FE                           383          * Check if its ADDA * 
000012FE  EC4B                     384          LSR.W   #6,D3
00001300  0243 0003                385          ANDI.W  #$3,D3
00001304  0C43 0003                386          CMPI.W  #%011,D3
00001308  6700 004C                387          BEQ     DECODE_ADDA_AnDn
0000130C  0C43 0007                388          CMPI.W  #%111,D3
00001310  6700 0044                389          BEQ     DECODE_ADDA_AnDn
00001314                           390          * Start ADD decode *
00001314                           391          * Check if ea or An/Dn *
00001314  3602                     392          MOVE.W  D2,D3
00001316  E64B                     393          LSR.W   #3,D3
00001318  0243 0007                394          ANDI.W  #$7,D3
0000131C  0C43 0007                395          CMPI.W  #%111,D3
00001320  6700 0018                396          BEQ     DECODE_ADD_EA
00001324                           397  ******** DECODE ADD Dn,Dn ********
00001324                           398  DECODE_ADD_Dn:
00001324  4EB9 000018E8            399          JSR     GET_ADD_MODE_REG
0000132A  4EB9 0000190E            400          JSR     GET_ADD_OPMODE
00001330  4EB9 0000191C            401          JSR     GET_ADD_REG
00001336  6000 0F32                402          BRA     PRINT_ADD_Dn
0000133A                           403  ******** DECODE ADD ea,Dn/Dn,ea ********
0000133A                           404  DECODE_ADD_EA:
0000133A  4EB9 000018E8            405          JSR     GET_ADD_MODE_REG
00001340  4EB9 0000190E            406          JSR     GET_ADD_OPMODE
00001346  4EB9 0000191C            407          JSR     GET_ADD_REG
0000134C  4EB9 0000192A            408          JSR     GET_ADD_EA
00001352  6000 0F94                409          BRA     PRINT_ADD_EA
00001356                           410  *****************************
00001356                           411  ******** DECODE ADDA ********
00001356                           412  *****************************
00001356                           413  ******** DECODE ADDA.x Dn,An & An,An ********
00001356                           414  DECODE_ADDA_AnDn:
00001356  4EB9 000018E8            415          JSR     GET_ADD_MODE_REG
0000135C  4EB9 0000190E            416          JSR     GET_ADD_OPMODE
00001362  4EB9 0000191C            417          JSR     GET_ADD_REG
00001368                           418          * Check if we're dealing with Dn,An;An,An * 
00001368  0C07 0001                419          CMPI.B  #1,D7
0000136C  6F00 0FAA                420          BLE     PRINT_ADDA_DnAn
00001370                           421          * CHeck if we're dealing with effective addressing *
00001370  0C07 0007                422          CMPI.B  #%111,D7
00001374  6700 0006                423          BEQ     DECODE_ADDA_EA
00001378  6000 0FE2                424          BRA     PRINT_ADDA_INDIRECT
0000137C                           425  DECODE_ADDA_EA:
0000137C  4EB9 0000192A            426          JSR     GET_ADD_EA
00001382  6000 101C                427          BRA     PRINT_ADDA_EA
00001386                           428  DECODE_ADDQ:
00001386  3602                     429          MOVE.W  D2,D3
00001388  EE4B                     430          LSR.W   #7,D3
0000138A  EA4B                     431          LSR.W   #5,D3
0000138C  0C03 0005                432          CMPI.B  #5,D3
00001390  6600 0044                433          BNE     DECODE_SUB
00001394  3602                     434          MOVE.W  D2,D3
00001396                           435  DECODE_ADDQ_AnDn:
00001396  0803 0008                436          BTST.L  #8,D3
0000139A  6600 046E                437          BNE     INVALIDOP  ; bit #8 should be 0
0000139E  4EB9 000018E8            438          JSR     GET_ADD_MODE_REG
000013A4  4EB9 000018CA            439          JSR     GET_ADDQ_SIZE
000013AA  4EB9 000018D8            440          JSR     GET_ADDQ_DATA
000013B0                           441  
000013B0                           442          * CHeck if dealing with ea * 
000013B0  0C07 0007                443          CMPI.B  #%111,D7
000013B4  6700 0016                444          BEQ     DECODE_ADDQ_EA
000013B8  0C07 0001                445          CMPI.B  #%1,D7
000013BC                           446          * Check if invalid size *
000013BC  0C05 0003                447          CMPI.B  #%11,D5
000013C0  6700 0448                448          BEQ     INVALIDOP
000013C4                           449          * Check if dealing with An/Dn *
000013C4  6F00 1024                450          BLE     PRINT_ADDQ_AnDn
000013C8  6000 10A4                451          BRA     PRINT_ADDQ_INDIRECT
000013CC                           452  DECODE_ADDQ_EA:
000013CC  4EB9 0000192A            453          JSR     GET_ADD_EA
000013D2  6000 1058                454          BRA     PRINT_ADDQ_EA
000013D6                           455  DECODE_SUB:
000013D6  3602                     456          MOVE.W  D2,D3
000013D8  EE4B                     457          LSR.W   #7,D3
000013DA  EA4B                     458          LSR.W   #5,D3
000013DC  0C03 0009                459          CMPI.B  #9,D3
000013E0  6600 003C                460          BNE     DECODEBRANCHES
000013E4  3602                     461          MOVE.W  D2,D3
000013E6                           462  ******** DECODE SUB Dn,Dn ********
000013E6                           463  DECODE_SUB_Dn:
000013E6  4EB9 000018E8            464          JSR     GET_ADD_MODE_REG
000013EC  4EB9 0000190E            465          JSR     GET_ADD_OPMODE
000013F2  4EB9 0000191C            466          JSR     GET_ADD_REG
000013F8                           467          * check if opmode is 111 or 011 (not supporting addressing for SUB *
000013F8  0C46 0007                468          CMPI.W  #%111,D6
000013FC  6700 040C                469          BEQ     INVALIDOP
00001400  0C46 0003                470          CMPI.W  #%011,D6
00001404  6700 0404                471          BEQ     INVALIDOP
00001408                           472          * check if dealing with ea *
00001408  0C47 0007                473          CMPI.W  #%111,D7
0000140C  6700 0006                474          BEQ     DECODE_SUB_EA
00001410  6000 109E                475          BRA     PRINT_SUB_Dn
00001414                           476  ******** DECODE ADD ea,Dn/Dn,ea ********
00001414                           477  DECODE_SUB_EA:
00001414  4EB9 0000192A            478          JSR     GET_ADD_EA
0000141A  6000 10E0                479          BRA     PRINT_SUB_EA        
0000141E                           480  *****************************
0000141E                           481  ******** DECODE Bcc ********
0000141E                           482  *****************************
0000141E                           483  ******** DECODE BRA, Bcc ********
0000141E                           484  *Assume that 0110 has been found branching to this
0000141E                           485  *D2 is original, D3 is manipulated copy, D4 is Conditional(4b), d5 is displacement(8b)
0000141E                           486  DECODEBRANCHES:
0000141E  3602                     487          MOVE.W  D2,D3   *reinstate the full machine code
00001420  EE4B                     488          LSR.W   #7,D3 *0110 check probably in main method
00001422  EA4B                     489          LSR.W   #5,D3
00001424  0C03 0006                490          CMPI.B  #%0110,D3
00001428  6600 03E0                491          BNE     INVALIDOP *Or the next decoding branch
0000142C                           492          *-----------------------------------------------------------------------------
0000142C  3602                     493          MOVE.W  D2,D3   *reinstate the full machine code
0000142E  EE4B                     494          LSR.W   #7,D3
00001430  E24B                     495          LSR.W   #1,D3   *Get to the conditional bits
00001432  0243 000F                496          ANDI.W  #$0F,D3 *Mask everything else to get conditional bits
00001436  0C43 0000                497          CMPI.W  #0,D3
0000143A  6700 002A                498          BEQ     DECODE_BRA
0000143E  0C43 000D                499          CMPI.W  #%1101,D3
00001442  6700 0078                500          BEQ     DECODE_BLT
00001446  0C43 000E                501          CMPI.W  #%1110,D3
0000144A  6700 00C6                502          BEQ     DECODE_BGT
0000144E  0C43 000F                503          CMPI.W  #%1111,D3
00001452  6700 0114                504          BEQ     DECODE_BLE
00001456  0C43 000C                505          CMPI.W  #%1100,D3
0000145A  6700 0162                506          BEQ     DECODE_BGE
0000145E  0C43 0007                507          CMPI.W  #%0111,D3
00001462  6700 01B0                508          BEQ     DECODE_BEQ
00001466                           509  DECODE_BRA:
00001466  4EB9 000016E6            510          JSR     GET_DISPLACEMENT
0000146C  4EB9 0000289A            511          JSR     PRINT_PC
00001472                           512          *We know that conditional is 0000, BRA
00001472  4EB9 000016F0            513          JSR     PRINT_BRA *Print just BRA and come back
00001478  B67C 0000                514          CMP.W   #$00, D3    *Check if displacement = $00, word addressing
0000147C  6700 01EC                515          BEQ     BRANCH_WORD
00001480  B67C 00FF                516          CMP.W   #$FF, D3    *Check if displacement = $FF, long word addresing
00001484  6700 0222                517          BEQ     BRANCH_LONG
00001488                           518          *If not, two's complement and subtract from current address
00001488  4EB9 0000286E            519          JSR     PRINTDOLLAR   
0000148E  2638 000C                520          MOVE.L  PC_COUNT,D3 *Get current address
00001492  D645                     521          ADD.W  D5,D3        *Subtract D5 from current address
00001494  5443                     522          ADD.W   #2,D3
00001496  2203                     523          MOVE.L  D3,D1 *Print D3, as it is the address
00001498  143C 0010                524          MOVE.B  #16,D2
0000149C  103C 000F                525          MOVE.B  #15,D0
000014A0  4E4F                     526          TRAP    #15
000014A2  4EB9 00002862            527          JSR     PRINTNEWLINE
000014A8  4EB9 000028B6            528          JSR     CLEAR_ALL
000014AE  341A                     529          MOVE.W  (A2)+,D2
000014B0  B5F8 0004                530          CMP.L   ENADR,A2   ; keep looping until reach the end
000014B4  6D00 FC3C                531          BLT     LOOPMEM
000014B8  6000 140C                532          BRA     DONE
000014BC                           533  DECODE_BLT:
000014BC  4EB9 000016E6            534          JSR     GET_DISPLACEMENT
000014C2  4EB9 0000289A            535          JSR     PRINT_PC
000014C8                           536          *We know that conditional is 1101, BLT
000014C8  4EB9 000016FC            537          JSR     PRINT_BLT *Print just BLT and come back
000014CE  B67C 0000                538          CMP.W   #$00, D3    *Check if displacement = $00, word addressing
000014D2  6700 0196                539          BEQ     BRANCH_WORD
000014D6  B67C 00FF                540          CMP.W   #$FF, D3    *Check if displacement = $FF, long word addresing
000014DA  6700 01CC                541          BEQ     BRANCH_LONG
000014DE                           542          *If not, two's complement and subtract from current address
000014DE  4EB9 0000286E            543          JSR     PRINTDOLLAR   
000014E4  2638 000C                544          MOVE.L  PC_COUNT,D3 *Get current address
000014E8  D645                     545          ADD.W  D5,D3        *Subtract D5 from current address
000014EA  5443                     546          ADD.W   #2,D3
000014EC  2203                     547          MOVE.L  D3,D1 *Print D3, as it is the address
000014EE  143C 0010                548          MOVE.B  #16,D2
000014F2  103C 000F                549          MOVE.B  #15,D0
000014F6  4E4F                     550          TRAP    #15
000014F8  4EB9 00002862            551          JSR     PRINTNEWLINE
000014FE  4EB9 000028B6            552          JSR     CLEAR_ALL
00001504  341A                     553          MOVE.W  (A2)+,D2
00001506  B5F8 0004                554          CMP.L   ENADR,A2   ; keep looping until reach the end
0000150A  6D00 FBE6                555          BLT     LOOPMEM
0000150E  6000 13B6                556          BRA     DONE
00001512                           557  DECODE_BGT:
00001512  4EB9 000016E6            558          JSR     GET_DISPLACEMENT
00001518  4EB9 0000289A            559          JSR     PRINT_PC
0000151E                           560          *We know that conditional is 1110, BGT
0000151E  4EB9 00001708            561          JSR     PRINT_BGT *Print just BRA and come back
00001524  B67C 0000                562          CMP.W   #$00, D3    *Check if displacement = $00, word addressing
00001528  6700 0140                563          BEQ     BRANCH_WORD
0000152C  B67C 00FF                564          CMP.W   #$FF, D3    *Check if displacement = $FF, long word addresing
00001530  6700 0176                565          BEQ     BRANCH_LONG
00001534                           566          *If not, two's complement and subtract from current address
00001534  4EB9 0000286E            567          JSR     PRINTDOLLAR   
0000153A  2638 000C                568          MOVE.L  PC_COUNT,D3 *Get current address
0000153E  D645                     569          ADD.W  D5,D3        *Subtract D5 from current address
00001540  5443                     570          ADD.W   #2,D3
00001542  2203                     571          MOVE.L  D3,D1 *Print D3, as it is the address
00001544  143C 0010                572          MOVE.B  #16,D2
00001548  103C 000F                573          MOVE.B  #15,D0
0000154C  4E4F                     574          TRAP    #15
0000154E  4EB9 00002862            575          JSR     PRINTNEWLINE
00001554  4EB9 000028B6            576          JSR     CLEAR_ALL
0000155A  341A                     577          MOVE.W  (A2)+,D2
0000155C  B5F8 0004                578          CMP.L   ENADR,A2   ; keep looping until reach the end
00001560  6D00 FB90                579          BLT     LOOPMEM
00001564  6000 1360                580          BRA     DONE
00001568                           581  DECODE_BLE:
00001568  4EB9 000016E6            582          JSR     GET_DISPLACEMENT
0000156E  4EB9 0000289A            583          JSR     PRINT_PC
00001574                           584          *We know that conditional is 1111, BLE
00001574  4EB9 00001714            585          JSR     PRINT_BLE *Print just BLE and come back
0000157A  B67C 0000                586          CMP.W   #$00, D3    *Check if displacement = $00, word addressing
0000157E  6700 00EA                587          BEQ     BRANCH_WORD
00001582  B67C 00FF                588          CMP.W   #$FF, D3    *Check if displacement = $FF, long word addresing
00001586  6700 0120                589          BEQ     BRANCH_LONG
0000158A                           590          *If not, two's complement and subtract from current address
0000158A  4EB9 0000286E            591          JSR     PRINTDOLLAR   
00001590  2638 000C                592          MOVE.L  PC_COUNT,D3 *Get current address
00001594  D645                     593          ADD.W  D5,D3        *Subtract D5 from current address
00001596  5443                     594          ADD.W   #2,D3
00001598  2203                     595          MOVE.L  D3,D1 *Print D3, as it is the address
0000159A  143C 0010                596          MOVE.B  #16,D2
0000159E  103C 000F                597          MOVE.B  #15,D0
000015A2  4E4F                     598          TRAP    #15
000015A4  4EB9 00002862            599          JSR     PRINTNEWLINE
000015AA  4EB9 000028B6            600          JSR     CLEAR_ALL
000015B0  341A                     601          MOVE.W  (A2)+,D2
000015B2  B5F8 0004                602          CMP.L   ENADR,A2   ; keep looping until reach the end
000015B6  6D00 FB3A                603          BLT     LOOPMEM
000015BA  6000 130A                604          BRA     DONE
000015BE                           605  DECODE_BGE:
000015BE  4EB9 000016E6            606          JSR     GET_DISPLACEMENT
000015C4  4EB9 0000289A            607          JSR     PRINT_PC
000015CA                           608          *We know that conditional is 1100, BGE
000015CA  4EB9 00001720            609          JSR     PRINT_BGE *Print just BGE and come back
000015D0  B67C 0000                610          CMP.W   #$00, D3    *Check if displacement = $00, word addressing
000015D4  6700 0094                611          BEQ     BRANCH_WORD
000015D8  B67C 00FF                612          CMP.W   #$FF, D3    *Check if displacement = $FF, long word addresing
000015DC  6700 00CA                613          BEQ     BRANCH_LONG
000015E0                           614          *If not, two's complement and subtract from current address 
000015E0  4EB9 0000286E            615          JSR     PRINTDOLLAR  
000015E6  2638 000C                616          MOVE.L  PC_COUNT,D3 *Get current address
000015EA  D645                     617          ADD.W  D5,D3        *Subtract D5 from current address
000015EC  5443                     618          ADD.W   #2,D3
000015EE  2203                     619          MOVE.L  D3,D1 *Print D3, as it is the address
000015F0  143C 0010                620          MOVE.B  #16,D2
000015F4  103C 000F                621          MOVE.B  #15,D0
000015F8  4E4F                     622          TRAP    #15
000015FA  4EB9 00002862            623          JSR     PRINTNEWLINE
00001600  4EB9 000028B6            624          JSR     CLEAR_ALL
00001606  341A                     625          MOVE.W  (A2)+,D2
00001608  B5F8 0004                626          CMP.L   ENADR,A2   ; keep looping until reach the end
0000160C  6D00 FAE4                627          BLT     LOOPMEM
00001610  6000 12B4                628          BRA     DONE
00001614                           629  DECODE_BEQ:  
00001614  4EB9 000016E6            630          JSR     GET_DISPLACEMENT
0000161A  4EB9 0000289A            631          JSR     PRINT_PC
00001620                           632          *We know that conditional is 0111, BEQ
00001620  4EB9 0000172C            633          JSR     PRINT_BEQ *Print just BEQ and come back
00001626  B67C 0000                634          CMP.W   #$00, D3    *Check if displacement = $00, word addressing
0000162A  6700 003E                635          BEQ     BRANCH_WORD
0000162E  B67C 00FF                636          CMP.W   #$FF, D3    *Check if displacement = $FF, long word addresing
00001632  6700 0074                637          BEQ     BRANCH_LONG
00001636                           638          *If not, two's complement and subtract from current address
00001636  4EB9 0000286E            639          JSR     PRINTDOLLAR   
0000163C  2638 000C                640          MOVE.L  PC_COUNT,D3 *Get current address
00001640  D645                     641          ADD.W  D5,D3        *Subtract D5 from current address
00001642  5443                     642          ADD.W   #2,D3
00001644  2203                     643          MOVE.L  D3,D1 *Print D3, as it is the address
00001646  143C 0010                644          MOVE.B  #16,D2
0000164A  103C 000F                645          MOVE.B  #15,D0
0000164E  4E4F                     646          TRAP    #15
00001650  4EB9 00002862            647          JSR     PRINTNEWLINE
00001656  4EB9 000028B6            648          JSR     CLEAR_ALL
0000165C  341A                     649          MOVE.W  (A2)+,D2
0000165E  B5F8 0004                650          CMP.L   ENADR,A2   ; keep looping until reach the end
00001662  6D00 FA8E                651          BLT     LOOPMEM
00001666  6000 125E                652          BRA     DONE
0000166A                           653  BRANCH_WORD:
0000166A  1E3C 0000                654          MOVE.B  #0,D7 *(Set 000 for word)
0000166E  4EB9 000019CE            655          JSR     DETERMINE_ADDR_MODE *Get word address
00001674  4EB9 0000286E            656          JSR     PRINTDOLLAR
0000167A                           657  
0000167A  2638 000C                658          MOVE.L  PC_COUNT,D3 *Get current address
0000167E                           659          *Displacement is stored in D6
0000167E  D646                     660          ADD.W   D6,D3
00001680  5443                     661          ADD.W   #2,D3
00001682  2203                     662          MOVE.L  D3,D1 *Print D3, as it is the address
00001684                           663  
00001684  143C 0010                664          MOVE.B  #16,D2
00001688  103C 000F                665          MOVE.B  #15,D0
0000168C  4E4F                     666          TRAP    #15
0000168E  4EB9 00002862            667          JSR     PRINTNEWLINE
00001694  4EB9 000028B6            668          JSR     CLEAR_ALL
0000169A  341A                     669          MOVE.W  (A2)+,D2
0000169C  B5F8 0004                670          CMP.L   ENADR,A2   ; keep looping until reach the end
000016A0  6D00 FA50                671          BLT     LOOPMEM
000016A4  6000 1220                672          BRA     DONE
000016A8                           673  BRANCH_LONG:
000016A8  1E3C 0001                674          MOVE.B  #1,D7 *(Set 001 for long)
000016AC  4EB9 000019CE            675          JSR     DETERMINE_ADDR_MODE *Get long address
000016B2  4EB9 0000286E            676          JSR     PRINTDOLLAR
000016B8                           677  
000016B8  2638 000C                678          MOVE.L  PC_COUNT,D3 *Get current address
000016BC                           679          *Displacement is stored in D6
000016BC  D686                     680          ADD.L   D6,D3
000016BE  5483                     681          ADD.L   #2,D3
000016C0  2203                     682          MOVE.L  D3,D1 *Print D3, as it is the address
000016C2                           683  
000016C2  143C 0010                684          MOVE.B  #16,D2
000016C6  103C 000F                685          MOVE.B  #15,D0
000016CA  4E4F                     686          TRAP    #15
000016CC  4EB9 00002862            687          JSR     PRINTNEWLINE
000016D2  4EB9 000028B6            688          JSR     CLEAR_ALL
000016D8  341A                     689          MOVE.W  (A2)+,D2
000016DA  B5F8 0004                690          CMP.L   ENADR,A2   ; keep looping until reach the end
000016DE  6D00 FA12                691          BLT     LOOPMEM
000016E2  6000 11E2                692          BRA     DONE  
000016E6                           693  GET_DISPLACEMENT:
000016E6  2602                     694          MOVE.L  D2,D3   *Get new copy
000016E8  0243 00FF                695          ANDI.W  #$FF,D3 *Mask first 8
000016EC  3A03                     696          MOVE.W  D3,D5   *Store displacement into d5
000016EE  4E75                     697          RTS
000016F0                           698  PRINT_BRA: *Prints just BRA
000016F0  43F8 0145                699          LEA     DISBRA,A1
000016F4  103C 000E                700          MOVE.B  #14,D0
000016F8  4E4F                     701          TRAP    #15
000016FA  4E75                     702          RTS
000016FC                           703  PRINT_BLT:
000016FC  43F8 014B                704          LEA     DISBLT,A1
00001700  103C 000E                705          MOVE.B  #14,D0
00001704  4E4F                     706          TRAP    #15
00001706  4E75                     707          RTS
00001708                           708  PRINT_BGT:
00001708  43F8 0151                709          LEA     DISBGT,A1
0000170C  103C 000E                710          MOVE.B  #14,D0
00001710  4E4F                     711          TRAP    #15
00001712  4E75                     712          RTS
00001714                           713  PRINT_BLE:
00001714  43F8 0157                714          LEA     DISBLE,A1
00001718  103C 000E                715          MOVE.B  #14,D0
0000171C  4E4F                     716          TRAP    #15
0000171E  4E75                     717          RTS
00001720                           718  PRINT_BGE:
00001720  43F8 015D                719          LEA     DISBGE,A1
00001724  103C 000E                720          MOVE.B  #14,D0
00001728  4E4F                     721          TRAP    #15
0000172A  4E75                     722          RTS
0000172C                           723  PRINT_BEQ:
0000172C  43F8 0163                724          LEA     DISBEQ,A1
00001730  103C 000E                725          MOVE.B  #14,D0
00001734  4E4F                     726          TRAP    #15
00001736  4E75                     727          RTS
00001738                           728          
00001738                           729  *****************************
00001738                           730  ******** DECODE MOVE ********
00001738                           731  *****************************
00001738                           732  DECODE_MOVE:
00001738  3602                     733          MOVE.W  D2,D3
0000173A  EE4B                     734          LSR.W   #7,D3
0000173C  E84B                     735          LSR.W   #4,D3
0000173E  0C43 0009                736          CMPI.W  #%01001,D3
00001742  6700 0076                737          BEQ     DECODE_MOVEM
00001746                           738          
00001746  3602                     739          MOVE.W  D2,D3
00001748  EE4B                     740          LSR.W   #7,D3
0000174A  EA4B                     741          LSR.W   #5,D3
0000174C  0C43 0007                742          CMPI.W  #%0111,D3
00001750  6700 0054                743          BEQ     DECODE_MOVEQ
00001754                           744          
00001754  3602                     745          MOVE.W  D2,D3
00001756  EE4B                     746          LSR.W   #7,D3
00001758  EE4B                     747          LSR.W   #7,D3
0000175A  0C03 0000                748          CMPI.B  #%00,D3
0000175E  6600 00AA                749          BNE     INVALIDOP
00001762                           750          
00001762  3602                     751          MOVE.W  D2,D3
00001764  EE4B                     752          LSR.W   #7,D3
00001766  EA4B                     753          LSR.W   #5,D3
00001768  0243 0003                754          ANDI.W  #%0011,D3
0000176C  0C03 0000                755          CMPI.B  #%00,D3
00001770  6700 0098                756          BEQ     INVALIDOP
00001774                           757          
00001774  3602                     758          MOVE.W  D2,D3
00001776  EE4B                     759          LSR.W   #7,D3
00001778  0243 0007                760          ANDI.W  #$7,D3
0000177C  0C43 0001                761          CMPI.W  #%001,D3
00001780  6700 0002                762          BEQ     DECODE_MOVEA
00001784                           763          
00001784                           764          
00001784                           765  DECODE_MOVEA:
00001784  4EB9 000017D0            766          JSR     GET_MOVE_SIZE
0000178A  0C07 0001                767          CMPI.B  #%01,D7
0000178E  6700 007A                768          BEQ     INVALIDOP *MOVEA does not support bytes
00001792                           769  
00001792  3602                     770          MOVE.W  D2,D3
00001794  EE4B                     771          LSR.W   #7,D3
00001796  0243 0007                772          ANDI.W  #$7,D3
0000179A  0C43 0001                773          CMPI.W  #%001,D3
0000179E  3C03                     774          MOVE.W  D3,D6 *getting destination register
000017A0                           775          
000017A0  4EB9 000017F6            776          JSR     GET_MOVE_SOURCE
000017A6                           777          
000017A6                           778  DECODE_MOVEQ:
000017A6  3602                     779          MOVE.W  D2,D3
000017A8  EE4B                     780          LSR.W   #7,D3
000017AA  E24B                     781          LSR.W   #1,D3
000017AC  0243 0001                782          ANDI.W  #$1,D3
000017B0  0C03 0000                783          CMPI.B  #%0,D3
000017B4  6600 0054                784          BNE     INVALIDOP
000017B8  3602                     785          MOVE.W  D2,D3
000017BA                           786          
000017BA                           787  DECODE_MOVEM:
000017BA  6000 004E                788          BRA     INVALIDOP
000017BE  3602                     789          MOVE.W  D2,D3
000017C0  EE4B                     790          LSR.W   #7,D3
000017C2  0243 0007                791          ANDI.W  #%111,D3
000017C6  0C43 0001                792          CMPI.W  #%001,D3
000017CA  6600 003E                793          BNE     INVALIDOP
000017CE  3602                     794          MOVE.W  D2,D3
000017D0                           795          
000017D0                           796  *******MOVE FUNCTIONS*******
000017D0                           797  GET_MOVE_SIZE:
000017D0  3602                     798          MOVE.W  D2,D3
000017D2  EE4B                     799          LSR.W   #7,D3
000017D4  EA4B                     800          LSR.W   #5,D3
000017D6  0243 0003                801          ANDI.W  #%0011,D3
000017DA  1E03                     802          MOVE.B  D3,D7 *storing size in D7
000017DC  4E75                     803          RTS
000017DE                           804  GET_MOVE_DEST:
000017DE  3602                     805          MOVE.W  D2,D3
000017E0  EC4B                     806          LSR.W   #6,D3
000017E2  E64B                     807          LSR.W   #3,D3
000017E4  0243 0007                808          ANDI.W  #$7,D3
000017E8  3803                     809          MOVE.W  D3,D4 *storing destination register in D4
000017EA  3602                     810          MOVE.W  D2,D3
000017EC  EC4B                     811          LSR.W   #6,D3
000017EE  0243 0007                812          ANDI.W  #$7,D3
000017F2  3A03                     813          MOVE.W  D3,D5 *storing destination mode in D5
000017F4  4E75                     814          RTS
000017F6                           815  GET_MOVE_SOURCE:
000017F6  3602                     816          MOVE.W  D2,D3
000017F8  E64B                     817          LSR.W   #3,D3
000017FA  0243 0007                818          ANDI.W  #$7,D3
000017FE  3A03                     819          MOVE.W  D3,D5 *storing source mode in D5
00001800  3602                     820          MOVE.W  D2,D3
00001802  0243 0007                821          ANDI.W  #$7,D3
00001806  3803                     822          MOVE.W  D3,D4 *storing source register in D4
00001808  4E75                     823          RTS
0000180A                           824  ******** INVALID OUTPUT ********
0000180A                           825  * THIS SHOULD ALWAYS BE THE LAST DECODE BRANCH
0000180A                           826  * THAT WAY AFTER ATTEMPTING ALL ADDRESSING MODE AND FAILING
0000180A                           827  * IT WILL FALLBACK TO THIS BRANCH
0000180A                           828  INVALIDOP:                 ; when an opcode is invalid, print the address, 'data', and data in memory
0000180A  220A                     829          MOVE.L  A2,D1      ; load the current address to print
0000180C  143C 0010                830          MOVE.B  #16,D2
00001810  103C 000F                831          MOVE.B  #15,D0
00001814  4E4F                     832          TRAP    #15
00001816                           833  
00001816  43F8 01A8                834          LEA     DISDATA,A1 ; load 'DATA' string to print
0000181A  103C 000E                835          MOVE.B  #14,D0
0000181E  4E4F                     836          TRAP    #15
00001820                           837  
00001820  3212                     838          MOVE.W  (A2),D1    ; load data in A2 to print
00001822  143C 0010                839          MOVE.B  #16,D2
00001826  103C 000F                840          MOVE.B  #15,D0
0000182A  4E4F                     841          TRAP    #15
0000182C                           842  
0000182C  43F8 00E8                843          LEA     NEWLINE,A1 ; print a new line for reading purposes
00001830  103C 000E                844          MOVE.B  #14,D0
00001834  4E4F                     845          TRAP    #15
00001836                           846  
00001836  4EB9 000028B6            847          JSR     CLEAR_ALL
0000183C  341A                     848          MOVE.W  (A2)+,D2   ; increment the address
0000183E  B5F8 0004                849          CMP.L   ENADR,A2   ; keep looping until reach the end
00001842  6D00 F8AE                850          BLT     LOOPMEM
00001846  6000 107E                851          BRA     DONE
0000184A                           852  
0000184A                           853  ******** NOT LOGIC FUNCTIONS ***********
0000184A                           854  * Returns:
0000184A                           855  *   D7 - EA Register
0000184A                           856  *   D6 - EA Mode
0000184A                           857  *   D5 - Contains size
0000184A                           858  GET_NOT_LOGIC_DATA:
0000184A  2602                     859          MOVE.L  D2,D3
0000184C  0203 0007                860          ANDI.B  #$7,D3
00001850  1E03                     861          MOVE.B  D3,D7      ; D7 will contain the EA register
00001852  2602                     862          MOVE.L  D2,D3
00001854  E64B                     863          LSR.W   #3,D3
00001856  0203 0007                864          ANDI.B  #$7,D3
0000185A  1C03                     865          MOVE.B  D3,D6      ; D6 will contain 000 because its for data register
0000185C  2602                     866          MOVE.L  D2,D3
0000185E  EC4B                     867          LSR.W   #6,D3
00001860  0203 0007                868          ANDI.B  #$7,D3
00001864  1A03                     869          MOVE.B  D3,D5      ; D5 will contain the size, 0 for B, 1 for word, 2 for long      
00001866  4E75                     870          RTS
00001868                           871   
00001868                           872  ******** JSR LOGIC FUNCTIONS ***********
00001868                           873  * Returns:
00001868                           874  *   D7 - EA Register
00001868                           875  *   D6 - EA Mode     
00001868                           876  GET_JSR_LOGIC_DATA:
00001868  2602                     877          MOVE.L  D2,D3
0000186A  0203 0007                878          ANDI.B  #$7,D3
0000186E  1E03                     879          MOVE.B  D3,D7      ; D7 will contain the EA register
00001870  2602                     880          MOVE.L  D2,D3
00001872  E64B                     881          LSR.W   #3,D3
00001874  0203 0007                882          ANDI.B  #$7,D3
00001878  1C03                     883          MOVE.B  D3,D6      ; D6 will contain the EA mode
0000187A  4E75                     884          RTS
0000187C                           885  
0000187C                           886  ******** LEA LOGIC FUNCTIONS ***********
0000187C                           887  * Returns:
0000187C                           888  *   D7 - EA Register
0000187C                           889  *   D6 - EA Mode   
0000187C                           890  *   D5 - Address Register         
0000187C                           891  GET_LEA_LOGIC_DATA:
0000187C  2602                     892          MOVE.L  D2,D3
0000187E  0203 0007                893          ANDI.B  #$7,D3
00001882  1E03                     894          MOVE.B  D3,D7       ; D7 will contain the EA register
00001884  2602                     895          MOVE.L  D2,D3
00001886  E64B                     896          LSR.W   #3,D3
00001888  0203 0007                897          ANDI.B  #$7,D3
0000188C  1C03                     898          MOVE.B  D3,D6       ; D6 will contain the EA mode
0000188E  2602                     899          MOVE.L  D2,D3
00001890  EA4B                     900          LSR.W   #5,D3
00001892  E84B                     901          LSR.W   #4,D3
00001894  0203 0007                902          ANDI.B  #$7,D3
00001898  1A03                     903          MOVE.B  D3,D5       ; D5 will contain the Address Register
0000189A  2602                     904          MOVE.L  D2,D3
0000189C  4E75                     905          RTS
0000189E                           906          
0000189E                           907  ******** AND LOGIC FUNCTIONS ***********
0000189E                           908  * Returns:
0000189E                           909  *   D7 - EA Register
0000189E                           910  *   D6 - EA Mode   
0000189E                           911  *   D5 - Opmode
0000189E                           912  *   D4 - Register
0000189E                           913  GET_AND_DATA:
0000189E  2602                     914          MOVE.L  D2,D3
000018A0  0203 0007                915          ANDI.B  #$7,D3
000018A4  1E03                     916          MOVE.B  D3,D7       ; D7 will contain the EA register
000018A6  2602                     917          MOVE.L  D2,D3
000018A8  E64B                     918          LSR.W   #3,D3
000018AA  0203 0007                919          ANDI.B  #$7,D3
000018AE  1C03                     920          MOVE.B  D3,D6       ; D6 will contain the EA register
000018B0  2602                     921          MOVE.L  D2,D3
000018B2  EC4B                     922          LSR.W   #6,D3
000018B4  0203 0007                923          ANDI.B  #$7,D3
000018B8  1A03                     924          MOVE.B  D3,D5       ; D5 will contain the opmode
000018BA  2602                     925          MOVE.L  D2,D3
000018BC  E84B                     926          LSR.W   #4,D3
000018BE  EA4B                     927          LSR.W   #5,D3
000018C0  0203 0007                928          ANDI.B  #$7,D3
000018C4  1803                     929          MOVE.B  D3,D4       ; D4 will contain the register number
000018C6  2602                     930          MOVE.L  D2,D3
000018C8  4E75                     931          RTS
000018CA                           932          
000018CA                           933          
000018CA                           934  ******** ADDQ FUNCTIONS ********
000018CA                           935  * Returns:
000018CA                           936  *   D5 - contains size operation
000018CA                           937  GET_ADDQ_SIZE:
000018CA  3602                     938          MOVE.W  D2,D3
000018CC  EC4B                     939          LSR.W   #6,D3
000018CE  0243 0003                940          ANDI.W  #%11,D3    ; gets the size operation
000018D2  1A03                     941          MOVE.B  D3,D5
000018D4  3602                     942          MOVE.W  D2,D3
000018D6  4E75                     943          RTS
000018D8                           944  * Returns:
000018D8                           945  *   D6 - contains data
000018D8                           946  GET_ADDQ_DATA:
000018D8  3602                     947          MOVE.W  D2,D3
000018DA  EC4B                     948          LSR.W   #6,D3
000018DC  E64B                     949          LSR.W   #3,D3
000018DE  0243 0007                950          ANDI.W  #%111,D3   ; gets the data 
000018E2  1C03                     951          MOVE.B  D3,D6
000018E4  3602                     952          MOVE.W  D2,D3
000018E6  4E75                     953          RTS
000018E8                           954  ******** ADD FUNCTIONS ********
000018E8                           955  * Returns:
000018E8                           956  *   D7 - contains the register mode
000018E8                           957  *   D4 - contains the register number
000018E8                           958  GET_ADD_MODE_REG:
000018E8  3602                     959          MOVE.W  D2,D3
000018EA  E64B                     960          LSR.W   #3,D3
000018EC  0243 0007                961          ANDI.W  #$7,D3     ; Gets the mode
000018F0  0C43 0005                962          CMPI.W  #%101,D3
000018F4  6700 FF14                963          BEQ     INVALIDOP
000018F8  0C43 0006                964          CMPI.W  #%110,D3   ; we are not supporting this addressing modes
000018FC  6700 FF0C                965          BEQ     INVALIDOP 
00001900  3E03                     966          MOVE.W  D3,D7
00001902  3602                     967          MOVE.W  D2,D3
00001904  0243 0007                968          ANDI.W  #$7,D3     ; gets the register number
00001908  3803                     969          MOVE.W  D3,D4
0000190A  3602                     970          MOVE.W  D2,D3
0000190C  4E75                     971          RTS
0000190E                           972  * Returns:
0000190E                           973  *   D6 - contains opmode
0000190E                           974  GET_ADD_OPMODE:
0000190E  3602                     975          MOVE.W  D2,D3
00001910  EC4B                     976          LSR.W   #6,D3
00001912  0243 0007                977          ANDI.W  #$7,D3
00001916  3C03                     978          MOVE.W  D3,D6
00001918  3602                     979          MOVE.W  D2,D3
0000191A  4E75                     980          RTS
0000191C                           981  * Returns:
0000191C                           982  *   D5 - contains register
0000191C                           983  GET_ADD_REG:
0000191C  3602                     984          MOVE.W  D2,D3
0000191E  EA4B                     985          LSR.W   #5,D3
00001920  E84B                     986          LSR.W   #4,D3
00001922  0243 0007                987          ANDI.W  #$7,D3
00001926  3A03                     988          MOVE.W  D3,D5
00001928  4E75                     989          RTS
0000192A                           990  * Returns:
0000192A                           991  *   D7 - contains ea 
0000192A                           992  GET_ADD_EA:
0000192A  B83C 0000                993          CMP.B   #0,D4
0000192E  6700 0016                994          BEQ     ADD_WORD_ADDR
00001932  B83C 0001                995          CMP.B   #1,D4
00001936  6700 0016                996          BEQ     ADD_LONG_ADDR
0000193A  0C04 0004                997          CMPI.B  #%100,D4
0000193E  6700 0006                998          BEQ     ADD_WORD_ADDR
00001942  6000 FEC6                999          BRA     INVALIDOP
00001946                          1000  ADD_WORD_ADDR:
00001946                          1001          * Increment PC Counter
00001946  0C5A 0000               1002          CMP.W   #0,(A2)+   ; instructions are word size
0000194A  3E1A                    1003          MOVE.W  (A2)+,D7    ; D6 will contain the address
0000194C  4E75                    1004          RTS
0000194E                          1005  ADD_LONG_ADDR:
0000194E                          1006          * Increment PC Counter
0000194E  0C5A 0000               1007          CMP.W   #0,(A2)+   ; instructions are word size
00001952  2E1A                    1008          MOVE.L  (A2)+,D7    ; D6 will contain the address
00001954  4E75                    1009          RTS
00001956                          1010  
00001956                          1011  ******** COMMON SHIFT FUNCTIONS ********
00001956                          1012  * Returns:
00001956                          1013  *   D7 - Register
00001956                          1014  *   D6 - 1 or 0, determines if count or data register
00001956                          1015  *   D5 - Contains size of operation
00001956                          1016  *   D4 - Contains count or register as determined by D6
00001956                          1017  GET_REG_SHIFT_DATA:
00001956  2602                    1018          MOVE.L  D2,D3
00001958  0203 0007               1019          ANDI.B  #$7,D3     ; clear the 4th bit
0000195C  1E03                    1020          MOVE.B  D3,D7      ; D7 will contain the register
0000195E  2602                    1021          MOVE.L  D2,D3      ; reset D3
00001960  EA4B                    1022          LSR.W   #5,D3      ; test the i/r bit
00001962  0203 0001               1023          ANDI.B  #$1,D3
00001966  1C03                    1024          MOVE.B  D3,D6      ; D6 will contain if count or Dn
00001968  2602                    1025          MOVE.L  D2,D3
0000196A  EC4B                    1026          LSR.W   #6,D3
0000196C  0243 0003               1027          ANDI.W  #$3,D3
00001970  1A03                    1028          MOVE.B  D3,D5      ; D5 will contain size operation
00001972  0C05 0003               1029          CMPI.B  #%11,D5
00001976  6700 FE92               1030          BEQ     INVALIDOP
0000197A  2602                    1031          MOVE.L  D2,D3
0000197C  EA4B                    1032          LSR.W   #5,D3
0000197E  E84B                    1033          LSR.W   #4,D3
00001980  0243 0007               1034          ANDI.W  #$7,D3
00001984  1803                    1035          MOVE.B  D3,D4      ; D4 will contain count/reg
00001986  4E75                    1036          RTS
00001988                          1037  * Returns:
00001988                          1038  *   D7 - Contains register (word or long addressing)
00001988                          1039  *   D6 - Contains the address 
00001988                          1040  GET_MEM_SHIFT_DATA:
00001988  0803 000B               1041          BTST.L  #11,D3     ; the 11th bit must always be 0 for shifts
0000198C  6600 FE7C               1042          BNE     INVALIDOP
00001990  0283 00000007           1043          ANDI.L  #$7,D3
00001996  1E03                    1044          MOVE.B  D3,D7      ; D7 will have register
00001998  2602                    1045          MOVE.L  D2,D3
0000199A  4EB9 000019B2           1046          JSR     IS_MEM_INDIRECT
000019A0  0C38 00FF 0010          1047          CMPI.B  #$FF,IS_IN_MEM_BOOL
000019A6  6700 0EF0               1048          BEQ     RETURN  
000019AA  4EB9 000019CE           1049          JSR     DETERMINE_ADDR_MODE
000019B0  4E75                    1050          RTS
000019B2                          1051          
000019B2                          1052  IS_MEM_INDIRECT:
000019B2  3602                    1053          MOVE.W  D2,D3
000019B4  E64B                    1054          LSR.W   #3,D3
000019B6  0243 0007               1055          ANDI.W  #%111,D3
000019BA  0C43 0007               1056          CMPI.W  #%111,D3
000019BE  6700 0ED8               1057          BEQ     RETURN
000019C2  1807                    1058          MOVE.B  D7,D4
000019C4  1E03                    1059          MOVE.B  D3,D7
000019C6  11FC 00FF 0010          1060          MOVE.B #$FF,IS_IN_MEM_BOOL
000019CC  4E75                    1061          RTS
000019CE                          1062          
000019CE                          1063  ******** DETERMINING ADDRESS MODES ********
000019CE                          1064  * D7 should contain register.
000019CE                          1065  * 000 for Word addressing
000019CE                          1066  * 001 for Long addressing
000019CE                          1067  DETERMINE_ADDR_MODE:
000019CE  BE3C 0000               1068          CMP.B   #0,D7
000019D2  6700 000E               1069          BEQ     WORD_ADDR
000019D6  BE3C 0001               1070          CMP.B   #1,D7
000019DA  6700 000E               1071          BEQ     LONG_ADDR
000019DE  6000 FE2A               1072          BRA     INVALIDOP
000019E2                          1073  WORD_ADDR:
000019E2                          1074          * Increment PC Counter
000019E2  0C5A 0000               1075          CMP.W   #0,(A2)+   ; instructions are word size
000019E6  3C1A                    1076          MOVE.W  (A2)+,D6    ; D6 will contain the address
000019E8  4E75                    1077          RTS
000019EA                          1078  LONG_ADDR:
000019EA                          1079          * Increment PC Counter
000019EA  0C5A 0000               1080          CMP.W   #0,(A2)+   ; instructions are word size
000019EE  2C1A                    1081          MOVE.L  (A2)+,D6    ; D6 will contain the address
000019F0  4E75                    1082          RTS
000019F2                          1083  ************************************        
000019F2                          1084  ******** PRINT INSTRUCTIONS ********
000019F2                          1085  ************************************
000019F2                          1086  PRINTNOP:
000019F2  4EB9 0000289A           1087          JSR     PRINT_PC
000019F8  43F8 00FC               1088          LEA     DISNOP,A1  ; display NOP string
000019FC  103C 000E               1089          MOVE.B  #14,D0     
00001A00  4E4F                    1090          TRAP    #15
00001A02  4EB9 00002862           1091          JSR     PRINTNEWLINE
00001A08  4EB9 000028B6           1092          JSR     CLEAR_ALL
00001A0E  341A                    1093          MOVE.W  (A2)+,D2    ; address should be incremented at the end of each print
00001A10  B5F8 0004               1094          CMP.L   ENADR,A2   ; keep looping until reach the end
00001A14  6D00 F6DC               1095          BLT     LOOPMEM
00001A18  6000 0EAC               1096          BRA     DONE
00001A1C                          1097  
00001A1C                          1098  PRINTRTS:
00001A1C  4EB9 0000289A           1099          JSR     PRINT_PC
00001A22  43F8 0100               1100          LEA     DISRTS,A1   ; display RTS string
00001A26  103C 000E               1101          MOVE.B  #14,D0
00001A2A  4E4F                    1102          TRAP    #15
00001A2C  4EB9 00002862           1103          JSR     PRINTNEWLINE
00001A32  4EB9 000028B6           1104          JSR     CLEAR_ALL
00001A38  341A                    1105          MOVE.W  (A2)+,D2    ; address should be incremented at the end of each print
00001A3A  B5F8 0004               1106          CMP.L   ENADR,A2    ; keep looping until reach the end address
00001A3E  6D00 F6B2               1107          BLT     LOOPMEM
00001A42  6000 0E82               1108          BRA     DONE            
00001A46                          1109  
00001A46                          1110  ******** PRINT SHIFT INSTRUCTIONS ********
00001A46                          1111  ******** COMMON SHIFT FUNCS ********
00001A46                          1112  SHIFT_IN1:
00001A46  0C06 0000               1113          CMPI.B  #0,D6
00001A4A  6700 000A               1114          BEQ     PRINT_SHIFT_REG_CONT
00001A4E  4EB9 000026B0           1115          JSR     PRINTDn
00001A54  4E75                    1116          RTS
00001A56                          1117  PRINT_SHIFT_REG_CONT:
00001A56  43F8 00ED               1118          LEA     DISPOUND,A1
00001A5A  103C 000E               1119          MOVE.B  #14,D0
00001A5E  4E4F                    1120          TRAP    #15
00001A60                          1121  
00001A60  4281                    1122          CLR.L   D1
00001A62  1204                    1123          MOVE.B  D4,D1
00001A64  143C 000A               1124          MOVE.B  #10,D2
00001A68  103C 000F               1125          MOVE.B  #15,D0
00001A6C  4E4F                    1126          TRAP    #15
00001A6E  4E75                    1127          RTS
00001A70                          1128  PRINT_REG_SHIFT_INFO:
00001A70  4EB9 00002672           1129          JSR     PRINTSIZEOP
00001A76  4EB8 1A46               1130          JSR     SHIFT_IN1
00001A7A  4EB9 00002856           1131          JSR     PRINTCOMMA
00001A80  1807                    1132          MOVE.B  D7,D4
00001A82  4EB9 000026B0           1133          JSR     PRINTDn
00001A88  4EB9 00002862           1134          JSR     PRINTNEWLINE
00001A8E  4EB9 000028B6           1135          JSR     CLEAR_ALL
00001A94  4E75                    1136          RTS
00001A96                          1137  PRINT_MEM_SHIFT_INFO:
00001A96  1A3C 0001               1138          MOVE.B  #1,D5
00001A9A  4EB9 00002672           1139          JSR     PRINTSIZEOP
00001AA0                          1140  
00001AA0  4EB9 00001AC6           1141          JSR     PRINT_IS_MEM_IN
00001AA6  4EB9 0000286E           1142          JSR     PRINTDOLLAR
00001AAC  2206                    1143          MOVE.L  D6,D1
00001AAE  143C 0010               1144          MOVE.B  #16,D2
00001AB2  103C 000F               1145          MOVE.B  #15,D0
00001AB6  4E4F                    1146          TRAP    #15
00001AB8                          1147  
00001AB8  4EB9 00002862           1148          JSR     PRINTNEWLINE
00001ABE  4EB9 000028B6           1149          JSR     CLEAR_ALL
00001AC4  4E75                    1150          RTS
00001AC6                          1151          
00001AC6                          1152  PRINT_IS_MEM_IN:
00001AC6  0C38 00FF 0010          1153          CMPI.B  #$FF,IS_IN_MEM_BOOL
00001ACC  6600 0DCA               1154          BNE     RETURN
00001AD0  11FC 0000 0010          1155          MOVE.B  #0,IS_IN_MEM_BOOL
00001AD6  4EB9 00002566           1156          JSR     PRINT_ADDA_INDIRECT_TYPE
00001ADC  4EB9 00002862           1157          JSR     PRINTNEWLINE
00001AE2  341A                    1158          MOVE.W  (A2)+,D2    ; address should be incremented at the end of each print
00001AE4  B5F8 0004               1159          CMP.L   ENADR,A2   ; keep looping until reach the end
00001AE8  6D00 F608               1160          BLT     LOOPMEM
00001AEC  6000 0DD8               1161          BRA     DONE
00001AF0                          1162  ************************************        
00001AF0                          1163  ******** PRINT LOGIC INSTRUCTIONS ********
00001AF0                          1164  ************************************
00001AF0                          1165  ; PRINT NOT EA:
00001AF0                          1166  PRINTNOT:
00001AF0  BC3C 0000               1167          CMP.B   #0,D6
00001AF4  6700 0026               1168          BEQ     PRINTNOT_REG
00001AF8  BC3C 0002               1169          CMP.B   #2,D6
00001AFC  6700 0040               1170          BEQ     PRINTNOT_INAn
00001B00  BC3C 0003               1171          CMP.B   #3,D6
00001B04  6700 005A               1172          BEQ     PRINTNOT_POS_INAn
00001B08  BC3C 0004               1173          CMP.B   #4,D6
00001B0C  6700 007A               1174          BEQ     PRINTNOT_PRE_INAn
00001B10  BC3C 0007               1175          CMP.B   #7,D6
00001B14  6700 009A               1176          BEQ     PRINTNOT_ABS_ADR
00001B18  6000 FCF0               1177          BRA     INVALIDOP
00001B1C                          1178  
00001B1C                          1179  PRINTNOT_REG:
00001B1C  4EB9 0000289A           1180          JSR     PRINT_PC
00001B22  43F8 0104               1181          LEA     DISNOT,A1   ; display NOT string
00001B26  103C 000E               1182          MOVE.B  #14,D0
00001B2A  4E4F                    1183          TRAP    #15
00001B2C  4EB9 00002672           1184          JSR     PRINTSIZEOP
00001B32  1807                    1185          MOVE.B  D7,D4
00001B34  4EB9 000026B0           1186          JSR     PRINTDn                 ; print the data register
00001B3A  6000 0588               1187          BRA     CLOSING
00001B3E                          1188          
00001B3E                          1189  PRINTNOT_INAn:
00001B3E  4EB9 0000289A           1190          JSR     PRINT_PC
00001B44  43F8 0104               1191          LEA     DISNOT,A1
00001B48  103C 000E               1192          MOVE.B  #14,D0
00001B4C  4E4F                    1193          TRAP    #15
00001B4E  4EB9 00002672           1194          JSR     PRINTSIZEOP
00001B54  1807                    1195          MOVE.B  D7,D4
00001B56  4EB9 000027F0           1196          JSR     PRINT_An_IN
00001B5C  6000 0566               1197          BRA     CLOSING
00001B60                          1198          
00001B60                          1199  PRINTNOT_POS_INAn:
00001B60  4EB9 0000289A           1200          JSR     PRINT_PC
00001B66  43F8 0104               1201          LEA     DISNOT,A1
00001B6A  103C 000E               1202          MOVE.B  #14,D0
00001B6E  4E4F                    1203          TRAP    #15
00001B70  4EB9 00002672           1204          JSR     PRINTSIZEOP
00001B76  1807                    1205          MOVE.B  D7,D4
00001B78  4EB9 000027F0           1206          JSR     PRINT_An_IN
00001B7E  4EB9 0000283E           1207          JSR     PRINTPLUS
00001B84  6000 053E               1208          BRA     CLOSING
00001B88                          1209  
00001B88                          1210  PRINTNOT_PRE_INAn:
00001B88  4EB9 0000289A           1211          JSR     PRINT_PC
00001B8E  43F8 0104               1212          LEA     DISNOT,A1
00001B92  103C 000E               1213          MOVE.B  #14,D0
00001B96  4E4F                    1214          TRAP    #15
00001B98  4EB9 00002672           1215          JSR     PRINTSIZEOP
00001B9E  4EB9 0000284A           1216          JSR     PRINTMINUS
00001BA4  1807                    1217          MOVE.B  D7,D4
00001BA6  4EB9 000027F0           1218          JSR     PRINT_An_IN
00001BAC  6000 0516               1219          BRA     CLOSING
00001BB0                          1220          
00001BB0                          1221  PRINTNOT_ABS_ADR:
00001BB0  4EB9 0000289A           1222          JSR     PRINT_PC
00001BB6  43F8 0104               1223          LEA     DISNOT,A1
00001BBA  103C 000E               1224          MOVE.B  #14,D0
00001BBE  4E4F                    1225          TRAP    #15
00001BC0  4EB9 00002672           1226          JSR     PRINTSIZEOP
00001BC6  4EB8 19CE               1227          JSR     DETERMINE_ADDR_MODE
00001BCA  4EB9 0000286E           1228          JSR     PRINTDOLLAR
00001BD0  2206                    1229          MOVE.L  D6,D1
00001BD2  143C 0010               1230          MOVE.B  #16,D2
00001BD6  103C 000F               1231          MOVE.B  #15,D0
00001BDA  4E4F                    1232          TRAP    #15
00001BDC  4EB9 00002862           1233          JSR     PRINTNEWLINE
00001BE2  4EB9 000028B6           1234          JSR     CLEAR_ALL
00001BE8  B5F8 0004               1235          CMP.L   ENADR,A2
00001BEC  6D00 F504               1236          BLT     LOOPMEM
00001BF0  6000 0CD4               1237          BRA     DONE
00001BF4                          1238        
00001BF4                          1239  ; PRINT JSR EA  
00001BF4                          1240  PRINTJSR_ADR:
00001BF4  4EB9 0000289A           1241          JSR     PRINT_PC
00001BFA  43F8 0108               1242          LEA     DISJSR,A1
00001BFE  103C 000E               1243          MOVE.B  #14,D0
00001C02  4E4F                    1244          TRAP    #15
00001C04  1807                    1245          MOVE.B  D7,D4
00001C06  4EB9 000027F0           1246          JSR     PRINT_An_IN             ; Print the indirect address
00001C0C  6000 04B6               1247          BRA     CLOSING
00001C10                          1248          
00001C10                          1249  PRINTJSR_ABS_ADR:
00001C10  4EB9 0000289A           1250          JSR     PRINT_PC
00001C16  43F8 0108               1251          LEA     DISJSR,A1
00001C1A  103C 000E               1252          MOVE.B  #14,D0
00001C1E  4E4F                    1253          TRAP    #15
00001C20  4EB8 19CE               1254          JSR     DETERMINE_ADDR_MODE
00001C24  4EB9 0000286E           1255          JSR     PRINTDOLLAR             ; Print the absolute address
00001C2A  2206                    1256          MOVE.L  D6,D1
00001C2C  143C 0010               1257          MOVE.B  #16,D2
00001C30  103C 000F               1258          MOVE.B  #15,D0
00001C34  4E4F                    1259          TRAP    #15
00001C36  4EB9 00002862           1260          JSR     PRINTNEWLINE
00001C3C  4EB9 000028B6           1261          JSR     CLEAR_ALL
00001C42  B5F8 0004               1262          CMP.L   ENADR,A2
00001C46  6D00 F4AA               1263          BLT     LOOPMEM
00001C4A  6000 0C7A               1264          BRA     DONE
00001C4E                          1265          
00001C4E                          1266  ; PRINT LEA EA     
00001C4E                          1267  PRINTLEA_ADR:
00001C4E  4EB9 0000289A           1268          JSR     PRINT_PC
00001C54  43F8 010E               1269          LEA     DISLEA,A1
00001C58  103C 000E               1270          MOVE.B  #14,D0
00001C5C  4E4F                    1271          TRAP    #15
00001C5E  1807                    1272          MOVE.B  D7,D4
00001C60  4EB9 000027F0           1273          JSR     PRINT_An_IN             ; Print indirect address of the LEA EA
00001C66  4EB9 00002856           1274          JSR     PRINTCOMMA
00001C6C  1805                    1275          MOVE.B  D5,D4
00001C6E  4EB9 00002750           1276          JSR     PRINTAn                 ;  Print the address register of the LEA destination
00001C74  6000 044E               1277          BRA     CLOSING
00001C78                          1278          
00001C78                          1279  PRINTLEA_ABS_ADR:
00001C78  4EB9 0000289A           1280          JSR     PRINT_PC
00001C7E  43F8 010E               1281          LEA     DISLEA,A1
00001C82  103C 000E               1282          MOVE.B  #14,D0
00001C86  4E4F                    1283          TRAP    #15
00001C88  4EB8 19CE               1284          JSR     DETERMINE_ADDR_MODE     ; Determine is it is a word or long absolute addressing
00001C8C  4EB9 0000286E           1285          JSR     PRINTDOLLAR             ; print absolute address
00001C92  2206                    1286          MOVE.L  D6,D1
00001C94  143C 0010               1287          MOVE.B  #16,D2
00001C98  103C 000F               1288          MOVE.B  #15,D0
00001C9C  4E4F                    1289          TRAP    #15
00001C9E  4EB9 00002856           1290          JSR     PRINTCOMMA
00001CA4  1805                    1291          MOVE.B  D5,D4
00001CA6  4EB9 00002750           1292          JSR     PRINTAn                 ; print destination address register
00001CAC  4EB9 00002862           1293          JSR     PRINTNEWLINE
00001CB2  4EB9 000028B6           1294          JSR     CLEAR_ALL
00001CB8  B5F8 0004               1295          CMP.L   ENADR,A2
00001CBC  6D00 F434               1296          BLT     LOOPMEM
00001CC0  6000 0C04               1297          BRA     DONE
00001CC4                          1298          
00001CC4                          1299  ************************************        
00001CC4                          1300  ******** PRINT AND INSTRUCTIONS ********
00001CC4                          1301  ************************************       
00001CC4                          1302  PRINT_AND_DATA:
00001CC4  0805 0002               1303          BTST.L  #2,D5           ; determine opmode, start with 0 = <ea>, Dn; 1 = Dn, <ea>
00001CC8  6700 0006               1304          BEQ     PRINT_AND_EA_Dn
00001CCC  6000 0102               1305          BRA     PRINT_AND_Dn_EA
00001CD0                          1306          
00001CD0                          1307  PRINT_AND_EA_Dn:
00001CD0  BC3C 0000               1308          CMP.B   #0,D6
00001CD4  6700 0026               1309          BEQ     PRINT_AND_Dn_Dn
00001CD8  BC3C 0002               1310          CMP.B   #2,D6
00001CDC  6700 0040               1311          BEQ     PRINT_AND_INAn_Dn
00001CE0  BC3C 0003               1312          CMP.B   #3,D6
00001CE4  6700 005A               1313          BEQ     PRINT_AND_POS_INAn_Dn
00001CE8  BC3C 0004               1314          CMP.B   #4,D6
00001CEC  6700 007A               1315          BEQ     PRINT_AND_PRE_INAn_Dn
00001CF0  BC3C 0007               1316          CMP.B   #7,D6
00001CF4  6700 009A               1317          BEQ     PRINT_AND_ABS_ADR_Dn
00001CF8  6000 FB10               1318          BRA     INVALIDOP
00001CFC                          1319          
00001CFC                          1320          
00001CFC                          1321  PRINT_AND_Dn_Dn:
00001CFC  4EB9 00001E9A           1322          JSR     PRINT_AND_OPENING
00001D02  1604                    1323          MOVE.B  D4,D3       ; Temp. put the register to D3
00001D04  1807                    1324          MOVE.B  D7,D4
00001D06  4EB9 000026B0           1325          JSR     PRINTDn
00001D0C  4EB9 00002856           1326          JSR     PRINTCOMMA
00001D12  1803                    1327          MOVE.B  D3,D4
00001D14  4EB9 000026B0           1328          JSR     PRINTDn
00001D1A  6000 03A8               1329          BRA     CLOSING
00001D1E                          1330          
00001D1E                          1331  PRINT_AND_INAn_Dn:
00001D1E  4EB9 00001E9A           1332          JSR     PRINT_AND_OPENING
00001D24  1604                    1333          MOVE.B  D4,D3
00001D26  1807                    1334          MOVE.B  D7,D4
00001D28  4EB9 000027F0           1335          JSR     PRINT_An_IN
00001D2E  4EB9 00002856           1336          JSR     PRINTCOMMA
00001D34  1803                    1337          MOVE.B  D3,D4
00001D36  4EB9 000026B0           1338          JSR     PRINTDn
00001D3C  6000 0386               1339          BRA     CLOSING
00001D40                          1340          
00001D40                          1341  PRINT_AND_POS_INAn_Dn:
00001D40  4EB9 00001E9A           1342          JSR     PRINT_AND_OPENING
00001D46  1604                    1343          MOVE.B  D4,D3
00001D48  1807                    1344          MOVE.B  D7,D4
00001D4A  4EB9 000027F0           1345          JSR     PRINT_An_IN
00001D50  4EB9 0000283E           1346          JSR     PRINTPLUS
00001D56  4EB9 00002856           1347          JSR     PRINTCOMMA
00001D5C  1803                    1348          MOVE.B  D3,D4
00001D5E  4EB9 000026B0           1349          JSR     PRINTDn
00001D64  6000 035E               1350          BRA     CLOSING
00001D68                          1351          
00001D68                          1352  PRINT_AND_PRE_INAn_Dn:
00001D68  4EB9 00001E9A           1353          JSR     PRINT_AND_OPENING
00001D6E  1604                    1354          MOVE.B  D4,D3
00001D70  1807                    1355          MOVE.B  D7,D4
00001D72  4EB9 0000284A           1356          JSR     PRINTMINUS
00001D78  4EB9 000027F0           1357          JSR     PRINT_An_IN
00001D7E  4EB9 00002856           1358          JSR     PRINTCOMMA
00001D84  1803                    1359          MOVE.B  D3,D4
00001D86  4EB9 000026B0           1360          JSR     PRINTDn
00001D8C  6000 0336               1361          BRA     CLOSING
00001D90                          1362          
00001D90                          1363  PRINT_AND_ABS_ADR_Dn:
00001D90  4EB9 00001E9A           1364          JSR     PRINT_AND_OPENING
00001D96  4EB8 19CE               1365          JSR     DETERMINE_ADDR_MODE
00001D9A  4EB9 000020A8           1366          JSR     DOLLAR_OR_HASHTAG
00001DA0  2206                    1367          MOVE.L  D6,D1
00001DA2  143C 0010               1368          MOVE.B  #16,D2
00001DA6  103C 000F               1369          MOVE.B  #15,D0
00001DAA  4E4F                    1370          TRAP    #15
00001DAC  4EB9 00002856           1371          JSR     PRINTCOMMA
00001DB2  4EB9 000026B0           1372          JSR     PRINTDn
00001DB8  4EB9 00002862           1373          JSR     PRINTNEWLINE
00001DBE  4EB9 000028B6           1374          JSR     CLEAR_ALL
00001DC4  B5F8 0004               1375          CMP.L   ENADR,A2
00001DC8  6D00 F328               1376          BLT     LOOPMEM
00001DCC  6000 0AF8               1377          BRA     DONE 
00001DD0                          1378       
00001DD0                          1379  PRINT_AND_Dn_EA:
00001DD0  BC3C 0002               1380          CMP.B   #2,D6
00001DD4  6700 001E               1381          BEQ     PRINT_AND_Dn_INAn
00001DD8  BC3C 0003               1382          CMP.B   #3,D6
00001DDC  6700 0034               1383          BEQ     PRINT_AND_Dn_POS_INAn
00001DE0  BC3C 0004               1384          CMP.B   #4,D6
00001DE4  6700 0050               1385          BEQ     PRINT_AND_Dn_PRE_INAn
00001DE8  BC3C 0007               1386          CMP.B   #7,D6
00001DEC  6700 006C               1387          BEQ     PRINT_AND_Dn_ABS_ADR
00001DF0  6000 FA18               1388          BRA     INVALIDOP
00001DF4                          1389          
00001DF4                          1390  PRINT_AND_Dn_INAn:
00001DF4  4EB9 00001E9A           1391          JSR     PRINT_AND_OPENING
00001DFA  4EB9 000026B0           1392          JSR     PRINTDn
00001E00  4EB9 00002856           1393          JSR     PRINTCOMMA
00001E06  1807                    1394          MOVE.B  D7,D4
00001E08  4EB9 000027F0           1395          JSR     PRINT_An_IN
00001E0E  6000 02B4               1396          BRA     CLOSING
00001E12                          1397          
00001E12                          1398  PRINT_AND_Dn_POS_INAn:
00001E12  4EB9 00001E9A           1399          JSR     PRINT_AND_OPENING
00001E18  4EB9 000026B0           1400          JSR     PRINTDn
00001E1E  4EB9 00002856           1401          JSR     PRINTCOMMA
00001E24  1807                    1402          MOVE.B  D7,D4
00001E26  4EB9 000027F0           1403          JSR     PRINT_An_IN
00001E2C  4EB9 0000283E           1404          JSR     PRINTPLUS
00001E32  6000 0290               1405          BRA     CLOSING
00001E36                          1406  
00001E36                          1407  PRINT_AND_Dn_PRE_INAn:
00001E36  4EB9 00001E9A           1408          JSR     PRINT_AND_OPENING
00001E3C  4EB9 000026B0           1409          JSR     PRINTDn
00001E42  4EB9 00002856           1410          JSR     PRINTCOMMA
00001E48  1807                    1411          MOVE.B  D7,D4
00001E4A  4EB9 0000284A           1412          JSR     PRINTMINUS
00001E50  4EB9 000027F0           1413          JSR     PRINT_An_IN
00001E56  6000 026C               1414          BRA     CLOSING
00001E5A                          1415          
00001E5A                          1416  PRINT_AND_Dn_ABS_ADR:
00001E5A  4EB9 00001E9A           1417          JSR     PRINT_AND_OPENING
00001E60  4EB9 000026B0           1418          JSR     PRINTDn
00001E66  4EB9 00002856           1419          JSR     PRINTCOMMA
00001E6C  4EB8 19CE               1420          JSR     DETERMINE_ADDR_MODE
00001E70  4EB9 0000286E           1421          JSR     PRINTDOLLAR
00001E76  2206                    1422          MOVE.L  D6,D1
00001E78  143C 0010               1423          MOVE.B  #16,D2
00001E7C  103C 000F               1424          MOVE.B  #15,D0
00001E80  4E4F                    1425          TRAP    #15
00001E82  4EB9 00002862           1426          JSR     PRINTNEWLINE
00001E88  4EB9 000028B6           1427          JSR     CLEAR_ALL
00001E8E  B5F8 0004               1428          CMP.L   ENADR,A2
00001E92  6D00 F25E               1429          BLT     LOOPMEM
00001E96  6000 0A2E               1430          BRA     DONE 
00001E9A                          1431        
00001E9A                          1432  PRINT_AND_OPENING:
00001E9A  4EB9 0000289A           1433          JSR     PRINT_PC
00001EA0  43F8 0114               1434          LEA     DISAND,A1
00001EA4  103C 000E               1435          MOVE.B  #14,D0
00001EA8  4E4F                    1436          TRAP    #15
00001EAA  0205 0003               1437          ANDI.B  #$3,D5
00001EAE  4EB9 00002672           1438          JSR     PRINTSIZEOP
00001EB4  4E75                    1439          RTS
00001EB6                          1440          
00001EB6                          1441  ************************************        
00001EB6                          1442  ******** PRINT OR INSTRUCTIONS ********
00001EB6                          1443  ************************************       
00001EB6                          1444  PRINT_OR_DATA:
00001EB6  0805 0002               1445          BTST.L  #2,D5           ; determine opmode, start with 0 = <ea>, Dn; 1 = Dn, <ea>
00001EBA  6700 0006               1446          BEQ     PRINT_OR_EA_Dn
00001EBE  6000 0102               1447          BRA     PRINT_OR_Dn_EA
00001EC2                          1448          
00001EC2                          1449  PRINT_OR_EA_Dn:
00001EC2  BC3C 0000               1450          CMP.B   #0,D6
00001EC6  6700 0026               1451          BEQ     PRINT_OR_Dn_Dn
00001ECA  BC3C 0002               1452          CMP.B   #2,D6
00001ECE  6700 0040               1453          BEQ     PRINT_OR_INAn_Dn
00001ED2  BC3C 0003               1454          CMP.B   #3,D6
00001ED6  6700 005A               1455          BEQ     PRINT_OR_POS_INAn_Dn
00001EDA  BC3C 0004               1456          CMP.B   #4,D6
00001EDE  6700 007A               1457          BEQ     PRINT_OR_PRE_INAn_Dn
00001EE2  BC3C 0007               1458          CMP.B   #7,D6
00001EE6  6700 009A               1459          BEQ     PRINT_OR_ABS_ADR_Dn
00001EEA  6000 F91E               1460          BRA     INVALIDOP
00001EEE                          1461          
00001EEE                          1462          
00001EEE                          1463  PRINT_OR_Dn_Dn:
00001EEE  4EB9 0000208C           1464          JSR     PRINT_OR_OPENING
00001EF4  1604                    1465          MOVE.B  D4,D3       ; Temp. put the register to D3
00001EF6  1807                    1466          MOVE.B  D7,D4
00001EF8  4EB9 000026B0           1467          JSR     PRINTDn
00001EFE  4EB9 00002856           1468          JSR     PRINTCOMMA
00001F04  1803                    1469          MOVE.B  D3,D4
00001F06  4EB9 000026B0           1470          JSR     PRINTDn
00001F0C  6000 01B6               1471          BRA     CLOSING
00001F10                          1472          
00001F10                          1473  PRINT_OR_INAn_Dn:
00001F10  4EB9 0000208C           1474          JSR     PRINT_OR_OPENING
00001F16  1604                    1475          MOVE.B  D4,D3
00001F18  1807                    1476          MOVE.B  D7,D4
00001F1A  4EB9 000027F0           1477          JSR     PRINT_An_IN
00001F20  4EB9 00002856           1478          JSR     PRINTCOMMA
00001F26  1803                    1479          MOVE.B  D3,D4
00001F28  4EB9 000026B0           1480          JSR     PRINTDn
00001F2E  6000 0194               1481          BRA     CLOSING
00001F32                          1482          
00001F32                          1483  PRINT_OR_POS_INAn_Dn:
00001F32  4EB9 0000208C           1484          JSR     PRINT_OR_OPENING
00001F38  1604                    1485          MOVE.B  D4,D3
00001F3A  1807                    1486          MOVE.B  D7,D4
00001F3C  4EB9 000027F0           1487          JSR     PRINT_An_IN
00001F42  4EB9 0000283E           1488          JSR     PRINTPLUS
00001F48  4EB9 00002856           1489          JSR     PRINTCOMMA
00001F4E  1803                    1490          MOVE.B  D3,D4
00001F50  4EB9 000026B0           1491          JSR     PRINTDn
00001F56  6000 016C               1492          BRA     CLOSING
00001F5A                          1493          
00001F5A                          1494  PRINT_OR_PRE_INAn_Dn:
00001F5A  4EB9 0000208C           1495          JSR     PRINT_OR_OPENING
00001F60  1604                    1496          MOVE.B  D4,D3
00001F62  1807                    1497          MOVE.B  D7,D4
00001F64  4EB9 0000284A           1498          JSR     PRINTMINUS
00001F6A  4EB9 000027F0           1499          JSR     PRINT_An_IN
00001F70  4EB9 00002856           1500          JSR     PRINTCOMMA
00001F76  1803                    1501          MOVE.B  D3,D4
00001F78  4EB9 000026B0           1502          JSR     PRINTDn
00001F7E  6000 0144               1503          BRA     CLOSING
00001F82                          1504          
00001F82                          1505  PRINT_OR_ABS_ADR_Dn:
00001F82  4EB9 0000208C           1506          JSR     PRINT_OR_OPENING
00001F88  4EB8 19CE               1507          JSR     DETERMINE_ADDR_MODE
00001F8C  4EB9 000020A8           1508          JSR     DOLLAR_OR_HASHTAG
00001F92  2206                    1509          MOVE.L  D6,D1
00001F94  143C 0010               1510          MOVE.B  #16,D2
00001F98  103C 000F               1511          MOVE.B  #15,D0
00001F9C  4E4F                    1512          TRAP    #15
00001F9E  4EB9 00002856           1513          JSR     PRINTCOMMA
00001FA4  4EB9 000026B0           1514          JSR     PRINTDn
00001FAA  4EB9 00002862           1515          JSR     PRINTNEWLINE
00001FB0  4EB9 000028B6           1516          JSR     CLEAR_ALL
00001FB6  B5F8 0004               1517          CMP.L   ENADR,A2
00001FBA  6D00 F136               1518          BLT     LOOPMEM
00001FBE  6000 0906               1519          BRA     DONE 
00001FC2                          1520       
00001FC2                          1521  PRINT_OR_Dn_EA:
00001FC2  BC3C 0002               1522          CMP.B   #2,D6
00001FC6  6700 001E               1523          BEQ     PRINT_OR_Dn_INAn
00001FCA  BC3C 0003               1524          CMP.B   #3,D6
00001FCE  6700 0034               1525          BEQ     PRINT_OR_Dn_POS_INAn
00001FD2  BC3C 0004               1526          CMP.B   #4,D6
00001FD6  6700 0050               1527          BEQ     PRINT_OR_Dn_PRE_INAn
00001FDA  BC3C 0007               1528          CMP.B   #7,D6
00001FDE  6700 006C               1529          BEQ     PRINT_OR_Dn_ABS_ADR
00001FE2  6000 F826               1530          BRA     INVALIDOP
00001FE6                          1531          
00001FE6                          1532  PRINT_OR_Dn_INAn:
00001FE6  4EB9 0000208C           1533          JSR     PRINT_OR_OPENING
00001FEC  4EB9 000026B0           1534          JSR     PRINTDn
00001FF2  4EB9 00002856           1535          JSR     PRINTCOMMA
00001FF8  1807                    1536          MOVE.B  D7,D4
00001FFA  4EB9 000027F0           1537          JSR     PRINT_An_IN
00002000  6000 00C2               1538          BRA     CLOSING
00002004                          1539          
00002004                          1540  PRINT_OR_Dn_POS_INAn:
00002004  4EB9 0000208C           1541          JSR     PRINT_OR_OPENING
0000200A  4EB9 000026B0           1542          JSR     PRINTDn
00002010  4EB9 00002856           1543          JSR     PRINTCOMMA
00002016  1807                    1544          MOVE.B  D7,D4
00002018  4EB9 000027F0           1545          JSR     PRINT_An_IN
0000201E  4EB9 0000283E           1546          JSR     PRINTPLUS
00002024  6000 009E               1547          BRA     CLOSING
00002028                          1548  
00002028                          1549  PRINT_OR_Dn_PRE_INAn:
00002028  4EB9 0000208C           1550          JSR     PRINT_OR_OPENING
0000202E  4EB9 000026B0           1551          JSR     PRINTDn
00002034  4EB9 00002856           1552          JSR     PRINTCOMMA
0000203A  1807                    1553          MOVE.B  D7,D4
0000203C  4EB9 0000284A           1554          JSR     PRINTMINUS
00002042  4EB9 000027F0           1555          JSR     PRINT_An_IN
00002048  6000 007A               1556          BRA     CLOSING
0000204C                          1557          
0000204C                          1558  PRINT_OR_Dn_ABS_ADR:
0000204C  4EB9 0000208C           1559          JSR     PRINT_OR_OPENING
00002052  4EB9 000026B0           1560          JSR     PRINTDn
00002058  4EB9 00002856           1561          JSR     PRINTCOMMA
0000205E  4EB8 19CE               1562          JSR     DETERMINE_ADDR_MODE
00002062  4EB9 0000286E           1563          JSR     PRINTDOLLAR
00002068  2206                    1564          MOVE.L  D6,D1
0000206A  143C 0010               1565          MOVE.B  #16,D2
0000206E  103C 000F               1566          MOVE.B  #15,D0
00002072  4E4F                    1567          TRAP    #15
00002074  4EB9 00002862           1568          JSR     PRINTNEWLINE
0000207A  4EB9 000028B6           1569          JSR     CLEAR_ALL
00002080  B5F8 0004               1570          CMP.L   ENADR,A2
00002084  6D00 F06C               1571          BLT     LOOPMEM
00002088  6000 083C               1572          BRA     DONE 
0000208C                          1573        
0000208C                          1574  PRINT_OR_OPENING:
0000208C  4EB9 0000289A           1575          JSR     PRINT_PC
00002092  43F8 0118               1576          LEA     DISOR,A1
00002096  103C 000E               1577          MOVE.B  #14,D0
0000209A  4E4F                    1578          TRAP    #15
0000209C  0205 0003               1579          ANDI.B  #$3,D5
000020A0  4EB9 00002672           1580          JSR     PRINTSIZEOP
000020A6  4E75                    1581          RTS
000020A8                          1582  
000020A8                          1583          
000020A8                          1584  DOLLAR_OR_HASHTAG:
000020A8  BE3C 0004               1585          CMP.B   #4,D7
000020AC  6700 0006               1586          BEQ     HASHTAG
000020B0  6000 000A               1587          BRA     DOLLAR
000020B4                          1588          
000020B4                          1589  HASHTAG:
000020B4  4EB9 0000281A           1590          JSR     PRINTPOUND
000020BA  4E75                    1591          RTS
000020BC                          1592          
000020BC                          1593  DOLLAR:
000020BC  4EB9 0000286E           1594          JSR     PRINTDOLLAR
000020C2  4E75                    1595          RTS
000020C4                          1596    
000020C4                          1597  CLOSING:
000020C4  4EB9 00002862           1598          JSR     PRINTNEWLINE
000020CA  4EB9 000028B6           1599          JSR     CLEAR_ALL
000020D0  341A                    1600          MOVE.W  (A2)+,D2
000020D2  B5F8 0004               1601          CMP.L   ENADR,A2
000020D6  6D00 F01A               1602          BLT     LOOPMEM
000020DA  6000 07EA               1603          BRA     DONE 
000020DE                          1604  
000020DE                          1605  ******** PRINT REGISTER SHIFTS ********
000020DE                          1606  ******** PRINT LOGIC REGISTER SHIFTS ********
000020DE                          1607  PRINTLSL_REG:
000020DE                          1608          * D7: register, D6: is Count/Dn
000020DE                          1609          * D5: Size Op,  D4: Count/Dn
000020DE  4EB9 0000289A           1610          JSR     PRINT_PC
000020E4  43F8 011B               1611          LEA     DISLSL,A1
000020E8  103C 000E               1612          MOVE.B  #14,D0
000020EC  4E4F                    1613          TRAP    #15
000020EE                          1614  
000020EE  4EB8 1A70               1615          JSR     PRINT_REG_SHIFT_INFO
000020F2  341A                    1616          MOVE.W  (A2)+,D2    ; address should be incremented at the end of each print
000020F4  B5F8 0004               1617          CMP.L   ENADR,A2   ; keep looping until reach the end
000020F8  6D00 EFF8               1618          BLT     LOOPMEM
000020FC  6000 07C8               1619          BRA     DONE
00002100                          1620  PRINTLSR_REG:
00002100                          1621          * D7: register, D6: is Count/Dn
00002100                          1622          * D5: Size Op,  D4: Count/Dn
00002100  4EB9 0000289A           1623          JSR     PRINT_PC
00002106  43F8 011F               1624          LEA     DISLSR,A1
0000210A  103C 000E               1625          MOVE.B  #14,D0
0000210E  4E4F                    1626          TRAP    #15
00002110                          1627  
00002110  4EB8 1A70               1628          JSR     PRINT_REG_SHIFT_INFO
00002114  341A                    1629          MOVE.W  (A2)+,D2    ; address should be incremented at the end of each print
00002116  B5F8 0004               1630          CMP.L   ENADR,A2   ; keep looping until reach the end
0000211A  6D00 EFD6               1631          BLT     LOOPMEM
0000211E  6000 07A6               1632          BRA     DONE
00002122                          1633  ******** PRINT ARITHMETIC REGISTER SHIFTS ********
00002122                          1634  PRINTASL_REG:
00002122                          1635          * D7: register, D6: is Count/Dn
00002122                          1636          * D5: Size Op,  D4: Count/Dn
00002122  4EB9 0000289A           1637          JSR     PRINT_PC
00002128  43F8 0123               1638          LEA     DISASL,A1
0000212C  103C 000E               1639          MOVE.B  #14,D0
00002130  4E4F                    1640          TRAP    #15
00002132                          1641  
00002132  4EB8 1A70               1642          JSR     PRINT_REG_SHIFT_INFO
00002136  341A                    1643          MOVE.W  (A2)+,D2    ; address should be incremented at the end of each print
00002138  B5F8 0004               1644          CMP.L   ENADR,A2   ; keep looping until reach the end
0000213C  6D00 EFB4               1645          BLT     LOOPMEM
00002140  6000 0784               1646          BRA     DONE
00002144                          1647  PRINTASR_REG:
00002144                          1648          * D7: register, D6: is Count/Dn
00002144                          1649          * D5: Size Op,  D4: Count/Dn
00002144  4EB9 0000289A           1650          JSR     PRINT_PC
0000214A  43F8 0127               1651          LEA     DISASR,A1
0000214E  103C 000E               1652          MOVE.B  #14,D0
00002152  4E4F                    1653          TRAP    #15
00002154                          1654  
00002154  4EB8 1A70               1655          JSR     PRINT_REG_SHIFT_INFO
00002158  341A                    1656          MOVE.W  (A2)+,D2    ; address should be incremented at the end of each print
0000215A  B5F8 0004               1657          CMP.L   ENADR,A2   ; keep looping until reach the end
0000215E  6D00 EF92               1658          BLT     LOOPMEM
00002162  6000 0762               1659          BRA     DONE
00002166                          1660  ******** PRINT ROTATATE SHIFTS ********
00002166                          1661  PRINTROL_REG:
00002166                          1662          * D7: register, D6: is Count/Dn
00002166                          1663          * D5: Size Op,  D4: Count/Dn
00002166  4EB9 0000289A           1664          JSR     PRINT_PC
0000216C  43F8 012B               1665          LEA     DISROL,A1
00002170  103C 000E               1666          MOVE.B  #14,D0
00002174  4E4F                    1667          TRAP    #15
00002176                          1668  
00002176  4EB8 1A70               1669          JSR     PRINT_REG_SHIFT_INFO
0000217A  341A                    1670          MOVE.W  (A2)+,D2    ; address should be incremented at the end of each print
0000217C  B5F8 0004               1671          CMP.L   ENADR,A2   ; keep looping until reach the end
00002180  6D00 EF70               1672          BLT     LOOPMEM
00002184  6000 0740               1673          BRA     DONE
00002188                          1674  PRINTROR_REG:
00002188                          1675          * D7: register, D6: is Count/Dn
00002188                          1676          * D5: Size Op,  D4: Count/Dn
00002188  4EB9 0000289A           1677          JSR     PRINT_PC
0000218E  43F8 012F               1678          LEA     DISROR,A1
00002192  103C 000E               1679          MOVE.B  #14,D0
00002196  4E4F                    1680          TRAP    #15
00002198                          1681  
00002198  4EB8 1A70               1682          JSR     PRINT_REG_SHIFT_INFO
0000219C  341A                    1683          MOVE.W  (A2)+,D2    ; address should be incremented at the end of each print
0000219E  B5F8 0004               1684          CMP.L   ENADR,A2   ; keep looping until reach the end
000021A2  6D00 EF4E               1685          BLT     LOOPMEM
000021A6  6000 071E               1686          BRA     DONE
000021AA                          1687  ******** PRINT MEMORY SHIFTS ********
000021AA                          1688  ******** PRINT LOGIC MEMORY SHIFTS ********
000021AA                          1689  PRINTLSL_MEM:
000021AA                          1690          * D6 contains the EA
000021AA  4EB9 0000289A           1691          JSR     PRINT_PC
000021B0  43F8 011B               1692          LEA     DISLSL,A1
000021B4  103C 000E               1693          MOVE.B  #14,D0
000021B8  4E4F                    1694          TRAP    #15
000021BA                          1695  
000021BA  4EB8 1A96               1696          JSR     PRINT_MEM_SHIFT_INFO
000021BE  B5F8 0004               1697          CMP.L   ENADR,A2   ; keep looping until reach the end
000021C2  6D00 EF2E               1698          BLT     LOOPMEM
000021C6  6000 06FE               1699          BRA     DONE
000021CA                          1700  PRINTLSR_MEM:
000021CA                          1701          * D6 contains the EA
000021CA  4EB9 0000289A           1702          JSR     PRINT_PC
000021D0  43F8 011F               1703          LEA     DISLSR,A1
000021D4  103C 000E               1704          MOVE.B  #14,D0
000021D8  4E4F                    1705          TRAP    #15
000021DA                          1706  
000021DA  4EB8 1A96               1707          JSR     PRINT_MEM_SHIFT_INFO
000021DE  B5F8 0004               1708          CMP.L   ENADR,A2   ; keep looping until reach the end
000021E2  6D00 EF0E               1709          BLT     LOOPMEM
000021E6  6000 06DE               1710          BRA     DONE
000021EA                          1711  ******** PRINT ARITHMETIC MEMORY SHIFTS ********
000021EA                          1712  PRINTASL_MEM:
000021EA                          1713          * D6 contains the EA
000021EA  4EB9 0000289A           1714          JSR     PRINT_PC
000021F0  43F8 0123               1715          LEA     DISASL,A1
000021F4  103C 000E               1716          MOVE.B  #14,D0
000021F8  4E4F                    1717          TRAP    #15
000021FA                          1718  
000021FA  4EB8 1A96               1719          JSR     PRINT_MEM_SHIFT_INFO
000021FE  B5F8 0004               1720          CMP.L   ENADR,A2   ; keep looping until reach the end
00002202  6D00 EEEE               1721          BLT     LOOPMEM
00002206  6000 06BE               1722          BRA     DONE
0000220A                          1723  PRINTASR_MEM:
0000220A                          1724          * D6 contains the EA
0000220A  4EB9 0000289A           1725          JSR     PRINT_PC
00002210  43F8 0127               1726          LEA     DISASR,A1
00002214  103C 000E               1727          MOVE.B  #14,D0
00002218  4E4F                    1728          TRAP    #15
0000221A                          1729  
0000221A  4EB8 1A96               1730          JSR     PRINT_MEM_SHIFT_INFO
0000221E  B5F8 0004               1731          CMP.L   ENADR,A2   ; keep looping until reach the end
00002222  6D00 EECE               1732          BLT     LOOPMEM
00002226  6000 069E               1733          BRA     DONE
0000222A                          1734  PRINTROL_MEM:
0000222A                          1735          * D6 contains the EA
0000222A  4EB9 0000289A           1736          JSR     PRINT_PC
00002230  43F8 012B               1737          LEA     DISROL,A1
00002234  103C 000E               1738          MOVE.B  #14,D0
00002238  4E4F                    1739          TRAP    #15
0000223A                          1740  
0000223A  4EB8 1A96               1741          JSR     PRINT_MEM_SHIFT_INFO
0000223E  B5F8 0004               1742          CMP.L   ENADR,A2   ; keep looping until reach the end
00002242  6D00 EEAE               1743          BLT     LOOPMEM
00002246  6000 067E               1744          BRA     DONE
0000224A                          1745  PRINTROR_MEM:
0000224A                          1746          * D6 contains the EA
0000224A  4EB9 0000289A           1747          JSR     PRINT_PC
00002250  43F8 012F               1748          LEA     DISROR,A1
00002254  103C 000E               1749          MOVE.B  #14,D0
00002258  4E4F                    1750          TRAP    #15
0000225A                          1751  
0000225A  4EB8 1A96               1752          JSR     PRINT_MEM_SHIFT_INFO
0000225E  B5F8 0004               1753          CMP.L   ENADR,A2   ; keep looping until reach the end
00002262  6D00 EE8E               1754          BLT     LOOPMEM
00002266  6000 065E               1755          BRA     DONE
0000226A                          1756  ******** ADDITION INSTRUCTIONS ********
0000226A                          1757  ******** PRINT ADD Dn,Dn ********
0000226A                          1758  PRINT_ADD_Dn:
0000226A                          1759  *   D7 - register mode, D4 - register number
0000226A                          1760  *   D6 - opmode, D5 - register
0000226A  4EB9 0000289A           1761          JSR     PRINT_PC
00002270  43F8 0133               1762          LEA     DISADD,A1
00002274  103C 000E               1763          MOVE.B  #14,D0
00002278  4E4F                    1764          TRAP    #15
0000227A                          1765  
0000227A  4EB9 0000259E           1766          JSR     PRINT_ADD_OPMODE
00002280                          1767          * Check if its Dn, ea *
00002280  0C06 0008               1768          CMPI.B  #8,D6 
00002284  6600 0030               1769          BNE     PRINT_ADD_Dn_Ea
00002288                          1770  
00002288  4EB9 00002540           1771          JSR     PRINT_ADDA_Dn_OR_An
0000228E  4EB9 00002856           1772          JSR     PRINTCOMMA
00002294  3805                    1773          MOVE.W  D5,D4
00002296  4EB9 000026B0           1774          JSR     PRINTDn
0000229C  4EB9 00002862           1775          JSR     PRINTNEWLINE
000022A2  4EB9 000028B6           1776          JSR     CLEAR_ALL
000022A8                          1777  
000022A8  341A                    1778          MOVE.W  (A2)+,D2
000022AA  B5F8 0004               1779          CMP.L   ENADR,A2   ; keep looping until reach the end
000022AE  6D00 EE42               1780          BLT     LOOPMEM
000022B2  6000 0612               1781          BRA     DONE
000022B6                          1782  PRINT_ADD_Dn_Ea:
000022B6  3204                    1783          MOVE.W  D4,D1
000022B8  3805                    1784          MOVE.W  D5,D4
000022BA  4EB9 000026B0           1785          JSR     PRINTDn
000022C0  4EB9 00002856           1786          JSR     PRINTCOMMA
000022C6  3801                    1787          MOVE.W  D1,D4
000022C8  4EB9 00002540           1788          JSR     PRINT_ADDA_Dn_OR_An
000022CE  4EB9 00002862           1789          JSR     PRINTNEWLINE
000022D4  4EB9 000028B6           1790          JSR     CLEAR_ALL
000022DA                          1791  
000022DA  341A                    1792          MOVE.W  (A2)+,D2
000022DC  B5F8 0004               1793          CMP.L   ENADR,A2   ; keep looping until reach the end
000022E0  6D00 EE10               1794          BLT     LOOPMEM
000022E4  6000 05E0               1795          BRA     DONE  
000022E8                          1796  PRINT_ADD_EA:
000022E8                          1797  *   D7 - EA, D4 - register number
000022E8                          1798  *   D6 - opmode, D5 - register
000022E8  4EB9 0000289A           1799          JSR     PRINT_PC
000022EE  43F8 0133               1800          LEA     DISADD,A1
000022F2  103C 000E               1801          MOVE.B  #14,D0
000022F6  4E4F                    1802          TRAP    #15
000022F8                          1803  
000022F8  4EB9 0000259E           1804          JSR     PRINT_ADD_OPMODE
000022FE  4EB9 000025AC           1805          JSR     PRINT_EA_DN_OR_DN_EA
00002304  4EB9 000028B6           1806          JSR     CLEAR_ALL
0000230A                          1807  
0000230A  3412                    1808          MOVE.W  (A2),D2
0000230C  B5F8 0004               1809          CMP.L   ENADR,A2   ; keep looping until reach the end
00002310  6D00 EDE0               1810          BLT     LOOPMEM
00002314  6000 05B0               1811          BRA     DONE
00002318                          1812  ******** PRINT ADDA Dn,An & An,An ********
00002318                          1813  PRINT_ADDA_DnAn:
00002318                          1814  *   D7 - ea mode, D4 - ea number
00002318                          1815  *   D6 - opmode, D5 - register
00002318  4EB9 0000289A           1816          JSR     PRINT_PC
0000231E  43F8 0137               1817          LEA     DISADDA,A1
00002322  103C 000E               1818          MOVE.B  #14,D0
00002326  4E4F                    1819          TRAP    #15
00002328                          1820  
00002328  4EB9 00002554           1821          JSR     PRINT_ADDA_OPMODE
0000232E  4EB9 00002540           1822          JSR     PRINT_ADDA_Dn_OR_An
00002334  4EB9 00002856           1823          JSR     PRINTCOMMA
0000233A  3805                    1824          MOVE.W  D5,D4
0000233C  4EB9 00002750           1825          JSR     PRINTAn
00002342  4EB9 00002862           1826          JSR     PRINTNEWLINE
00002348  4EB9 000028B6           1827          JSR     CLEAR_ALL
0000234E                          1828  
0000234E  341A                    1829          MOVE.W  (A2)+,D2
00002350  B5F8 0004               1830          CMP.L   ENADR,A2   ; keep looping until reach the end
00002354  6D00 ED9C               1831          BLT     LOOPMEM
00002358  6000 056C               1832          BRA     DONE
0000235C                          1833  ******** PRINT ADDA (An),An & (An)+,An & -(An),An ********
0000235C                          1834  PRINT_ADDA_INDIRECT:
0000235C  4EB9 0000289A           1835          JSR     PRINT_PC
00002362  43F8 0137               1836          LEA     DISADDA,A1
00002366  103C 000E               1837          MOVE.B  #14,D0
0000236A  4E4F                    1838          TRAP    #15
0000236C                          1839  
0000236C  4EB9 00002554           1840          JSR     PRINT_ADDA_OPMODE
00002372  4EB9 00002566           1841          JSR     PRINT_ADDA_INDIRECT_TYPE
00002378  4EB9 00002856           1842          JSR     PRINTCOMMA
0000237E                          1843  
0000237E  3805                    1844          MOVE.W  D5,D4
00002380  4EB9 00002750           1845          JSR     PRINTAn
00002386  4EB9 00002862           1846          JSR     PRINTNEWLINE
0000238C  4EB9 000028B6           1847          JSR     CLEAR_ALL
00002392                          1848  
00002392  341A                    1849          MOVE.W  (A2)+,D2
00002394  B5F8 0004               1850          CMP.L   ENADR,A2   ; keep looping until reach the end
00002398  6D00 ED58               1851          BLT     LOOPMEM
0000239C  6000 0528               1852          BRA     DONE
000023A0                          1853  ******** PRINT ADDA ea,An ********
000023A0                          1854  PRINT_ADDA_EA:
000023A0                          1855  *   D7 - EA, D4 - register number
000023A0                          1856  *   D6 - opmode, D5 - register
000023A0  4EB9 0000289A           1857          JSR     PRINT_PC
000023A6  43F8 0137               1858          LEA     DISADDA,A1
000023AA  103C 000E               1859          MOVE.B  #14,D0
000023AE  4E4F                    1860          TRAP    #15
000023B0                          1861  
000023B0  4EB9 00002554           1862          JSR     PRINT_ADDA_OPMODE
000023B6  4EB9 00002580           1863          JSR     IS_EA_OR_IMME_ADDA
000023BC  4EB9 0000258A           1864          JSR     PRINT_ADDA_EADDR
000023C2  4EB9 00002856           1865          JSR     PRINTCOMMA
000023C8                          1866  
000023C8  3805                    1867          MOVE.W  D5,D4
000023CA  4EB9 00002750           1868          JSR     PRINTAn
000023D0  4EB9 00002862           1869          JSR     PRINTNEWLINE
000023D6  4EB9 000028B6           1870          JSR     CLEAR_ALL
000023DC                          1871  
000023DC  3412                    1872          MOVE.W  (A2),D2
000023DE  B5F8 0004               1873          CMP.L   ENADR,A2   ; keep looping until reach the end
000023E2  6D00 ED0E               1874          BLT     LOOPMEM
000023E6  6000 04DE               1875          BRA     DONE 
000023EA                          1876  ******** PRINT ADDQ #data,Dn/An ********
000023EA                          1877  PRINT_ADDQ_AnDn:
000023EA                          1878  * D7 - mode, D6 - data
000023EA                          1879  * D5 - size, D4 - register
000023EA  4EB9 0000289A           1880          JSR     PRINT_PC
000023F0  43F8 013C               1881          LEA     DISADDQ,A1
000023F4  103C 000E               1882          MOVE.B  #14,D0
000023F8  4E4F                    1883          TRAP    #15
000023FA                          1884  
000023FA  4EB9 00002672           1885          JSR     PRINTSIZEOP
00002400  4EB9 0000252C           1886          JSR     PRINT_ADDQ_DATA
00002406  4EB9 00002856           1887          JSR     PRINTCOMMA
0000240C  4EB9 00002540           1888          JSR     PRINT_ADDA_Dn_OR_An
00002412  4EB9 00002862           1889          JSR     PRINTNEWLINE
00002418  4EB9 000028B6           1890          JSR     CLEAR_ALL
0000241E                          1891  
0000241E  341A                    1892          MOVE.W  (A2)+,D2
00002420  B5F8 0004               1893          CMP.L   ENADR,A2   ; keep looping until reach the end
00002424  6D00 ECCC               1894          BLT     LOOPMEM
00002428  6000 049C               1895          BRA     DONE
0000242C                          1896  PRINT_ADDQ_EA:
0000242C  4EB9 0000289A           1897          JSR     PRINT_PC
00002432  43F8 013C               1898          LEA     DISADDQ,A1
00002436  103C 000E               1899          MOVE.B  #14,D0
0000243A  4E4F                    1900          TRAP    #15
0000243C                          1901  
0000243C  4EB9 00002672           1902          JSR     PRINTSIZEOP
00002442  4EB9 0000252C           1903          JSR     PRINT_ADDQ_DATA
00002448  4EB9 00002856           1904          JSR     PRINTCOMMA
0000244E  4EB9 0000258A           1905          JSR     PRINT_ADDA_EADDR
00002454  4EB9 00002862           1906          JSR     PRINTNEWLINE
0000245A  4EB9 000028B6           1907          JSR     CLEAR_ALL
00002460                          1908  
00002460  3412                    1909          MOVE.W  (A2),D2
00002462  B5F8 0004               1910          CMP.L   ENADR,A2   ; keep looping until reach the end
00002466  6D00 EC8A               1911          BLT     LOOPMEM
0000246A  6000 045A               1912          BRA     DONE 
0000246E                          1913  PRINT_ADDQ_INDIRECT:
0000246E  4EB9 0000289A           1914          JSR     PRINT_PC
00002474  43F8 013C               1915          LEA     DISADDQ,A1
00002478  103C 000E               1916          MOVE.B  #14,D0
0000247C  4E4F                    1917          TRAP    #15
0000247E                          1918  
0000247E  4EB9 00002672           1919          JSR     PRINTSIZEOP
00002484  4EB9 0000252C           1920          JSR     PRINT_ADDQ_DATA
0000248A  4EB9 00002856           1921          JSR     PRINTCOMMA
00002490  4EB9 00002566           1922          JSR     PRINT_ADDA_INDIRECT_TYPE
00002496  4EB9 00002862           1923          JSR     PRINTNEWLINE
0000249C  4EB9 000028B6           1924          JSR     CLEAR_ALL
000024A2                          1925  
000024A2  341A                    1926          MOVE.W  (A2)+,D2
000024A4  B5F8 0004               1927          CMP.L   ENADR,A2   ; keep looping until reach the end
000024A8  6D00 EC48               1928          BLT     LOOPMEM
000024AC  6000 0418               1929          BRA     DONE
000024B0                          1930  PRINT_SUB_Dn:
000024B0                          1931  *   D7 - register mode, D4 - register number
000024B0                          1932  *   D6 - opmode, D5 - register
000024B0  4EB9 0000289A           1933          JSR     PRINT_PC
000024B6  43F8 0141               1934          LEA     DISSUB,A1
000024BA  103C 000E               1935          MOVE.B  #14,D0
000024BE  4E4F                    1936          TRAP    #15
000024C0                          1937  
000024C0  4EB9 0000259E           1938          JSR     PRINT_ADD_OPMODE
000024C6                          1939          * Check if its Dn, ea *
000024C6  0C06 0008               1940          CMPI.B  #8,D6 
000024CA  6600 FDEA               1941          BNE     PRINT_ADD_Dn_Ea
000024CE                          1942  
000024CE  4EB9 00002540           1943          JSR     PRINT_ADDA_Dn_OR_An
000024D4  4EB9 00002856           1944          JSR     PRINTCOMMA
000024DA  3805                    1945          MOVE.W  D5,D4
000024DC  4EB9 000026B0           1946          JSR     PRINTDn
000024E2  4EB9 00002862           1947          JSR     PRINTNEWLINE
000024E8  4EB9 000028B6           1948          JSR     CLEAR_ALL
000024EE                          1949  
000024EE  341A                    1950          MOVE.W  (A2)+,D2
000024F0  B5F8 0004               1951          CMP.L   ENADR,A2   ; keep looping until reach the end
000024F4  6D00 EBFC               1952          BLT     LOOPMEM
000024F8  6000 03CC               1953          BRA     DONE
000024FC                          1954  PRINT_SUB_EA:
000024FC                          1955  *   D7 - EA, D4 - register number
000024FC                          1956  *   D6 - opmode, D5 - register
000024FC  4EB9 0000289A           1957          JSR     PRINT_PC
00002502  43F8 0141               1958          LEA     DISSUB,A1
00002506  103C 000E               1959          MOVE.B  #14,D0
0000250A  4E4F                    1960          TRAP    #15
0000250C                          1961  
0000250C  4EB9 0000259E           1962          JSR     PRINT_ADD_OPMODE
00002512  4EB9 000025AC           1963          JSR     PRINT_EA_DN_OR_DN_EA
00002518  4EB9 000028B6           1964          JSR     CLEAR_ALL
0000251E                          1965  
0000251E  3412                    1966          MOVE.W  (A2),D2
00002520  B5F8 0004               1967          CMP.L   ENADR,A2   ; keep looping until reach the end
00002524  6D00 EBCC               1968          BLT     LOOPMEM
00002528  6000 039C               1969          BRA     DONE
0000252C                          1970  ******** ADDQ FUNCTIONS ********
0000252C                          1971  PRINT_ADDQ_DATA:
0000252C  4EB9 0000281A           1972          JSR     PRINTPOUND
00002532  1206                    1973          MOVE.B  D6,D1
00002534  143C 000A               1974          MOVE.B  #10,D2
00002538  103C 000F               1975          MOVE.B  #15,D0
0000253C  4E4F                    1976          TRAP    #15
0000253E  4E75                    1977          RTS    
00002540                          1978  ******** ADDA FUNCTIONS ********
00002540                          1979  PRINT_ADDA_Dn_OR_An:
00002540  0C07 0000               1980          CMPI.B  #0,D7
00002544  6700 016A               1981          BEQ     PRINTDn
00002548  0C07 0001               1982          CMPI.B  #1,D7 
0000254C  6700 0202               1983          BEQ     PRINTAn
00002550  6000 0014               1984          BRA     PRINT_ADDA_INDIRECT_TYPE
00002554                          1985  PRINT_ADDA_OPMODE:
00002554  0C06 0003               1986          CMPI.B  #%011,D6
00002558  6700 013E               1987          BEQ     PRINTW
0000255C  0C06 0007               1988          CMPI.B  #%111,D6
00002560  6700 0142               1989          BEQ     PRINTL
00002564  4E75                    1990          RTS
00002566                          1991  PRINT_ADDA_INDIRECT_TYPE:
00002566  0C07 0002               1992          CMPI.B  #%010,D7
0000256A  6700 0284               1993          BEQ     PRINT_An_IN
0000256E  0C07 0003               1994          CMPI.B  #%011,D7
00002572  6700 028E               1995          BEQ     PRINT_An_POST
00002576  0C07 0004               1996          CMPI.B  #%100,D7
0000257A  6700 0292               1997          BEQ     PRINT_An_PRE
0000257E  4E75                    1998          RTS
00002580                          1999  IS_EA_OR_IMME_ADDA:
00002580  0C04 0004               2000          CMPI.B  #%100,D4
00002584  6700 0294               2001          BEQ     PRINTPOUND
00002588  4E75                    2002          RTS
0000258A                          2003  PRINT_ADDA_EADDR:
0000258A  4EB9 0000286E           2004          JSR     PRINTDOLLAR
00002590  2207                    2005          MOVE.L  D7,D1
00002592  143C 0010               2006          MOVE.B  #16,D2
00002596  103C 000F               2007          MOVE.B  #15,D0
0000259A  4E4F                    2008          TRAP    #15
0000259C  4E75                    2009          RTS
0000259E                          2010  ******** ADD FUNCTIONS ********
0000259E                          2011  PRINT_ADD_OPMODE:
0000259E  4EB9 0000260A           2012          JSR     ADD_EA_DN
000025A4  4EB9 0000264E           2013          JSR     ADD_DN_EA
000025AA  4E75                    2014          RTS
000025AC                          2015  PRINT_EA_DN_OR_DN_EA:
000025AC  0C46 0008               2016          CMPI.W  #8,D6
000025B0  6700 0008               2017          BEQ     PRINT_EA_DN
000025B4  6000 002C               2018          BRA     PRINT_DN_EA
000025B8  4E75                    2019          RTS
000025BA                          2020  ****************
000025BA                          2021  * Returns
000025BA                          2022  *   Prints ADD instruction from ea,Dn
000025BA                          2023  PRINT_EA_DN:
000025BA  4EB9 0000286E           2024          JSR     PRINTDOLLAR
000025C0  2207                    2025          MOVE.L  D7,D1
000025C2  143C 0010               2026          MOVE.B  #16,D2
000025C6  103C 000F               2027          MOVE.B  #15,D0
000025CA  4E4F                    2028          TRAP    #15
000025CC  4EB9 00002856           2029          JSR     PRINTCOMMA
000025D2  3805                    2030          MOVE.W  D5,D4
000025D4  4EB9 000026B0           2031          JSR     PRINTDn
000025DA  4EB9 00002862           2032          JSR     PRINTNEWLINE
000025E0  4E75                    2033          RTS
000025E2                          2034  ****************
000025E2                          2035  * Returns
000025E2                          2036  *   Prints ADD instruction from Dn,ea
000025E2                          2037  PRINT_DN_EA:
000025E2  3805                    2038          MOVE.W  D5,D4
000025E4  4EB9 000026B0           2039          JSR     PRINTDn
000025EA  4EB9 00002856           2040          JSR     PRINTCOMMA
000025F0  4EB9 0000286E           2041          JSR     PRINTDOLLAR
000025F6                          2042  
000025F6  2207                    2043          MOVE.L  D7,D1
000025F8  143C 0010               2044          MOVE.B  #16,D2
000025FC  103C 000F               2045          MOVE.B  #15,D0
00002600  4E4F                    2046          TRAP    #15
00002602  4EB9 00002862           2047          JSR     PRINTNEWLINE
00002608  4E75                    2048          RTS
0000260A                          2049  ******************
0000260A                          2050  * Returns
0000260A                          2051  *   D6 - contains %1000 if ADD mode is ea,Dn
0000260A                          2052  ADD_EA_DN:
0000260A  0C06 0000               2053          CMPI.B  #0,D6
0000260E  4EB9 00002668           2054          JSR     IS_EA_TO_DN
00002614  6700 0076               2055          BEQ     PRINTB
00002618  0C06 0008               2056          CMPI.B  #8,D6      ; MOVE alters Z tag, must get it back.
0000261C  6700 006E               2057          BEQ     PRINTB
00002620                          2058  
00002620  0C46 0001               2059          CMPI.W  #%001,D6
00002624  4EB9 00002668           2060          JSR     IS_EA_TO_DN
0000262A  6700 006C               2061          BEQ     PRINTW
0000262E  0C06 0008               2062          CMPI.B  #8,D6   ; MOVE alters Z tag, must get it back.
00002632  6700 0064               2063          BEQ     PRINTW
00002636                          2064  
00002636  0C46 0002               2065          CMPI.W  #%010,D6
0000263A  4EB9 00002668           2066          JSR     IS_EA_TO_DN
00002640  6700 0062               2067          BEQ     PRINTL
00002644  0C06 0008               2068          CMPI.B  #8,D6   ; MOVE alters Z tag, must get it back.
00002648  6700 005A               2069          BEQ     PRINTL
0000264C  4E75                    2070          RTS
0000264E                          2071  ADD_DN_EA:
0000264E  0C46 0004               2072          CMPI.W  #%100,D6
00002652  6700 0038               2073          BEQ     PRINTB
00002656  0C46 0005               2074          CMPI.W  #%101,D6
0000265A  6700 003C               2075          BEQ     PRINTW
0000265E  0C46 0006               2076          CMPI.W  #%110,D6
00002662  6700 0040               2077          BEQ     PRINTL
00002666  4E75                    2078          RTS
00002668                          2079  IS_EA_TO_DN:
00002668  6700 0004               2080          BEQ     TRUE_EA_TO_DN
0000266C  4E75                    2081          RTS
0000266E                          2082  TRUE_EA_TO_DN:
0000266E  7C08                    2083          MOVE.L  #8,D6
00002670  4E75                    2084          RTS
00002672                          2085  ****************************************
00002672                          2086  ******** PRINT INSTRUCTION SIZE ********
00002672                          2087  ****************************************
00002672                          2088  PRINTSIZEOP:
00002672  0C05 0000               2089          CMPI.B  #$0,D5
00002676  6700 0014               2090          BEQ     PRINTB
0000267A  0C05 0001               2091          CMPI.B  #$1,D5
0000267E  6700 0018               2092          BEQ     PRINTW
00002682  0C05 0002               2093          CMPI.B  #$2,D5
00002686  6700 001C               2094          BEQ     PRINTL
0000268A  4E75                    2095          RTS
0000268C                          2096  PRINTB:
0000268C  43F8 0169               2097          LEA     DISB,A1
00002690  103C 000E               2098          MOVE.B  #14,D0
00002694  4E4F                    2099          TRAP    #15
00002696  4E75                    2100          RTS
00002698                          2101  PRINTW:
00002698  43F8 016E               2102          LEA     DISW,A1
0000269C  103C 000E               2103          MOVE.B  #14,D0
000026A0  4E4F                    2104          TRAP    #15
000026A2  4E75                    2105          RTS
000026A4                          2106  PRINTL:
000026A4  43F8 0173               2107          LEA     DISL,A1
000026A8  103C 000E               2108          MOVE.B  #14,D0
000026AC  4E4F                    2109          TRAP    #15
000026AE  4E75                    2110          RTS
000026B0                          2111  **********************************************
000026B0                          2112  ******** PRINT ADDRESS/DATA REGISTERS ********
000026B0                          2113  **********************************************
000026B0                          2114  * D4 should contain data register
000026B0                          2115  PRINTDn:
000026B0  B83C 0007               2116          CMP.B #$7,D4
000026B4  6700 008E               2117          BEQ PRINTD7
000026B8  B83C 0006               2118          CMP.B #$6,D4
000026BC  6700 007A               2119          BEQ PRINTD6
000026C0  B83C 0005               2120          CMP.B #$5,D4
000026C4  6700 0066               2121          BEQ PRINTD5
000026C8  B83C 0004               2122          CMP.B #$4,D4
000026CC  6700 0052               2123          BEQ PRINTD4
000026D0  B83C 0003               2124          CMP.B #$3,D4
000026D4  6700 003E               2125          BEQ PRINTD3
000026D8  B83C 0002               2126          CMP.B #$2,D4
000026DC  6700 002A               2127          BEQ PRINTD2
000026E0  B83C 0001               2128          CMP.B #$1,D4
000026E4  6700 0016               2129          BEQ PRINTD1
000026E8  B83C 0000               2130          CMP.B #$0,D4
000026EC  6700 0002               2131          BEQ PRINTD0
000026F0                          2132  PRINTD0:
000026F0  43F8 0178               2133          LEA     DISD0,A1
000026F4  103C 000E               2134          MOVE.B  #14, D0
000026F8  4E4F                    2135          TRAP    #15
000026FA  4E75                    2136          RTS
000026FC                          2137  PRINTD1:
000026FC  43F8 017B               2138          LEA     DISD1,A1
00002700  103C 000E               2139          MOVE.B  #14, D0
00002704  4E4F                    2140          TRAP    #15
00002706  4E75                    2141          RTS
00002708                          2142  PRINTD2:
00002708  43F8 017E               2143          LEA     DISD2,A1
0000270C  103C 000E               2144          MOVE.B  #14, D0
00002710  4E4F                    2145          TRAP    #15
00002712  4E75                    2146          RTS
00002714                          2147  PRINTD3:
00002714  43F8 0181               2148          LEA     DISD3,A1
00002718  103C 000E               2149          MOVE.B  #14, D0
0000271C  4E4F                    2150          TRAP    #15
0000271E  4E75                    2151          RTS
00002720                          2152  PRINTD4:
00002720  43F8 0184               2153          LEA     DISD4,A1
00002724  103C 000E               2154          MOVE.B  #14, D0
00002728  4E4F                    2155          TRAP    #15
0000272A  4E75                    2156          RTS
0000272C                          2157  PRINTD5:
0000272C  43F8 0187               2158          LEA     DISD5,A1
00002730  103C 000E               2159          MOVE.B  #14, D0
00002734  4E4F                    2160          TRAP    #15
00002736  4E75                    2161          RTS
00002738                          2162  PRINTD6:
00002738  43F8 018A               2163          LEA     DISD6,A1
0000273C  103C 000E               2164          MOVE.B  #14, D0
00002740  4E4F                    2165          TRAP    #15
00002742  4E75                    2166          RTS
00002744                          2167  PRINTD7:
00002744  43F8 018D               2168          LEA     DISD7,A1
00002748  103C 000E               2169          MOVE.B  #14, D0
0000274C  4E4F                    2170          TRAP    #15
0000274E  4E75                    2171          RTS
00002750                          2172          
00002750                          2173  * D4 should contain data register
00002750                          2174  PRINTAn:
00002750  B83C 0007               2175          CMP.B #$7,D4
00002754  6700 008E               2176          BEQ PRINTA7
00002758  B83C 0006               2177          CMP.B #$6,D4
0000275C  6700 007A               2178          BEQ PRINTA6
00002760  B83C 0005               2179          CMP.B #$5,D4
00002764  6700 0066               2180          BEQ PRINTA5
00002768  B83C 0004               2181          CMP.B #$4,D4
0000276C  6700 0052               2182          BEQ PRINTA4
00002770  B83C 0003               2183          CMP.B #$3,D4
00002774  6700 003E               2184          BEQ PRINTA3
00002778  B83C 0002               2185          CMP.B #$2,D4
0000277C  6700 002A               2186          BEQ PRINTA2
00002780  B83C 0001               2187          CMP.B #$1,D4
00002784  6700 0016               2188          BEQ PRINTA1
00002788  B83C 0000               2189          CMP.B #$0,D4
0000278C  6700 0002               2190          BEQ PRINTA0
00002790                          2191  PRINTA0:
00002790  43F8 0190               2192          LEA     DISA0,A1
00002794  103C 000E               2193          MOVE.B  #14, D0
00002798  4E4F                    2194          TRAP    #15
0000279A  4E75                    2195          RTS
0000279C                          2196  PRINTA1:
0000279C  43F8 0193               2197          LEA     DISA1,A1
000027A0  103C 000E               2198          MOVE.B  #14, D0
000027A4  4E4F                    2199          TRAP    #15
000027A6  4E75                    2200          RTS
000027A8                          2201  PRINTA2:
000027A8  43F8 0196               2202          LEA     DISA2,A1
000027AC  103C 000E               2203          MOVE.B  #14, D0
000027B0  4E4F                    2204          TRAP    #15
000027B2  4E75                    2205          RTS
000027B4                          2206  PRINTA3:
000027B4  43F8 0199               2207          LEA     DISA3,A1
000027B8  103C 000E               2208          MOVE.B  #14, D0
000027BC  4E4F                    2209          TRAP    #15
000027BE  4E75                    2210          RTS
000027C0                          2211  PRINTA4:
000027C0  43F8 019C               2212          LEA     DISA4,A1
000027C4  103C 000E               2213          MOVE.B  #14, D0
000027C8  4E4F                    2214          TRAP    #15
000027CA  4E75                    2215          RTS
000027CC                          2216  PRINTA5:
000027CC  43F8 019F               2217          LEA     DISA5,A1
000027D0  103C 000E               2218          MOVE.B  #14, D0
000027D4  4E4F                    2219          TRAP    #15
000027D6  4E75                    2220          RTS
000027D8                          2221  PRINTA6:
000027D8  43F8 01A2               2222          LEA     DISA6,A1
000027DC  103C 000E               2223          MOVE.B  #14, D0
000027E0  4E4F                    2224          TRAP    #15
000027E2  4E75                    2225          RTS
000027E4                          2226  PRINTA7:
000027E4  43F8 01A5               2227          LEA     DISA7,A1
000027E8  103C 000E               2228          MOVE.B  #14, D0
000027EC  4E4F                    2229          TRAP    #15
000027EE  4E75                    2230          RTS
000027F0                          2231  PRINT_An_IN:
000027F0  4EB9 00002826           2232          JSR     PRINTLEFTPAREN
000027F6  4EB8 2750               2233          JSR     PRINTAn
000027FA  4EB9 00002832           2234          JSR     PRINTRIGHTPAREN
00002800  4E75                    2235          RTS
00002802                          2236  PRINT_An_POST:
00002802  4EB8 27F0               2237          JSR     PRINT_An_IN
00002806  4EB9 0000283E           2238          JSR     PRINTPLUS
0000280C  4E75                    2239          RTS
0000280E                          2240  PRINT_An_PRE:
0000280E  4EB9 0000284A           2241          JSR     PRINTMINUS
00002814  4EB8 27F0               2242          JSR     PRINT_An_IN
00002818  4E75                    2243          RTS
0000281A                          2244  
0000281A                          2245          
0000281A                          2246  ****************************************
0000281A                          2247  ******** PRINT COMMON CHARCTERS ********
0000281A                          2248  ****************************************
0000281A                          2249  PRINTPOUND:
0000281A  43F8 00ED               2250          LEA     DISPOUND,A1
0000281E  103C 000E               2251          MOVE.B  #14,D0
00002822  4E4F                    2252          TRAP    #15
00002824  4E75                    2253          RTS
00002826                          2254  PRINTLEFTPAREN:
00002826  43F8 00F1               2255          LEA     DISPARENL,A1
0000282A  103C 000E               2256          MOVE.B  #14,D0
0000282E  4E4F                    2257          TRAP    #15
00002830  4E75                    2258          RTS
00002832                          2259  PRINTRIGHTPAREN:
00002832  43F8 00F3               2260          LEA     DISPARENR,A1
00002836  103C 000E               2261          MOVE.B  #14,D0
0000283A  4E4F                    2262          TRAP    #15
0000283C  4E75                    2263          RTS
0000283E                          2264  PRINTPLUS:
0000283E  43F8 00F5               2265          LEA     DISPLUS,A1
00002842  103C 000E               2266          MOVE.B  #14,D0
00002846  4E4F                    2267          TRAP    #15
00002848  4E75                    2268          RTS
0000284A                          2269  PRINTMINUS:
0000284A  43F8 00F7               2270          LEA     DISMIN,A1
0000284E  103C 000E               2271          MOVE.B  #14,D0
00002852  4E4F                    2272          TRAP    #15
00002854  4E75                    2273          RTS
00002856                          2274  PRINTCOMMA:
00002856  43F8 00EB               2275          LEA     DISCOMMA,A1
0000285A  103C 000E               2276          MOVE.B  #14,D0
0000285E  4E4F                    2277          TRAP    #15
00002860  4E75                    2278          RTS
00002862                          2279  PRINTNEWLINE:
00002862  43F8 00E8               2280          LEA     NEWLINE,A1
00002866  103C 000E               2281          MOVE.B  #14,D0
0000286A  4E4F                    2282          TRAP    #15
0000286C  4E75                    2283          RTS
0000286E                          2284  PRINTDOLLAR:
0000286E  43F8 00EF               2285          LEA     DISDOLLAR,A1
00002872  103C 000E               2286          MOVE.B  #14,D0
00002876  4E4F                    2287          TRAP    #15
00002878  4E75                    2288          RTS
0000287A                          2289  ***********************
0000287A                          2290  ******** MISC. ********
0000287A                          2291  ***********************
0000287A                          2292  WAIT:
0000287A  6D00 001C               2293          BLT     RETURN     
0000287E  43F8 0083               2294          LEA     DISWAIT,A1
00002882  103C 000E               2295          MOVE.B  #14,D0
00002886  4E4F                    2296          TRAP    #15
00002888                          2297  
00002888  103C 0005               2298          MOVE.B  #5,D0
0000288C  4E4F                    2299          TRAP    #15
0000288E                          2300  
0000288E  21FC 00000000 0008      2301          MOVE.L  #0,LOOPCOUNT
00002896  4E75                    2302          RTS
00002898                          2303  RETURN:
00002898  4E75                    2304          RTS
0000289A                          2305  PRINT_PC:
0000289A  2238 000C               2306          MOVE.L  PC_COUNT,D1
0000289E  143C 0010               2307          MOVE.B  #16,D2
000028A2  103C 000F               2308          MOVE.B  #15,D0
000028A6  4E4F                    2309          TRAP    #15
000028A8  4281                    2310          CLR.L   D1   ; prevent dirty writing
000028AA  43F8 00F9               2311          LEA     DISTAB,A1
000028AE  103C 000E               2312          MOVE.B  #14,D0
000028B2  4E4F                    2313          TRAP    #15
000028B4                          2314  
000028B4  4E75                    2315          RTS
000028B6                          2316  CLEAR_ALL:
000028B6  4281                    2317          CLR.L   D1
000028B8  4282                    2318          CLR.L   D2
000028BA  4283                    2319          CLR.L   D3
000028BC  4284                    2320          CLR.L   D4
000028BE  4285                    2321          CLR.L   D5
000028C0  4286                    2322          CLR.L   D6
000028C2  4287                    2323          CLR.L   D7
000028C4  4E75                    2324          RTS
000028C6                          2325  DONE:
000028C6  43F8 00AF               2326          LEA     DISDONE,A1
000028CA  103C 000E               2327          MOVE.B  #14,D0
000028CE  4E4F                    2328          TRAP    #15
000028D0  4281                    2329          CLR.L   D1          ; clear up the data registers used.
000028D2  4282                    2330          CLR.L   D2
000028D4  4283                    2331          CLR.L   D3
000028D6  4287                    2332          CLR.L   D7
000028D8                          2333          END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD_DN_EA           264E
ADD_EA_DN           260A
ADD_LONG_ADDR       194E
ADD_WORD_ADDR       1946
ASKEN               37
ASKST               11
BRANCH_LONG         16A8
BRANCH_WORD         166A
CHARLOOP            1020
CHECK_IS_MOVEM_OR_JSR  1172
CLEAR_ALL           28B6
CLOSING             20C4
CONVERTTOHEX        1038
CR                  D
DECODEADDS          12EE
DECODEASL_REG       1232
DECODEASR_REG       126A
DECODEBRANCHES      141E
DECODEJSR_REG       1188
DECODELEA_MEM       11A2
DECODELOGICS        1126
DECODELOGIC_CODE    1148
DECODELSL_REG       1218
DECODELSR_REG       1250
DECODENOP           110A
DECODENOT_REG       117E
DECODEROL_REG       123C
DECODEROR_REG       1274
DECODERTS           1118
DECODESHIFTS        11F0
DECODE_ADDA_ANDN    1356
DECODE_ADDA_EA      137C
DECODE_ADDQ         1386
DECODE_ADDQ_ANDN    1396
DECODE_ADDQ_EA      13CC
DECODE_ADD_DN       1324
DECODE_ADD_EA       133A
DECODE_AND          11BC
DECODE_ASL_MEM      12AC
DECODE_ASR_MEM      12DA
DECODE_BEQ          1614
DECODE_BGE          15BE
DECODE_BGT          1512
DECODE_BLE          1568
DECODE_BLT          14BC
DECODE_BRA          1466
DECODE_LSL_MEM      1292
DECODE_LSR_MEM      12C0
DECODE_MOVE         1738
DECODE_MOVEA        1784
DECODE_MOVEM        17BA
DECODE_MOVEQ        17A6
DECODE_OR           11D6
DECODE_REG          120E
DECODE_ROL_MEM      12B6
DECODE_ROR_MEM      12E4
DECODE_SHIFT_MEM    1288
DECODE_SUB          13D6
DECODE_SUB_DN       13E6
DECODE_SUB_EA       1414
DETERMINE_ADDR_MODE  19CE
DISA0               190
DISA1               193
DISA2               196
DISA3               199
DISA4               19C
DISA5               19F
DISA6               1A2
DISA7               1A5
DISADD              133
DISADDA             137
DISADDQ             13C
DISAND              114
DISASL              123
DISASR              127
DISB                169
DISBEQ              163
DISBGE              15D
DISBGT              151
DISBLE              157
DISBLT              14B
DISBRA              145
DISCOMMA            EB
DISD0               178
DISD1               17B
DISD2               17E
DISD3               181
DISD4               184
DISD5               187
DISD6               18A
DISD7               18D
DISDATA             1A8
DISDOLLAR           EF
DISDONE             AF
DISEN               71
DISJSR              108
DISL                173
DISLEA              10E
DISLSL              11B
DISLSR              11F
DISMIN              F7
DISNOP              FC
DISNOT              104
DISOR               118
DISPARENL           F1
DISPARENR           F3
DISPLUS             F5
DISPOUND            ED
DISROL              12B
DISROR              12F
DISRTS              100
DISST               5D
DISSUB              141
DISTAB              F9
DISW                16E
DISWAIT             83
DOLLAR              20BC
DOLLAR_OR_HASHTAG   20A8
DONE                28C6
ENADR               4
ENDADR              100E
GET_ADDQ_DATA       18D8
GET_ADDQ_SIZE       18CA
GET_ADD_EA          192A
GET_ADD_MODE_REG    18E8
GET_ADD_OPMODE      190E
GET_ADD_REG         191C
GET_AND_DATA        189E
GET_DISPLACEMENT    16E6
GET_JSR_LOGIC_DATA  1868
GET_LEA_LOGIC_DATA  187C
GET_MEM_SHIFT_DATA  1988
GET_MOVE_DEST       17DE
GET_MOVE_SIZE       17D0
GET_MOVE_SOURCE     17F6
GET_NOT_LOGIC_DATA  184A
GET_REG_SHIFT_DATA  1956
HASHTAG             20B4
INVALID             10A2
INVALIDMSG          B9
INVALIDOP           180A
ISEND               102C
ISLASTIN            108E
ISLOW               1066
ISUPP               1050
IS_EA_OR_IMME_ADDA  2580
IS_EA_TO_DN         2668
IS_IN_MEM_BOOL      10
IS_MEM_INDIRECT     19B2
LF                  A
LONG_ADDR           19EA
LOOPCOUNT           8
LOOPMEM             10F2
NEWLINE             E8
PC_COUNT            C
PRESSEDENT          108C
PRINTA0             2790
PRINTA1             279C
PRINTA2             27A8
PRINTA3             27B4
PRINTA4             27C0
PRINTA5             27CC
PRINTA6             27D8
PRINTA7             27E4
PRINTAN             2750
PRINTASL_MEM        21EA
PRINTASL_REG        2122
PRINTASR_MEM        220A
PRINTASR_REG        2144
PRINTB              268C
PRINTCOMMA          2856
PRINTD0             26F0
PRINTD1             26FC
PRINTD2             2708
PRINTD3             2714
PRINTD4             2720
PRINTD5             272C
PRINTD6             2738
PRINTD7             2744
PRINTDN             26B0
PRINTDOLLAR         286E
PRINTJSR_ABS_ADR    1C10
PRINTJSR_ADR        1BF4
PRINTL              26A4
PRINTLEA_ABS_ADR    1C78
PRINTLEA_ADR        1C4E
PRINTLEFTPAREN      2826
PRINTLSL_MEM        21AA
PRINTLSL_REG        20DE
PRINTLSR_MEM        21CA
PRINTLSR_REG        2100
PRINTMINUS          284A
PRINTNEWLINE        2862
PRINTNOP            19F2
PRINTNOT            1AF0
PRINTNOT_ABS_ADR    1BB0
PRINTNOT_INAN       1B3E
PRINTNOT_POS_INAN   1B60
PRINTNOT_PRE_INAN   1B88
PRINTNOT_REG        1B1C
PRINTPLUS           283E
PRINTPOUND          281A
PRINTRIGHTPAREN     2832
PRINTROL_MEM        222A
PRINTROL_REG        2166
PRINTROR_MEM        224A
PRINTROR_REG        2188
PRINTRTS            1A1C
PRINTSIZEOP         2672
PRINTW              2698
PRINT_ADDA_DNAN     2318
PRINT_ADDA_DN_OR_AN  2540
PRINT_ADDA_EA       23A0
PRINT_ADDA_EADDR    258A
PRINT_ADDA_INDIRECT  235C
PRINT_ADDA_INDIRECT_TYPE  2566
PRINT_ADDA_OPMODE   2554
PRINT_ADDQ_ANDN     23EA
PRINT_ADDQ_DATA     252C
PRINT_ADDQ_EA       242C
PRINT_ADDQ_INDIRECT  246E
PRINT_ADD_DN        226A
PRINT_ADD_DN_EA     22B6
PRINT_ADD_EA        22E8
PRINT_ADD_OPMODE    259E
PRINT_AND_ABS_ADR_DN  1D90
PRINT_AND_DATA      1CC4
PRINT_AND_DN_ABS_ADR  1E5A
PRINT_AND_DN_DN     1CFC
PRINT_AND_DN_EA     1DD0
PRINT_AND_DN_INAN   1DF4
PRINT_AND_DN_POS_INAN  1E12
PRINT_AND_DN_PRE_INAN  1E36
PRINT_AND_EA_DN     1CD0
PRINT_AND_INAN_DN   1D1E
PRINT_AND_OPENING   1E9A
PRINT_AND_POS_INAN_DN  1D40
PRINT_AND_PRE_INAN_DN  1D68
PRINT_AN_IN         27F0
PRINT_AN_POST       2802
PRINT_AN_PRE        280E
PRINT_BEQ           172C
PRINT_BGE           1720
PRINT_BGT           1708
PRINT_BLE           1714
PRINT_BLT           16FC
PRINT_BRA           16F0
PRINT_DN_EA         25E2
PRINT_EA_DN         25BA
PRINT_EA_DN_OR_DN_EA  25AC
PRINT_IS_MEM_IN     1AC6
PRINT_MEM_SHIFT_INFO  1A96
PRINT_OR_ABS_ADR_DN  1F82
PRINT_OR_DATA       1EB6
PRINT_OR_DN_ABS_ADR  204C
PRINT_OR_DN_DN      1EEE
PRINT_OR_DN_EA      1FC2
PRINT_OR_DN_INAN    1FE6
PRINT_OR_DN_POS_INAN  2004
PRINT_OR_DN_PRE_INAN  2028
PRINT_OR_EA_DN      1EC2
PRINT_OR_INAN_DN    1F10
PRINT_OR_OPENING    208C
PRINT_OR_POS_INAN_DN  1F32
PRINT_OR_PRE_INAN_DN  1F5A
PRINT_PC            289A
PRINT_REG_SHIFT_INFO  1A70
PRINT_SHIFT_REG_CONT  1A56
PRINT_SUB_DN        24B0
PRINT_SUB_EA        24FC
READMEM             10DA
RETURN              2898
SHIFT4NXT           107E
SHIFT_IN1           1A46
STADR               0
START               1000
STARTADR            1000
TRUE_EA_TO_DN       266E
VALIDATEIN          10C0
WAIT                287A
WORD_ADDR           19E2
