00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/9/2020 1:09:30 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Disassembler
00000000                             3  * Written by : Cool Dudes (Cheuk-Hang Tse, Leonardo Mota-Villaraldo,
00000000                             4  *              Sean Le, Zachary Joseph Morrison)
00000000                             5  * Date       : 11/02/2020
00000000                             6  * Description: Disassemmbles M68000 machine code into instructions
00000000                             7  *-----------------------------------------------------------
00000000                             8      
00000000  =0000000A                  9  LF      EQU     $0A      ; Line feed
00000000  =0000000D                 10  CR      EQU     $0D      ; Carriage return
00000000                            11  STADR   DS.L    1        ; allocate long in memory for
00000004                            12                           ; starting address
00000004                            13  ENADR   DS.L    1        ; allocate for end address
00000008                            14  LOOPCOUNT DS.L  1       ; keep track of loop
0000000C= 00000001                  15  PC_COUNT  DC.L  1       ; keep track of pc
00000010= 01                        16  IS_IN_MEM_BOOL DC.B  1
00000011                            17  
00000011                            18  ******** USER INPUT/OUTPUT/INTERACTIONS ********
00000011= 50 6C 65 61 73 65 ...     19  ASKST   DC.B    'Please enter starting address in hex:',0
00000037= 0D 0A 50 6C 65 61 ...     20  ASKEN   DC.B    CR,LF,'Please enter ending address in hex:',0
0000005D= 0D 0A 53 74 61 72 ...     21  DISST   DC.B    CR,LF,'Starting Address:',0
00000071= 0D 0A 45 6E 64 69 ...     22  DISEN   DC.B    CR,LF,'Ending Address:',0
00000083= 50 6C 65 61 73 65 ...     23  DISWAIT DC.B    'Please press any key to continue displaying',0
000000AF= 46 69 6E 69 73 68 ...     24  DISDONE DC.B    'Finished.',0
000000B9= 0D 0A 59 6F 75 20 ...     25  INVALIDMSG DC.B    CR,LF,'You entered an invalid address. Try again.',CR,LF,0
000000E8                            26  
000000E8                            27  ******** COMMON CHARACTERS ********
000000E8= 0D 0A 00                  28  NEWLINE DC.B    CR,LF,0
000000EB= 2C 00                     29  DISCOMMA DC.B   ',',0
000000ED= 23 00                     30  DISPOUND DC.B   '#',0
000000EF= 24 00                     31  DISDOLLAR DC.B  '$',0
000000F1= 28 00                     32  DISPARENL DC.B   '(',0
000000F3= 29 00                     33  DISPARENR DC.B   ')',0
000000F5= 2B 00                     34  DISPLUS DC.B    '+',0
000000F7= 2D 00                     35  DISMIN  DC.B    '-',0
000000F9= 20 20 00                  36  DISTAB DC.B     '  ',0
000000FC                            37  ******** INSTRUCTION PRINTS ********
000000FC= 4E 4F 50 00               38  DISNOP  DC.B    'NOP',0
00000100= 52 54 53 00               39  DISRTS  DC.B    'RTS',0
00000104= 4E 4F 54 00               40  DISNOT  DC.B    'NOT',0
00000108= 4A 53 52 20 20 00         41  DISJSR  DC.B    'JSR  ',0
0000010E= 4C 45 41 20 20 00         42  DISLEA  DC.B    'LEA  ',0
00000114= 41 4E 44 00               43  DISAND  DC.B    'AND',0
00000118= 4F 52 00                  44  DISOR   DC.B    'OR',0
0000011B= 4C 53 4C 00               45  DISLSL  DC.B    'LSL',0
0000011F= 4C 53 52 00               46  DISLSR  DC.B    'LSR',0
00000123= 41 53 4C 00               47  DISASL  DC.B    'ASL',0
00000127= 41 53 52 00               48  DISASR  DC.B    'ASR',0
0000012B= 52 4F 4C 00               49  DISROL  DC.B    'ROL',0
0000012F= 52 4F 52 00               50  DISROR  DC.B    'ROR',0
00000133= 41 44 44 00               51  DISADD  DC.B    'ADD',0
00000137= 41 44 44 41 00            52  DISADDA DC.B    'ADDA',0
0000013C= 41 44 44 51 00            53  DISADDQ DC.B    'ADDQ',0
00000141= 53 55 42 00               54  DISSUB  DC.B    'SUB',0
00000145= 42 52 41 20 20 00         55  DISBRA  DC.B    'BRA  ',0
0000014B= 42 4C 54 20 20 00         56  DISBLT  DC.B    'BLT  ',0
00000151= 42 47 54 20 20 00         57  DISBGT  DC.B    'BGT  ',0
00000157= 42 4C 45 20 20 00         58  DISBLE  DC.B    'BLE  ',0
0000015D= 42 47 45 20 20 00         59  DISBGE  DC.B    'BGE  ',0
00000163= 42 45 51 20 20 00         60  DISBEQ  DC.B    'BEQ  ',0
00000169                            61  ******** SIZE PRINTS ********
00000169= 2E 42 20 20 00            62  DISB    DC.B    '.B  ',0
0000016E= 2E 57 20 20 00            63  DISW    DC.B    '.W  ',0
00000173= 2E 4C 20 20 00            64  DISL    DC.B    '.L  ',0
00000178                            65  
00000178                            66  ******** DATAREGISTER/ADDRESS REGISTER PRINTS ********
00000178= 44 30 00                  67  DISD0   DC.B    'D0',0
0000017B= 44 31 00                  68  DISD1   DC.B    'D1',0
0000017E= 44 32 00                  69  DISD2   DC.B    'D2',0
00000181= 44 33 00                  70  DISD3   DC.B    'D3',0
00000184= 44 34 00                  71  DISD4   DC.B    'D4',0
00000187= 44 35 00                  72  DISD5   DC.B    'D5',0
0000018A= 44 36 00                  73  DISD6   DC.B    'D6',0
0000018D= 44 37 00                  74  DISD7   DC.B    'D7',0
00000190= 41 30 00                  75  DISA0   DC.B    'A0',0
00000193= 41 31 00                  76  DISA1   DC.B    'A1',0
00000196= 41 32 00                  77  DISA2   DC.B    'A2',0
00000199= 41 33 00                  78  DISA3   DC.B    'A3',0
0000019C= 41 34 00                  79  DISA4   DC.B    'A4',0
0000019F= 41 35 00                  80  DISA5   DC.B    'A5',0
000001A2= 41 36 00                  81  DISA6   DC.B    'A6',0
000001A5= 41 37 00                  82  DISA7   DC.B    'A7',0
000001A8                            83  
000001A8                            84  ******** INVALID DATA ********
000001A8= 20 20 44 41 54 41 ...     85  DISDATA DC.B    '  DATA  ',0
00001000                            86          ORG     $1000     ; start at 1000
00001000                            87  START:          
00001000                            88  
00001000                            89  STARTADR:                   
00001000  43F8 0011                 90          LEA     ASKST,A1    ; load message to A1
00001004  103C 000D                 91          MOVE.B  #13,D0      ; use trap task 13
00001008  4E4F                      92          TRAP    #15
0000100A  6000 0014                 93          BRA     CHARLOOP    ; loop to get start address
0000100E                            94  ENDADR:
0000100E  43F8 0037                 95          LEA     ASKEN,A1    ; load message to A1
00001012  103C 000D                 96          MOVE.B  #13,D0      ; use trap task 13
00001016  4E4F                      97          TRAP    #15
00001018  1E3C 0001                 98          MOVE.B  #1,D7       ; set D7 to 1 (using as bool)
0000101C                            99                              ; to later check if asking for end
0000101C  6000 0002                100          BRA     CHARLOOP    ; loop to get end address
00001020                           101  CHARLOOP:
00001020  103C 0005                102          MOVE.B  #5,D0       ; loop through user input until two 
00001024                           103                              ; hexa characters are entered.
00001024  4E4F                     104          TRAP    #15
00001026  5203                     105          ADD.B   #1,D3
00001028  6D00 0002                106          BLT     ISEND
0000102C                           107  ISEND:
0000102C  B23C 000D                108          CMP.B   #$D,D1
00001030  6700 005A                109          BEQ     PRESSEDENT
00001034  6000 0002                110          BRA     CONVERTTOHEX
00001038                           111  
00001038                           112  * START: The following section converts ascii characters to
00001038                           113  * corresponding hex
00001038                           114  CONVERTTOHEX:
00001038  B23C 0030                115          CMP.B   #$30,D1     ; if the less than 0x30 not valid
0000103C  6D00 0064                116          BLT     INVALID
00001040  0401 0030                117          SUB.B   #$30,D1     ; offset by 0x30 
00001044  B23C 0009                118          CMP.B   #$9,D1      ; if greater than 0x9, could be a HEX letter
00001048  6E00 0006                119          BGT     ISUPP
0000104C  6000 0030                120          BRA     SHIFT4NXT
00001050                           121  ISUPP: * Checks if the character is a HEX letter in uppercase
00001050  5F01                     122          SUB.B   #$7,D1      ; offset by 0x07 
00001052  B23C 000A                123          CMP.B   #$A,D1      
00001056  6D00 004A                124          BLT     INVALID        ; if less than 0xA, invalid char
0000105A  B23C 000F                125          CMP.B   #$F,D1  
0000105E  6E00 0006                126          BGT     ISLOW       ; could be lowercase HEX letter
00001062  6000 001A                127          BRA     SHIFT4NXT
00001066                           128  ISLOW: * Checks if the character is a HEX letter in lowercase
00001066  0401 0020                129          SUB.B   #$20,D1     ; offset by 0x20
0000106A  B23C 000A                130          CMP.B   #$A,D1      ; if less than 0xA, invalid char
0000106E  6D00 0032                131          BLT     INVALID
00001072  B23C 000F                132          CMP.B   #$F,D1      ; if greater than 0xF, invalid char
00001076  6E00 002A                133          BGT     INVALID
0000107A  6000 0002                134          BRA     SHIFT4NXT
0000107E                           135  * END * 
0000107E                           136  
0000107E                           137  SHIFT4NXT:
0000107E  D401                     138          ADD.B  D1,D2
00001080  B63C 0008                139          CMP.B   #8,D3       ; check if reached max characters
00001084                           140                              ; otherwise bitshift for next char
00001084  6700 0008                141          BEQ     ISLASTIN    ; check if asking for last
00001088  E982                     142          ASL.L   #4,D2
0000108A  6094                     143          BRA     CHARLOOP
0000108C                           144  PRESSEDENT:
0000108C  E882                     145          ASR.L   #4,D2       ; remove the extra bit shift since when
0000108E                           146                              ; pressing enter max chars is 7
0000108E                           147  ISLASTIN:
0000108E  BE3C 0001                148          CMP.B   #1,D7       ; if D7 is set, asking for last input
00001092  6700 002C                149          BEQ     VALIDATEIN  ; branch to the next place if asking for end
00001096  4283                     150          CLR.L   D3          ; Clear character count
00001098  21C2 0000                151          MOVE.L  D2,STADR
0000109C  4282                     152          CLR.L   D2
0000109E  6000 FF6E                153          BRA     ENDADR      ; else ask for input
000010A2                           154  
000010A2                           155  INVALID:                    ; handle an invalid input
000010A2  43F8 00B9                156          LEA     INVALIDMSG,A1
000010A6  103C 000D                157          MOVE.B  #13,D0
000010AA  4E4F                     158          TRAP    #15
000010AC                           159  
000010AC  4280                     160          CLR.L   D0
000010AE  4281                     161          CLR.L   D1
000010B0  4282                     162          CLR.L   D2
000010B2  4283                     163          CLR.L   D3
000010B4  4284                     164          CLR.L   D4
000010B6  4285                     165          CLR.L   D5
000010B8  4286                     166          CLR.L   D6
000010BA  4287                     167          CLR.L   D7
000010BC  6000 FF42                168          BRA     STARTADR
000010C0                           169  VALIDATEIN:
000010C0  4283                     170          CLR.L   D3
000010C2  21C2 0004                171          MOVE.L  D2,ENADR    ; saving since latest address has not been saved yet
000010C6  2238 0000                172          MOVE.L  STADR,D1
000010CA  B481                     173          CMP.L   D1,D2       ; check if ending is before start
000010CC  65D4                     174          BLO     INVALID
000010CE  B2BC 00001000            175          CMP.L   #$1000,D1   ; check if start is before program start
000010D4  6DCC                     176          BLT     INVALID
000010D6  E209                     177          LSR.B   #1,D1       ; check starting address to avoid loading invalid address
000010D8  65C8                     178          BCS     INVALID     ; 68k only allows loading even addresses 
000010DA                           179  READMEM:
000010DA  4287                     180          CLR.L   D7
000010DC  4283                     181          CLR.L   D3     
000010DE  4282                     182          CLR.L   D2
000010E0                           183          * Clear the screen
000010E0  3239 0000FF00            184          MOVE.W  $FF00,D1
000010E6  103C 000F                185          MOVE.B  #15,D0
000010EA  4E4F                     186          TRAP    #15
000010EC                           187  
000010EC  4281                     188          CLR.L   D1
000010EE  2478 0000                189          MOVE.L  STADR,A2    ; load starting address
000010F2                           190  LOOPMEM:
000010F2  52B8 0008                191          ADDQ.L  #1,LOOPCOUNT
000010F6  0CB8 0000001E 0008       192          CMPI.L  #30,LOOPCOUNT
000010FE  4EB9 00002876            193          JSR     WAIT
00001104  21CA 000C                194          MOVE.L  A2,PC_COUNT
00001108  3412                     195          MOVE.W  (A2),D2    ; each instruction is at least a word in machine code
0000110A                           196          * Do action here *
0000110A                           197  DECODENOP:
0000110A  3602                     198          MOVE.W  D2, D3      ; make a copy in d3 to run tests on the copy
0000110C  0A43 4E71                199          EORI.W  #$4E71,D3   ; NOP XOR NOP would equal 0
00001110  B67C 0000                200          CMP.W   #0,D3
00001114  6700 08D8                201          BEQ     PRINTNOP
00001118                           202  DECODERTS:
00001118  3602                     203          MOVE.W  D2, D3      ; make a copy in d3 to run tests on the copy
0000111A  0A43 4E75                204          EORI.W  #$4E75,D3  ; RTS XOR RTS would eqaul 0
0000111E  B67C 0000                205          CMP.W   #0,D3
00001122  6700 08F4                206          BEQ     PRINTRTS
00001126                           207  ******** DECODE LOGICS ********
00001126                           208  DECODELOGICS:
00001126  3602                     209          MOVE.W  D2,D3
00001128  EE4B                     210          LSR.W   #7,D3       ; NOT, LEA, JSR starts with 0100, RTS starts with 0100 too, but it has a seperate check
0000112A  EA4B                     211          LSR.W   #5,D3
0000112C  0C03 0004                212          CMPI.B  #4,D3
00001130  6700 0016                213          BEQ     DECODELOGIC_CODE
00001134  0C03 000C                214          CMPI.B  #$C,D3
00001138  6700 0082                215          BEQ     DECODE_AND
0000113C  0C03 0008                216          CMPI.B  #$8,D3
00001140  6700 0094                217          BEQ     DECODE_OR
00001144  6000 00AA                218          BRA     DECODESHIFTS
00001148                           219          
00001148                           220  ******** DECODE LOGICS SEQUENCE ********
00001148                           221  DECODELOGIC_CODE:
00001148  3602                     222          MOVE.W  D2,D3
0000114A  0803 000B                223          BTST.L  #11,D3
0000114E  6600 0022                224          BNE     CHECK_IS_MOVEM_OR_JSR
00001152  E04B                     225          LSR.W   #8,D3
00001154  B63C 0046                226          CMP.B   #$46,D3
00001158  6700 0024                227          BEQ     DECODENOT_REG   ; if the opcode starts with 0100 0110, then it is NOT opcode
0000115C                           228          
0000115C  3602                     229          MOVE.W  D2,D3
0000115E  E04B                     230          LSR.W   #8,D3
00001160  B63C 004E                231          CMP.B   #$4E,D3
00001164  6700 0022                232          BEQ     DECODEJSR_REG   ; if the opcode starts with 0100 1110, then it is JSR opcode
00001168                           233          
00001168  2602                     234          MOVE.L  D2,D3
0000116A  0803 0008                235          BTST.L  #8,D3
0000116E  6600 0032                236          BNE     DECODELEA_MEM   ; if the opcode starts with 0100 and the 8th binary is 1, then it is a LEA opcode
00001172                           237  CHECK_IS_MOVEM_OR_JSR:
00001172  0803 0009                238          BTST.L  #9,D3
00001176  6700 063E                239          BEQ     DECODE_MOVEM
0000117A  6600 000C                240          BNE     DECODEJSR_REG
0000117E                           241  DECODENOT_REG:
0000117E  4EB9 00001846            242          JSR     GET_NOT_LOGIC_DATA
00001184  6000 0966                243          BRA     PRINTNOT
00001188                           244          
00001188                           245  DECODEJSR_REG:
00001188  4EB9 00001864            246          JSR     GET_JSR_LOGIC_DATA
0000118E  BC3C 0002                247          CMP.B   #$2,D6
00001192  6700 0A5C                248          BEQ     PRINTJSR_ADR
00001196  BC3C 0007                249          CMP.B   #$7,D6      ; the EA is either word or long
0000119A  6700 0A70                250          BEQ     PRINTJSR_ABS_ADR
0000119E  6000 0666                251          BRA     INVALIDOP
000011A2                           252  
000011A2                           253  DECODELEA_MEM:
000011A2  4EB9 00001878            254          JSR     GET_LEA_LOGIC_DATA
000011A8  BC3C 0002                255          CMP.B   #$2,D6
000011AC  6700 0A9C                256          BEQ     PRINTLEA_ADR
000011B0  BC3C 0007                257          CMP.B   #$7,D6
000011B4  6700 0ABE                258          BEQ     PRINTLEA_ABS_ADR
000011B8  6000 064C                259          BRA     INVALIDOP
000011BC                           260          
000011BC                           261  ******** DECODE AND ***********
000011BC                           262  DECODE_AND:
000011BC                           263          ; Check if the opcode is MULS
000011BC  3602                     264          MOVE.W  D2,D3
000011BE  EC4B                     265          LSR.W   #6,D3
000011C0  0243 0003                266          ANDI.W  #$3,D3
000011C4  0C43 0003                267          CMPI.W  #$3,D3
000011C8  6700 063C                268          BEQ     INVALIDOP
000011CC  4EB9 0000189A            269          JSR     GET_AND_DATA
000011D2  6000 0AEC                270          BRA     PRINT_AND_DATA
000011D6                           271          
000011D6                           272  ******** DECODE OR  ***********
000011D6                           273  DECODE_OR:
000011D6                           274          ; Check if the opcode is not DIVU
000011D6  3602                     275          MOVE.W  D2,D3
000011D8  EC4B                     276          LSR.W   #6,D3
000011DA  0243 0003                277          ANDI.W  #$3,D3
000011DE  0C43 0003                278          CMPI.W  #$3,D3
000011E2  6700 0622                279          BEQ     INVALIDOP
000011E6  4EB9 0000189A            280          JSR     GET_AND_DATA
000011EC  6000 0CC4                281          BRA     PRINT_OR_DATA
000011F0                           282          
000011F0                           283  ******** DECODE SHIFTS ********
000011F0                           284  DECODESHIFTS:
000011F0  3602                     285          MOVE.W  D2,D3
000011F2  EE4B                     286          LSR.W   #7,D3
000011F4  EA4B                     287          LSR.W   #5,D3
000011F6  0C03 000E                288          CMPI.B  #$E,D3
000011FA  6600 00F2                289          BNE     DECODEADDS  ; REPLACE WITH OPCODES AS THEY GET DONE
000011FE  2602                     290          MOVE.L  D2,D3
00001200  EC8B                     291          LSR.L   #6,D3      
00001202  0203 0003                292          ANDI.B  #$3,D3
00001206  B63C 0003                293          CMP.B   #$3,D3
0000120A  6700 007C                294          BEQ     DECODE_SHIFT_MEM  ; if 0 then a right shift.
0000120E                           295  ******** DECODE REGISTER SHIFTS ********
0000120E                           296  DECODE_REG:
0000120E  2602                     297          MOVE.L  D2,D3       ; restore D3 
00001210  0803 0008                298          BTST    #8,D3
00001214  6700 003A                299          BEQ     DECODELSR_REG
00001218                           300  ******** DECODE LSL REG ******** 
00001218                           301  DECODELSL_REG:
00001218  0803 0004                302          BTST.L  #4,D3      ; shifts are set to 0
0000121C  6600 001E                303          BNE     DECODEROL_REG  ; rotates are set to 1
00001220  0803 0003                304          BTST.L  #3,D3      ; arthimetic shift is set to 0
00001224  6700 000C                305          BEQ     DECODEASL_REG
00001228  4EB9 00001952            306          JSR     GET_REG_SHIFT_DATA
0000122E  6000 0EAA                307          BRA     PRINTLSL_REG       
00001232                           308  ******** DECODE ASL REG ********
00001232                           309  DECODEASL_REG:
00001232  4EB9 00001952            310          JSR     GET_REG_SHIFT_DATA 
00001238  6000 0EE4                311          BRA     PRINTASL_REG
0000123C                           312  ******** DECODE ROL REG ********
0000123C                           313  DECODEROL_REG:
0000123C  2602                     314          MOVE.L  D2,D3
0000123E  0803 0003                315          BTST.L  #3,D3
00001242  6700 05C2                316          BEQ     INVALIDOP   ; we are not supporting ROXL
00001246  4EB9 00001952            317          JSR     GET_REG_SHIFT_DATA
0000124C  6000 0F14                318          BRA     PRINTROL_REG
00001250                           319  ******** DECODE LSR REG ********
00001250                           320  DECODELSR_REG:
00001250  0803 0004                321          BTST.L  #4,D3      ; shifts are set to 0
00001254  6600 001E                322          BNE     DECODEROR_REG  ; rotates are set to 1
00001258  0803 0003                323          BTST.L  #3,D3      ; arthimetic shift is set to 0
0000125C  6700 000C                324          BEQ     DECODEASR_REG
00001260  4EB9 00001952            325          JSR     GET_REG_SHIFT_DATA
00001266  6000 0E94                326          BRA     PRINTLSR_REG    
0000126A                           327  ******** DECODE ASR REG ********
0000126A                           328  DECODEASR_REG:
0000126A  4EB9 00001952            329          JSR     GET_REG_SHIFT_DATA 
00001270  6000 0ECE                330          BRA     PRINTASR_REG
00001274                           331  ******** DECODE ROR REG ********
00001274                           332  DECODEROR_REG:
00001274  2602                     333          MOVE.L  D2,D3
00001276  0803 0003                334          BTST.L  #3,D3
0000127A  6700 058A                335          BEQ     INVALIDOP   ; we are not supporting ROXR
0000127E  4EB9 00001952            336          JSR     GET_REG_SHIFT_DATA
00001284  6000 0EFE                337          BRA     PRINTROR_REG
00001288                           338  ******** DECODE MEMORY SHIFTS ********
00001288                           339  DECODE_SHIFT_MEM:
00001288  2602                     340          MOVE.L  D2,D3       ; restore D3 
0000128A  0803 0008                341          BTST.L  #8,D3
0000128E  6700 0030                342          BEQ     DECODE_LSR_MEM
00001292                           343  ******** DECODE LSL MEM ********
00001292                           344  DECODE_LSL_MEM:
00001292  0803 000A                345          BTST.L  #10,D3
00001296  6600 001E                346          BNE     DECODE_ROL_MEM
0000129A  0803 0009                347          BTST.L  #9,D3
0000129E  6700 000C                348          BEQ     DECODE_ASL_MEM
000012A2  4EB9 00001984            349          JSR     GET_MEM_SHIFT_DATA
000012A8  6000 0EFC                350          BRA     PRINTLSL_MEM
000012AC                           351  ******** DECODE ASL MEM ********
000012AC                           352  DECODE_ASL_MEM:
000012AC  4EB9 00001984            353          JSR     GET_MEM_SHIFT_DATA
000012B2  6000 0F32                354          BRA     PRINTASL_MEM
000012B6                           355  ******** DECODE ROL MEM ********
000012B6                           356  DECODE_ROL_MEM:
000012B6  4EB9 00001984            357          JSR     GET_MEM_SHIFT_DATA
000012BC  6000 0F68                358          BRA     PRINTROL_MEM
000012C0                           359  ******** DECODE LSR MEM ********
000012C0                           360  DECODE_LSR_MEM:
000012C0  0803 000A                361          BTST.L  #10,D3
000012C4  6600 001E                362          BNE     DECODE_ROR_MEM
000012C8  0803 0009                363          BTST.L  #9,D3
000012CC  6700 000C                364          BEQ     DECODE_ASR_MEM
000012D0  4EB9 00001984            365          JSR     GET_MEM_SHIFT_DATA
000012D6  6000 0EEE                366          BRA     PRINTLSR_MEM
000012DA                           367  ******** DECODE ASR MEM ********
000012DA                           368  DECODE_ASR_MEM:
000012DA  4EB9 00001984            369          JSR     GET_MEM_SHIFT_DATA
000012E0  6000 0F24                370          BRA     PRINTASR_MEM
000012E4                           371  ******** DECODE ROR MEM ********
000012E4                           372  DECODE_ROR_MEM:
000012E4  4EB9 00001984            373          JSR     GET_MEM_SHIFT_DATA
000012EA  6000 0F5A                374          BRA     PRINTROR_MEM
000012EE                           375  ******** DECODE ADDITIONS ********
000012EE                           376  DECODEADDS:
000012EE  3602                     377          MOVE.W  D2,D3
000012F0  EE4B                     378          LSR.W   #7,D3
000012F2  EA4B                     379          LSR.W   #5,D3
000012F4  0C03 000D                380          CMPI.B  #$D,D3
000012F8  6600 008C                381          BNE     DECODE_ADDQ
000012FC  3602                     382          MOVE.W  D2,D3
000012FE                           383          * Check if its ADDA * 
000012FE  EC4B                     384          LSR.W   #6,D3
00001300  0243 0003                385          ANDI.W  #$3,D3
00001304  0C43 0003                386          CMPI.W  #%011,D3
00001308  6700 004C                387          BEQ     DECODE_ADDA_AnDn
0000130C  0C43 0007                388          CMPI.W  #%111,D3
00001310  6700 0044                389          BEQ     DECODE_ADDA_AnDn
00001314                           390          * Start ADD decode *
00001314                           391          * Check if ea or An/Dn *
00001314  3602                     392          MOVE.W  D2,D3
00001316  E64B                     393          LSR.W   #3,D3
00001318  0243 0007                394          ANDI.W  #$7,D3
0000131C  0C43 0007                395          CMPI.W  #%111,D3
00001320  6700 0018                396          BEQ     DECODE_ADD_EA
00001324                           397  ******** DECODE ADD Dn,Dn ********
00001324                           398  DECODE_ADD_Dn:
00001324  4EB9 000018E4            399          JSR     GET_ADD_MODE_REG
0000132A  4EB9 0000190A            400          JSR     GET_ADD_OPMODE
00001330  4EB9 00001918            401          JSR     GET_ADD_REG
00001336  6000 0F2E                402          BRA     PRINT_ADD_Dn
0000133A                           403  ******** DECODE ADD ea,Dn/Dn,ea ********
0000133A                           404  DECODE_ADD_EA:
0000133A  4EB9 000018E4            405          JSR     GET_ADD_MODE_REG
00001340  4EB9 0000190A            406          JSR     GET_ADD_OPMODE
00001346  4EB9 00001918            407          JSR     GET_ADD_REG
0000134C  4EB9 00001926            408          JSR     GET_ADD_EA
00001352  6000 0F90                409          BRA     PRINT_ADD_EA
00001356                           410  *****************************
00001356                           411  ******** DECODE ADDA ********
00001356                           412  *****************************
00001356                           413  ******** DECODE ADDA.x Dn,An & An,An ********
00001356                           414  DECODE_ADDA_AnDn:
00001356  4EB9 000018E4            415          JSR     GET_ADD_MODE_REG
0000135C  4EB9 0000190A            416          JSR     GET_ADD_OPMODE
00001362  4EB9 00001918            417          JSR     GET_ADD_REG
00001368                           418          * Check if we're dealing with Dn,An;An,An * 
00001368  0C07 0001                419          CMPI.B  #1,D7
0000136C  6F00 0FA6                420          BLE     PRINT_ADDA_DnAn
00001370                           421          * CHeck if we're dealing with effective addressing *
00001370  0C07 0007                422          CMPI.B  #%111,D7
00001374  6700 0006                423          BEQ     DECODE_ADDA_EA
00001378  6000 0FDE                424          BRA     PRINT_ADDA_INDIRECT
0000137C                           425  DECODE_ADDA_EA:
0000137C  4EB9 00001926            426          JSR     GET_ADD_EA
00001382  6000 1018                427          BRA     PRINT_ADDA_EA
00001386                           428  DECODE_ADDQ:
00001386  3602                     429          MOVE.W  D2,D3
00001388  EE4B                     430          LSR.W   #7,D3
0000138A  EA4B                     431          LSR.W   #5,D3
0000138C  0C03 0005                432          CMPI.B  #5,D3
00001390  6600 0044                433          BNE     DECODE_SUB
00001394  3602                     434          MOVE.W  D2,D3
00001396                           435  DECODE_ADDQ_AnDn:
00001396  0803 0008                436          BTST.L  #8,D3
0000139A  6600 046A                437          BNE     INVALIDOP  ; bit #8 should be 0
0000139E  4EB9 000018E4            438          JSR     GET_ADD_MODE_REG
000013A4  4EB9 000018C6            439          JSR     GET_ADDQ_SIZE
000013AA  4EB9 000018D4            440          JSR     GET_ADDQ_DATA
000013B0                           441  
000013B0                           442          * CHeck if dealing with ea * 
000013B0  0C07 0007                443          CMPI.B  #%111,D7
000013B4  6700 0016                444          BEQ     DECODE_ADDQ_EA
000013B8  0C07 0001                445          CMPI.B  #%1,D7
000013BC                           446          * Check if invalid size *
000013BC  0C05 0003                447          CMPI.B  #%11,D5
000013C0  6700 0444                448          BEQ     INVALIDOP
000013C4                           449          * Check if dealing with An/Dn *
000013C4  6F00 1020                450          BLE     PRINT_ADDQ_AnDn
000013C8  6000 10A0                451          BRA     PRINT_ADDQ_INDIRECT
000013CC                           452  DECODE_ADDQ_EA:
000013CC  4EB9 00001926            453          JSR     GET_ADD_EA
000013D2  6000 1054                454          BRA     PRINT_ADDQ_EA
000013D6                           455  DECODE_SUB:
000013D6  3602                     456          MOVE.W  D2,D3
000013D8  EE4B                     457          LSR.W   #7,D3
000013DA  EA4B                     458          LSR.W   #5,D3
000013DC  0C03 0009                459          CMPI.B  #9,D3
000013E0  6600 003C                460          BNE     DECODEBRANCHES
000013E4  3602                     461          MOVE.W  D2,D3
000013E6                           462  ******** DECODE SUB Dn,Dn ********
000013E6                           463  DECODE_SUB_Dn:
000013E6  4EB9 000018E4            464          JSR     GET_ADD_MODE_REG
000013EC  4EB9 0000190A            465          JSR     GET_ADD_OPMODE
000013F2  4EB9 00001918            466          JSR     GET_ADD_REG
000013F8                           467          * check if opmode is 111 or 011 (not supporting addressing for SUB *
000013F8  0C46 0007                468          CMPI.W  #%111,D6
000013FC  6700 0408                469          BEQ     INVALIDOP
00001400  0C46 0003                470          CMPI.W  #%011,D6
00001404  6700 0400                471          BEQ     INVALIDOP
00001408                           472          * check if dealing with ea *
00001408  0C47 0007                473          CMPI.W  #%111,D7
0000140C  6700 0006                474          BEQ     DECODE_SUB_EA
00001410  6000 109A                475          BRA     PRINT_SUB_Dn
00001414                           476  ******** DECODE ADD ea,Dn/Dn,ea ********
00001414                           477  DECODE_SUB_EA:
00001414  4EB9 00001926            478          JSR     GET_ADD_EA
0000141A  6000 10DC                479          BRA     PRINT_SUB_EA        
0000141E                           480  *****************************
0000141E                           481  ******** DECODE Bcc ********
0000141E                           482  *****************************
0000141E                           483  ******** DECODE BRA, Bcc ********
0000141E                           484  *Assume that 0110 has been found branching to this
0000141E                           485  *D2 is original, D3 is manipulated copy, D4 is Conditional(4b), d5 is displacement(8b)
0000141E                           486  DECODEBRANCHES:
0000141E  3602                     487          MOVE.W  D2,D3   *reinstate the full machine code
00001420  EE4B                     488          LSR.W   #7,D3 *0110 check probably in main method
00001422  EA4B                     489          LSR.W   #5,D3
00001424  0C03 0006                490          CMPI.B  #%0110,D3
00001428  6600 03DC                491          BNE     INVALIDOP *Or the next decoding branch
0000142C                           492          *-----------------------------------------------------------------------------
0000142C  3602                     493          MOVE.W  D2,D3   *reinstate the full machine code
0000142E  EE4B                     494          LSR.W   #7,D3
00001430  E24B                     495          LSR.W   #1,D3   *Get to the conditional bits
00001432  0243 000F                496          ANDI.W  #$0F,D3 *Mask everything else to get conditional bits
00001436  0C43 0000                497          CMPI.W  #0,D3
0000143A  6700 002A                498          BEQ     DECODE_BRA
0000143E  0C43 000D                499          CMPI.W  #%1101,D3
00001442  6700 0078                500          BEQ     DECODE_BLT
00001446  0C43 000E                501          CMPI.W  #%1110,D3
0000144A  6700 00C6                502          BEQ     DECODE_BGT
0000144E  0C43 000F                503          CMPI.W  #%1111,D3
00001452  6700 0114                504          BEQ     DECODE_BLE
00001456  0C43 000C                505          CMPI.W  #%1100,D3
0000145A  6700 0162                506          BEQ     DECODE_BGE
0000145E  0C43 0007                507          CMPI.W  #%0111,D3
00001462  6700 01B0                508          BEQ     DECODE_BEQ
00001466                           509  DECODE_BRA:
00001466  4EB9 000016E2            510          JSR     GET_DISPLACEMENT
0000146C  4EB9 00002896            511          JSR     PRINT_PC
00001472                           512          *We know that conditional is 0000, BRA
00001472  4EB9 000016EC            513          JSR     PRINT_BRA *Print just BRA and come back
00001478  B67C 0000                514          CMP.W   #$00, D3    *Check if displacement = $00, word addressing
0000147C  6700 01EC                515          BEQ     BRANCH_WORD
00001480  B67C 00FF                516          CMP.W   #$FF, D3    *Check if displacement = $FF, long word addresing
00001484  6700 0220                517          BEQ     BRANCH_LONG
00001488                           518          *If not, two's complement and subtract from current address
00001488  4EB9 0000286A            519          JSR     PRINTDOLLAR   
0000148E  2638 000C                520          MOVE.L  PC_COUNT,D3 *Get current address
00001492  D605                     521          ADD.B  D5,D3        *Subtract D5 from current address
00001494  5403                     522          ADD.B   #2,D3
00001496  2203                     523          MOVE.L  D3,D1 *Print D3, as it is the address
00001498  143C 0010                524          MOVE.B  #16,D2
0000149C  103C 000F                525          MOVE.B  #15,D0
000014A0  4E4F                     526          TRAP    #15
000014A2  4EB9 0000285E            527          JSR     PRINTNEWLINE
000014A8  4EB9 000028B2            528          JSR     CLEAR_ALL
000014AE  341A                     529          MOVE.W  (A2)+,D2
000014B0  B5F8 0004                530          CMP.L   ENADR,A2   ; keep looping until reach the end
000014B4  6D00 FC3C                531          BLT     LOOPMEM
000014B8  6000 1408                532          BRA     DONE
000014BC                           533  DECODE_BLT:
000014BC  4EB9 000016E2            534          JSR     GET_DISPLACEMENT
000014C2  4EB9 00002896            535          JSR     PRINT_PC
000014C8                           536          *We know that conditional is 1101, BLT
000014C8  4EB9 000016F8            537          JSR     PRINT_BLT *Print just BLT and come back
000014CE  B67C 0000                538          CMP.W   #$00, D3    *Check if displacement = $00, word addressing
000014D2  6700 0196                539          BEQ     BRANCH_WORD
000014D6  B67C 00FF                540          CMP.W   #$FF, D3    *Check if displacement = $FF, long word addresing
000014DA  6700 01CA                541          BEQ     BRANCH_LONG
000014DE                           542          *If not, two's complement and subtract from current address
000014DE  4EB9 0000286A            543          JSR     PRINTDOLLAR   
000014E4  2638 000C                544          MOVE.L  PC_COUNT,D3 *Get current address
000014E8  D605                     545          ADD.B  D5,D3        *Subtract D5 from current address
000014EA  5403                     546          ADD.B   #2,D3
000014EC  2203                     547          MOVE.L  D3,D1 *Print D3, as it is the address
000014EE  143C 0010                548          MOVE.B  #16,D2
000014F2  103C 000F                549          MOVE.B  #15,D0
000014F6  4E4F                     550          TRAP    #15
000014F8  4EB9 0000285E            551          JSR     PRINTNEWLINE
000014FE  4EB9 000028B2            552          JSR     CLEAR_ALL
00001504  341A                     553          MOVE.W  (A2)+,D2
00001506  B5F8 0004                554          CMP.L   ENADR,A2   ; keep looping until reach the end
0000150A  6D00 FBE6                555          BLT     LOOPMEM
0000150E  6000 13B2                556          BRA     DONE
00001512                           557  DECODE_BGT:
00001512  4EB9 000016E2            558          JSR     GET_DISPLACEMENT
00001518  4EB9 00002896            559          JSR     PRINT_PC
0000151E                           560          *We know that conditional is 1110, BGT
0000151E  4EB9 00001704            561          JSR     PRINT_BGT *Print just BRA and come back
00001524  B67C 0000                562          CMP.W   #$00, D3    *Check if displacement = $00, word addressing
00001528  6700 0140                563          BEQ     BRANCH_WORD
0000152C  B67C 00FF                564          CMP.W   #$FF, D3    *Check if displacement = $FF, long word addresing
00001530  6700 0174                565          BEQ     BRANCH_LONG
00001534                           566          *If not, two's complement and subtract from current address
00001534  4EB9 0000286A            567          JSR     PRINTDOLLAR   
0000153A  2638 000C                568          MOVE.L  PC_COUNT,D3 *Get current address
0000153E  D605                     569          ADD.B  D5,D3        *Subtract D5 from current address
00001540  5403                     570          ADD.B   #2,D3
00001542  2203                     571          MOVE.L  D3,D1 *Print D3, as it is the address
00001544  143C 0010                572          MOVE.B  #16,D2
00001548  103C 000F                573          MOVE.B  #15,D0
0000154C  4E4F                     574          TRAP    #15
0000154E  4EB9 0000285E            575          JSR     PRINTNEWLINE
00001554  4EB9 000028B2            576          JSR     CLEAR_ALL
0000155A  341A                     577          MOVE.W  (A2)+,D2
0000155C  B5F8 0004                578          CMP.L   ENADR,A2   ; keep looping until reach the end
00001560  6D00 FB90                579          BLT     LOOPMEM
00001564  6000 135C                580          BRA     DONE
00001568                           581  DECODE_BLE:
00001568  4EB9 000016E2            582          JSR     GET_DISPLACEMENT
0000156E  4EB9 00002896            583          JSR     PRINT_PC
00001574                           584          *We know that conditional is 1111, BLE
00001574  4EB9 00001710            585          JSR     PRINT_BLE *Print just BLE and come back
0000157A  B67C 0000                586          CMP.W   #$00, D3    *Check if displacement = $00, word addressing
0000157E  6700 00EA                587          BEQ     BRANCH_WORD
00001582  B67C 00FF                588          CMP.W   #$FF, D3    *Check if displacement = $FF, long word addresing
00001586  6700 011E                589          BEQ     BRANCH_LONG
0000158A                           590          *If not, two's complement and subtract from current address
0000158A  4EB9 0000286A            591          JSR     PRINTDOLLAR   
00001590  2638 000C                592          MOVE.L  PC_COUNT,D3 *Get current address
00001594  D605                     593          ADD.B  D5,D3        *Subtract D5 from current address
00001596  5403                     594          ADD.B   #2,D3
00001598  2203                     595          MOVE.L  D3,D1 *Print D3, as it is the address
0000159A  143C 0010                596          MOVE.B  #16,D2
0000159E  103C 000F                597          MOVE.B  #15,D0
000015A2  4E4F                     598          TRAP    #15
000015A4  4EB9 0000285E            599          JSR     PRINTNEWLINE
000015AA  4EB9 000028B2            600          JSR     CLEAR_ALL
000015B0  341A                     601          MOVE.W  (A2)+,D2
000015B2  B5F8 0004                602          CMP.L   ENADR,A2   ; keep looping until reach the end
000015B6  6D00 FB3A                603          BLT     LOOPMEM
000015BA  6000 1306                604          BRA     DONE
000015BE                           605  DECODE_BGE:
000015BE  4EB9 000016E2            606          JSR     GET_DISPLACEMENT
000015C4  4EB9 00002896            607          JSR     PRINT_PC
000015CA                           608          *We know that conditional is 1100, BGE
000015CA  4EB9 0000171C            609          JSR     PRINT_BGE *Print just BGE and come back
000015D0  B67C 0000                610          CMP.W   #$00, D3    *Check if displacement = $00, word addressing
000015D4  6700 0094                611          BEQ     BRANCH_WORD
000015D8  B67C 00FF                612          CMP.W   #$FF, D3    *Check if displacement = $FF, long word addresing
000015DC  6700 00C8                613          BEQ     BRANCH_LONG
000015E0                           614          *If not, two's complement and subtract from current address 
000015E0  4EB9 0000286A            615          JSR     PRINTDOLLAR  
000015E6  2638 000C                616          MOVE.L  PC_COUNT,D3 *Get current address
000015EA  D605                     617          ADD.B  D5,D3        *Subtract D5 from current address
000015EC  5403                     618          ADD.B   #2,D3
000015EE  2203                     619          MOVE.L  D3,D1 *Print D3, as it is the address
000015F0  143C 0010                620          MOVE.B  #16,D2
000015F4  103C 000F                621          MOVE.B  #15,D0
000015F8  4E4F                     622          TRAP    #15
000015FA  4EB9 0000285E            623          JSR     PRINTNEWLINE
00001600  4EB9 000028B2            624          JSR     CLEAR_ALL
00001606  341A                     625          MOVE.W  (A2)+,D2
00001608  B5F8 0004                626          CMP.L   ENADR,A2   ; keep looping until reach the end
0000160C  6D00 FAE4                627          BLT     LOOPMEM
00001610  6000 12B0                628          BRA     DONE
00001614                           629  DECODE_BEQ:  
00001614  4EB9 000016E2            630          JSR     GET_DISPLACEMENT
0000161A  4EB9 00002896            631          JSR     PRINT_PC
00001620                           632          *We know that conditional is 0111, BEQ
00001620  4EB9 00001728            633          JSR     PRINT_BEQ *Print just BEQ and come back
00001626  B67C 0000                634          CMP.W   #$00, D3    *Check if displacement = $00, word addressing
0000162A  6700 003E                635          BEQ     BRANCH_WORD
0000162E  B67C 00FF                636          CMP.W   #$FF, D3    *Check if displacement = $FF, long word addresing
00001632  6700 0072                637          BEQ     BRANCH_LONG
00001636                           638          *If not, two's complement and subtract from current address
00001636  4EB9 0000286A            639          JSR     PRINTDOLLAR   
0000163C  2638 000C                640          MOVE.L  PC_COUNT,D3 *Get current address
00001640  D605                     641          ADD.B  D5,D3        *Subtract D5 from current address
00001642  5403                     642          ADD.B   #2,D3
00001644  2203                     643          MOVE.L  D3,D1 *Print D3, as it is the address
00001646  143C 0010                644          MOVE.B  #16,D2
0000164A  103C 000F                645          MOVE.B  #15,D0
0000164E  4E4F                     646          TRAP    #15
00001650  4EB9 0000285E            647          JSR     PRINTNEWLINE
00001656  4EB9 000028B2            648          JSR     CLEAR_ALL
0000165C  341A                     649          MOVE.W  (A2)+,D2
0000165E  B5F8 0004                650          CMP.L   ENADR,A2   ; keep looping until reach the end
00001662  6D00 FA8E                651          BLT     LOOPMEM
00001666  6000 125A                652          BRA     DONE
0000166A                           653  BRANCH_WORD:
0000166A  1E3C 0000                654          MOVE.B  #0,D7 *(Set 000 for word)
0000166E  4EB9 000019CA            655          JSR     DETERMINE_ADDR_MODE *Get word address
00001674  4EB9 0000286A            656          JSR     PRINTDOLLAR
0000167A                           657  
0000167A  2638 000C                658          MOVE.L  PC_COUNT,D3 *Get current address
0000167E                           659          *Displacement is stored in D6
0000167E  D646                     660          ADD.W   D6,D3
00001680  5443                     661          ADD.W   #2,D3
00001682  2203                     662          MOVE.L  D3,D1 *Print D3, as it is the address
00001684                           663  
00001684  143C 0010                664          MOVE.B  #16,D2
00001688  103C 000F                665          MOVE.B  #15,D0
0000168C  4E4F                     666          TRAP    #15
0000168E  4EB9 0000285E            667          JSR     PRINTNEWLINE
00001694  4EB9 000028B2            668          JSR     CLEAR_ALL
0000169A  B5F8 0004                669          CMP.L   ENADR,A2   ; keep looping until reach the end
0000169E  6D00 FA52                670          BLT     LOOPMEM
000016A2  6000 121E                671          BRA     DONE
000016A6                           672  BRANCH_LONG:
000016A6  1E3C 0001                673          MOVE.B  #1,D7 *(Set 001 for long)
000016AA  4EB9 000019CA            674          JSR     DETERMINE_ADDR_MODE *Get long address
000016B0  4EB9 0000286A            675          JSR     PRINTDOLLAR
000016B6                           676  
000016B6  2638 000C                677          MOVE.L  PC_COUNT,D3 *Get current address
000016BA                           678          *Displacement is stored in D6
000016BA  D686                     679          ADD.L   D6,D3
000016BC  5483                     680          ADD.L   #2,D3
000016BE  2203                     681          MOVE.L  D3,D1 *Print D3, as it is the address
000016C0                           682  
000016C0  143C 0010                683          MOVE.B  #16,D2
000016C4  103C 000F                684          MOVE.B  #15,D0
000016C8  4E4F                     685          TRAP    #15
000016CA  4EB9 0000285E            686          JSR     PRINTNEWLINE
000016D0  4EB9 000028B2            687          JSR     CLEAR_ALL
000016D6  B5F8 0004                688          CMP.L   ENADR,A2   ; keep looping until reach the end
000016DA  6D00 FA16                689          BLT     LOOPMEM
000016DE  6000 11E2                690          BRA     DONE  
000016E2                           691  GET_DISPLACEMENT:
000016E2  2602                     692          MOVE.L  D2,D3   *Get new copy
000016E4  0243 00FF                693          ANDI.W  #$FF,D3 *Mask first 8
000016E8  3A03                     694          MOVE.W  D3,D5   *Store displacement into d5
000016EA  4E75                     695          RTS
000016EC                           696  PRINT_BRA: *Prints just BRA
000016EC  43F8 0145                697          LEA     DISBRA,A1
000016F0  103C 000E                698          MOVE.B  #14,D0
000016F4  4E4F                     699          TRAP    #15
000016F6  4E75                     700          RTS
000016F8                           701  PRINT_BLT:
000016F8  43F8 014B                702          LEA     DISBLT,A1
000016FC  103C 000E                703          MOVE.B  #14,D0
00001700  4E4F                     704          TRAP    #15
00001702  4E75                     705          RTS
00001704                           706  PRINT_BGT:
00001704  43F8 0151                707          LEA     DISBGT,A1
00001708  103C 000E                708          MOVE.B  #14,D0
0000170C  4E4F                     709          TRAP    #15
0000170E  4E75                     710          RTS
00001710                           711  PRINT_BLE:
00001710  43F8 0157                712          LEA     DISBLE,A1
00001714  103C 000E                713          MOVE.B  #14,D0
00001718  4E4F                     714          TRAP    #15
0000171A  4E75                     715          RTS
0000171C                           716  PRINT_BGE:
0000171C  43F8 015D                717          LEA     DISBGE,A1
00001720  103C 000E                718          MOVE.B  #14,D0
00001724  4E4F                     719          TRAP    #15
00001726  4E75                     720          RTS
00001728                           721  PRINT_BEQ:
00001728  43F8 0163                722          LEA     DISBEQ,A1
0000172C  103C 000E                723          MOVE.B  #14,D0
00001730  4E4F                     724          TRAP    #15
00001732  4E75                     725          RTS
00001734                           726          
00001734                           727  *****************************
00001734                           728  ******** DECODE MOVE ********
00001734                           729  *****************************
00001734                           730  DECODE_MOVE:
00001734  3602                     731          MOVE.W  D2,D3
00001736  EE4B                     732          LSR.W   #7,D3
00001738  E84B                     733          LSR.W   #4,D3
0000173A  0C43 0009                734          CMPI.W  #%01001,D3
0000173E  6700 0076                735          BEQ     DECODE_MOVEM
00001742                           736          
00001742  3602                     737          MOVE.W  D2,D3
00001744  EE4B                     738          LSR.W   #7,D3
00001746  EA4B                     739          LSR.W   #5,D3
00001748  0C43 0007                740          CMPI.W  #%0111,D3
0000174C  6700 0054                741          BEQ     DECODE_MOVEQ
00001750                           742          
00001750  3602                     743          MOVE.W  D2,D3
00001752  EE4B                     744          LSR.W   #7,D3
00001754  EE4B                     745          LSR.W   #7,D3
00001756  0C03 0000                746          CMPI.B  #%00,D3
0000175A  6600 00AA                747          BNE     INVALIDOP
0000175E                           748          
0000175E  3602                     749          MOVE.W  D2,D3
00001760  EE4B                     750          LSR.W   #7,D3
00001762  EA4B                     751          LSR.W   #5,D3
00001764  0243 0003                752          ANDI.W  #%0011,D3
00001768  0C03 0000                753          CMPI.B  #%00,D3
0000176C  6700 0098                754          BEQ     INVALIDOP
00001770                           755          
00001770  3602                     756          MOVE.W  D2,D3
00001772  EE4B                     757          LSR.W   #7,D3
00001774  0243 0007                758          ANDI.W  #$7,D3
00001778  0C43 0001                759          CMPI.W  #%001,D3
0000177C  6700 0002                760          BEQ     DECODE_MOVEA
00001780                           761          
00001780                           762          
00001780                           763  DECODE_MOVEA:
00001780  4EB9 000017CC            764          JSR     GET_MOVE_SIZE
00001786  0C07 0001                765          CMPI.B  #%01,D7
0000178A  6700 007A                766          BEQ     INVALIDOP *MOVEA does not support bytes
0000178E                           767  
0000178E  3602                     768          MOVE.W  D2,D3
00001790  EE4B                     769          LSR.W   #7,D3
00001792  0243 0007                770          ANDI.W  #$7,D3
00001796  0C43 0001                771          CMPI.W  #%001,D3
0000179A  3C03                     772          MOVE.W  D3,D6 *getting destination register
0000179C                           773          
0000179C  4EB9 000017F2            774          JSR     GET_MOVE_SOURCE
000017A2                           775          
000017A2                           776  DECODE_MOVEQ:
000017A2  3602                     777          MOVE.W  D2,D3
000017A4  EE4B                     778          LSR.W   #7,D3
000017A6  E24B                     779          LSR.W   #1,D3
000017A8  0243 0001                780          ANDI.W  #$1,D3
000017AC  0C03 0000                781          CMPI.B  #%0,D3
000017B0  6600 0054                782          BNE     INVALIDOP
000017B4  3602                     783          MOVE.W  D2,D3
000017B6                           784          
000017B6                           785  DECODE_MOVEM:
000017B6  6000 004E                786          BRA     INVALIDOP
000017BA  3602                     787          MOVE.W  D2,D3
000017BC  EE4B                     788          LSR.W   #7,D3
000017BE  0243 0007                789          ANDI.W  #%111,D3
000017C2  0C43 0001                790          CMPI.W  #%001,D3
000017C6  6600 003E                791          BNE     INVALIDOP
000017CA  3602                     792          MOVE.W  D2,D3
000017CC                           793          
000017CC                           794  *******MOVE FUNCTIONS*******
000017CC                           795  GET_MOVE_SIZE:
000017CC  3602                     796          MOVE.W  D2,D3
000017CE  EE4B                     797          LSR.W   #7,D3
000017D0  EA4B                     798          LSR.W   #5,D3
000017D2  0243 0003                799          ANDI.W  #%0011,D3
000017D6  1E03                     800          MOVE.B  D3,D7 *storing size in D7
000017D8  4E75                     801          RTS
000017DA                           802  GET_MOVE_DEST:
000017DA  3602                     803          MOVE.W  D2,D3
000017DC  EC4B                     804          LSR.W   #6,D3
000017DE  E64B                     805          LSR.W   #3,D3
000017E0  0243 0007                806          ANDI.W  #$7,D3
000017E4  3803                     807          MOVE.W  D3,D4 *storing destination register in D4
000017E6  3602                     808          MOVE.W  D2,D3
000017E8  EC4B                     809          LSR.W   #6,D3
000017EA  0243 0007                810          ANDI.W  #$7,D3
000017EE  3A03                     811          MOVE.W  D3,D5 *storing destination mode in D5
000017F0  4E75                     812          RTS
000017F2                           813  GET_MOVE_SOURCE:
000017F2  3602                     814          MOVE.W  D2,D3
000017F4  E64B                     815          LSR.W   #3,D3
000017F6  0243 0007                816          ANDI.W  #$7,D3
000017FA  3A03                     817          MOVE.W  D3,D5 *storing source mode in D5
000017FC  3602                     818          MOVE.W  D2,D3
000017FE  0243 0007                819          ANDI.W  #$7,D3
00001802  3803                     820          MOVE.W  D3,D4 *storing source register in D4
00001804  4E75                     821          RTS
00001806                           822  ******** INVALID OUTPUT ********
00001806                           823  * THIS SHOULD ALWAYS BE THE LAST DECODE BRANCH
00001806                           824  * THAT WAY AFTER ATTEMPTING ALL ADDRESSING MODE AND FAILING
00001806                           825  * IT WILL FALLBACK TO THIS BRANCH
00001806                           826  INVALIDOP:                 ; when an opcode is invalid, print the address, 'data', and data in memory
00001806  220A                     827          MOVE.L  A2,D1      ; load the current address to print
00001808  143C 0010                828          MOVE.B  #16,D2
0000180C  103C 000F                829          MOVE.B  #15,D0
00001810  4E4F                     830          TRAP    #15
00001812                           831  
00001812  43F8 01A8                832          LEA     DISDATA,A1 ; load 'DATA' string to print
00001816  103C 000E                833          MOVE.B  #14,D0
0000181A  4E4F                     834          TRAP    #15
0000181C                           835  
0000181C  3212                     836          MOVE.W  (A2),D1    ; load data in A2 to print
0000181E  143C 0010                837          MOVE.B  #16,D2
00001822  103C 000F                838          MOVE.B  #15,D0
00001826  4E4F                     839          TRAP    #15
00001828                           840  
00001828  43F8 00E8                841          LEA     NEWLINE,A1 ; print a new line for reading purposes
0000182C  103C 000E                842          MOVE.B  #14,D0
00001830  4E4F                     843          TRAP    #15
00001832                           844  
00001832  4EB9 000028B2            845          JSR     CLEAR_ALL
00001838  341A                     846          MOVE.W  (A2)+,D2   ; increment the address
0000183A  B5F8 0004                847          CMP.L   ENADR,A2   ; keep looping until reach the end
0000183E  6D00 F8B2                848          BLT     LOOPMEM
00001842  6000 107E                849          BRA     DONE
00001846                           850  
00001846                           851  ******** NOT LOGIC FUNCTIONS ***********
00001846                           852  * Returns:
00001846                           853  *   D7 - EA Register
00001846                           854  *   D6 - EA Mode
00001846                           855  *   D5 - Contains size
00001846                           856  GET_NOT_LOGIC_DATA:
00001846  2602                     857          MOVE.L  D2,D3
00001848  0203 0007                858          ANDI.B  #$7,D3
0000184C  1E03                     859          MOVE.B  D3,D7      ; D7 will contain the EA register
0000184E  2602                     860          MOVE.L  D2,D3
00001850  E64B                     861          LSR.W   #3,D3
00001852  0203 0007                862          ANDI.B  #$7,D3
00001856  1C03                     863          MOVE.B  D3,D6      ; D6 will contain 000 because its for data register
00001858  2602                     864          MOVE.L  D2,D3
0000185A  EC4B                     865          LSR.W   #6,D3
0000185C  0203 0007                866          ANDI.B  #$7,D3
00001860  1A03                     867          MOVE.B  D3,D5      ; D5 will contain the size, 0 for B, 1 for word, 2 for long      
00001862  4E75                     868          RTS
00001864                           869   
00001864                           870  ******** JSR LOGIC FUNCTIONS ***********
00001864                           871  * Returns:
00001864                           872  *   D7 - EA Register
00001864                           873  *   D6 - EA Mode     
00001864                           874  GET_JSR_LOGIC_DATA:
00001864  2602                     875          MOVE.L  D2,D3
00001866  0203 0007                876          ANDI.B  #$7,D3
0000186A  1E03                     877          MOVE.B  D3,D7      ; D7 will contain the EA register
0000186C  2602                     878          MOVE.L  D2,D3
0000186E  E64B                     879          LSR.W   #3,D3
00001870  0203 0007                880          ANDI.B  #$7,D3
00001874  1C03                     881          MOVE.B  D3,D6      ; D6 will contain the EA mode
00001876  4E75                     882          RTS
00001878                           883  
00001878                           884  ******** LEA LOGIC FUNCTIONS ***********
00001878                           885  * Returns:
00001878                           886  *   D7 - EA Register
00001878                           887  *   D6 - EA Mode   
00001878                           888  *   D5 - Address Register         
00001878                           889  GET_LEA_LOGIC_DATA:
00001878  2602                     890          MOVE.L  D2,D3
0000187A  0203 0007                891          ANDI.B  #$7,D3
0000187E  1E03                     892          MOVE.B  D3,D7       ; D7 will contain the EA register
00001880  2602                     893          MOVE.L  D2,D3
00001882  E64B                     894          LSR.W   #3,D3
00001884  0203 0007                895          ANDI.B  #$7,D3
00001888  1C03                     896          MOVE.B  D3,D6       ; D6 will contain the EA mode
0000188A  2602                     897          MOVE.L  D2,D3
0000188C  EA4B                     898          LSR.W   #5,D3
0000188E  E84B                     899          LSR.W   #4,D3
00001890  0203 0007                900          ANDI.B  #$7,D3
00001894  1A03                     901          MOVE.B  D3,D5       ; D5 will contain the Address Register
00001896  2602                     902          MOVE.L  D2,D3
00001898  4E75                     903          RTS
0000189A                           904          
0000189A                           905  ******** AND LOGIC FUNCTIONS ***********
0000189A                           906  * Returns:
0000189A                           907  *   D7 - EA Register
0000189A                           908  *   D6 - EA Mode   
0000189A                           909  *   D5 - Opmode
0000189A                           910  *   D4 - Register
0000189A                           911  GET_AND_DATA:
0000189A  2602                     912          MOVE.L  D2,D3
0000189C  0203 0007                913          ANDI.B  #$7,D3
000018A0  1E03                     914          MOVE.B  D3,D7       ; D7 will contain the EA register
000018A2  2602                     915          MOVE.L  D2,D3
000018A4  E64B                     916          LSR.W   #3,D3
000018A6  0203 0007                917          ANDI.B  #$7,D3
000018AA  1C03                     918          MOVE.B  D3,D6       ; D6 will contain the EA register
000018AC  2602                     919          MOVE.L  D2,D3
000018AE  EC4B                     920          LSR.W   #6,D3
000018B0  0203 0007                921          ANDI.B  #$7,D3
000018B4  1A03                     922          MOVE.B  D3,D5       ; D5 will contain the opmode
000018B6  2602                     923          MOVE.L  D2,D3
000018B8  E84B                     924          LSR.W   #4,D3
000018BA  EA4B                     925          LSR.W   #5,D3
000018BC  0203 0007                926          ANDI.B  #$7,D3
000018C0  1803                     927          MOVE.B  D3,D4       ; D4 will contain the register number
000018C2  2602                     928          MOVE.L  D2,D3
000018C4  4E75                     929          RTS
000018C6                           930          
000018C6                           931          
000018C6                           932  ******** ADDQ FUNCTIONS ********
000018C6                           933  * Returns:
000018C6                           934  *   D5 - contains size operation
000018C6                           935  GET_ADDQ_SIZE:
000018C6  3602                     936          MOVE.W  D2,D3
000018C8  EC4B                     937          LSR.W   #6,D3
000018CA  0243 0003                938          ANDI.W  #%11,D3    ; gets the size operation
000018CE  1A03                     939          MOVE.B  D3,D5
000018D0  3602                     940          MOVE.W  D2,D3
000018D2  4E75                     941          RTS
000018D4                           942  * Returns:
000018D4                           943  *   D6 - contains data
000018D4                           944  GET_ADDQ_DATA:
000018D4  3602                     945          MOVE.W  D2,D3
000018D6  EC4B                     946          LSR.W   #6,D3
000018D8  E64B                     947          LSR.W   #3,D3
000018DA  0243 0007                948          ANDI.W  #%111,D3   ; gets the data 
000018DE  1C03                     949          MOVE.B  D3,D6
000018E0  3602                     950          MOVE.W  D2,D3
000018E2  4E75                     951          RTS
000018E4                           952  ******** ADD FUNCTIONS ********
000018E4                           953  * Returns:
000018E4                           954  *   D7 - contains the register mode
000018E4                           955  *   D4 - contains the register number
000018E4                           956  GET_ADD_MODE_REG:
000018E4  3602                     957          MOVE.W  D2,D3
000018E6  E64B                     958          LSR.W   #3,D3
000018E8  0243 0007                959          ANDI.W  #$7,D3     ; Gets the mode
000018EC  0C43 0005                960          CMPI.W  #%101,D3
000018F0  6700 FF14                961          BEQ     INVALIDOP
000018F4  0C43 0006                962          CMPI.W  #%110,D3   ; we are not supporting this addressing modes
000018F8  6700 FF0C                963          BEQ     INVALIDOP 
000018FC  3E03                     964          MOVE.W  D3,D7
000018FE  3602                     965          MOVE.W  D2,D3
00001900  0243 0007                966          ANDI.W  #$7,D3     ; gets the register number
00001904  3803                     967          MOVE.W  D3,D4
00001906  3602                     968          MOVE.W  D2,D3
00001908  4E75                     969          RTS
0000190A                           970  * Returns:
0000190A                           971  *   D6 - contains opmode
0000190A                           972  GET_ADD_OPMODE:
0000190A  3602                     973          MOVE.W  D2,D3
0000190C  EC4B                     974          LSR.W   #6,D3
0000190E  0243 0007                975          ANDI.W  #$7,D3
00001912  3C03                     976          MOVE.W  D3,D6
00001914  3602                     977          MOVE.W  D2,D3
00001916  4E75                     978          RTS
00001918                           979  * Returns:
00001918                           980  *   D5 - contains register
00001918                           981  GET_ADD_REG:
00001918  3602                     982          MOVE.W  D2,D3
0000191A  EA4B                     983          LSR.W   #5,D3
0000191C  E84B                     984          LSR.W   #4,D3
0000191E  0243 0007                985          ANDI.W  #$7,D3
00001922  3A03                     986          MOVE.W  D3,D5
00001924  4E75                     987          RTS
00001926                           988  * Returns:
00001926                           989  *   D7 - contains ea 
00001926                           990  GET_ADD_EA:
00001926  B83C 0000                991          CMP.B   #0,D4
0000192A  6700 0016                992          BEQ     ADD_WORD_ADDR
0000192E  B83C 0001                993          CMP.B   #1,D4
00001932  6700 0016                994          BEQ     ADD_LONG_ADDR
00001936  0C04 0004                995          CMPI.B  #%100,D4
0000193A  6700 0006                996          BEQ     ADD_WORD_ADDR
0000193E  6000 FEC6                997          BRA     INVALIDOP
00001942                           998  ADD_WORD_ADDR:
00001942                           999          * Increment PC Counter
00001942  0C5A 0000               1000          CMP.W   #0,(A2)+   ; instructions are word size
00001946  3E1A                    1001          MOVE.W  (A2)+,D7    ; D6 will contain the address
00001948  4E75                    1002          RTS
0000194A                          1003  ADD_LONG_ADDR:
0000194A                          1004          * Increment PC Counter
0000194A  0C5A 0000               1005          CMP.W   #0,(A2)+   ; instructions are word size
0000194E  2E1A                    1006          MOVE.L  (A2)+,D7    ; D6 will contain the address
00001950  4E75                    1007          RTS
00001952                          1008  
00001952                          1009  ******** COMMON SHIFT FUNCTIONS ********
00001952                          1010  * Returns:
00001952                          1011  *   D7 - Register
00001952                          1012  *   D6 - 1 or 0, determines if count or data register
00001952                          1013  *   D5 - Contains size of operation
00001952                          1014  *   D4 - Contains count or register as determined by D6
00001952                          1015  GET_REG_SHIFT_DATA:
00001952  2602                    1016          MOVE.L  D2,D3
00001954  0203 0007               1017          ANDI.B  #$7,D3     ; clear the 4th bit
00001958  1E03                    1018          MOVE.B  D3,D7      ; D7 will contain the register
0000195A  2602                    1019          MOVE.L  D2,D3      ; reset D3
0000195C  EA4B                    1020          LSR.W   #5,D3      ; test the i/r bit
0000195E  0203 0001               1021          ANDI.B  #$1,D3
00001962  1C03                    1022          MOVE.B  D3,D6      ; D6 will contain if count or Dn
00001964  2602                    1023          MOVE.L  D2,D3
00001966  EC4B                    1024          LSR.W   #6,D3
00001968  0243 0003               1025          ANDI.W  #$3,D3
0000196C  1A03                    1026          MOVE.B  D3,D5      ; D5 will contain size operation
0000196E  0C05 0003               1027          CMPI.B  #%11,D5
00001972  6700 FE92               1028          BEQ     INVALIDOP
00001976  2602                    1029          MOVE.L  D2,D3
00001978  EA4B                    1030          LSR.W   #5,D3
0000197A  E84B                    1031          LSR.W   #4,D3
0000197C  0243 0007               1032          ANDI.W  #$7,D3
00001980  1803                    1033          MOVE.B  D3,D4      ; D4 will contain count/reg
00001982  4E75                    1034          RTS
00001984                          1035  * Returns:
00001984                          1036  *   D7 - Contains register (word or long addressing)
00001984                          1037  *   D6 - Contains the address 
00001984                          1038  GET_MEM_SHIFT_DATA:
00001984  0803 000B               1039          BTST.L  #11,D3     ; the 11th bit must always be 0 for shifts
00001988  6600 FE7C               1040          BNE     INVALIDOP
0000198C  0283 00000007           1041          ANDI.L  #$7,D3
00001992  1E03                    1042          MOVE.B  D3,D7      ; D7 will have register
00001994  2602                    1043          MOVE.L  D2,D3
00001996  4EB9 000019AE           1044          JSR     IS_MEM_INDIRECT
0000199C  0C38 00FF 0010          1045          CMPI.B  #$FF,IS_IN_MEM_BOOL
000019A2  6700 0EF0               1046          BEQ     RETURN  
000019A6  4EB9 000019CA           1047          JSR     DETERMINE_ADDR_MODE
000019AC  4E75                    1048          RTS
000019AE                          1049          
000019AE                          1050  IS_MEM_INDIRECT:
000019AE  3602                    1051          MOVE.W  D2,D3
000019B0  E64B                    1052          LSR.W   #3,D3
000019B2  0243 0007               1053          ANDI.W  #%111,D3
000019B6  0C43 0007               1054          CMPI.W  #%111,D3
000019BA  6700 0ED8               1055          BEQ     RETURN
000019BE  1807                    1056          MOVE.B  D7,D4
000019C0  1E03                    1057          MOVE.B  D3,D7
000019C2  11FC 00FF 0010          1058          MOVE.B #$FF,IS_IN_MEM_BOOL
000019C8  4E75                    1059          RTS
000019CA                          1060          
000019CA                          1061  ******** DETERMINING ADDRESS MODES ********
000019CA                          1062  * D7 should contain register.
000019CA                          1063  * 000 for Word addressing
000019CA                          1064  * 001 for Long addressing
000019CA                          1065  DETERMINE_ADDR_MODE:
000019CA  BE3C 0000               1066          CMP.B   #0,D7
000019CE  6700 000E               1067          BEQ     WORD_ADDR
000019D2  BE3C 0001               1068          CMP.B   #1,D7
000019D6  6700 000E               1069          BEQ     LONG_ADDR
000019DA  6000 FE2A               1070          BRA     INVALIDOP
000019DE                          1071  WORD_ADDR:
000019DE                          1072          * Increment PC Counter
000019DE  0C5A 0000               1073          CMP.W   #0,(A2)+   ; instructions are word size
000019E2  3C1A                    1074          MOVE.W  (A2)+,D6    ; D6 will contain the address
000019E4  4E75                    1075          RTS
000019E6                          1076  LONG_ADDR:
000019E6                          1077          * Increment PC Counter
000019E6  0C5A 0000               1078          CMP.W   #0,(A2)+   ; instructions are word size
000019EA  2C1A                    1079          MOVE.L  (A2)+,D6    ; D6 will contain the address
000019EC  4E75                    1080          RTS
000019EE                          1081  ************************************        
000019EE                          1082  ******** PRINT INSTRUCTIONS ********
000019EE                          1083  ************************************
000019EE                          1084  PRINTNOP:
000019EE  4EB9 00002896           1085          JSR     PRINT_PC
000019F4  43F8 00FC               1086          LEA     DISNOP,A1  ; display NOP string
000019F8  103C 000E               1087          MOVE.B  #14,D0     
000019FC  4E4F                    1088          TRAP    #15
000019FE  4EB9 0000285E           1089          JSR     PRINTNEWLINE
00001A04  4EB9 000028B2           1090          JSR     CLEAR_ALL
00001A0A  341A                    1091          MOVE.W  (A2)+,D2    ; address should be incremented at the end of each print
00001A0C  B5F8 0004               1092          CMP.L   ENADR,A2   ; keep looping until reach the end
00001A10  6D00 F6E0               1093          BLT     LOOPMEM
00001A14  6000 0EAC               1094          BRA     DONE
00001A18                          1095  
00001A18                          1096  PRINTRTS:
00001A18  4EB9 00002896           1097          JSR     PRINT_PC
00001A1E  43F8 0100               1098          LEA     DISRTS,A1   ; display RTS string
00001A22  103C 000E               1099          MOVE.B  #14,D0
00001A26  4E4F                    1100          TRAP    #15
00001A28  4EB9 0000285E           1101          JSR     PRINTNEWLINE
00001A2E  4EB9 000028B2           1102          JSR     CLEAR_ALL
00001A34  341A                    1103          MOVE.W  (A2)+,D2    ; address should be incremented at the end of each print
00001A36  B5F8 0004               1104          CMP.L   ENADR,A2    ; keep looping until reach the end address
00001A3A  6D00 F6B6               1105          BLT     LOOPMEM
00001A3E  6000 0E82               1106          BRA     DONE            
00001A42                          1107  
00001A42                          1108  ******** PRINT SHIFT INSTRUCTIONS ********
00001A42                          1109  ******** COMMON SHIFT FUNCS ********
00001A42                          1110  SHIFT_IN1:
00001A42  0C06 0000               1111          CMPI.B  #0,D6
00001A46  6700 000A               1112          BEQ     PRINT_SHIFT_REG_CONT
00001A4A  4EB9 000026AC           1113          JSR     PRINTDn
00001A50  4E75                    1114          RTS
00001A52                          1115  PRINT_SHIFT_REG_CONT:
00001A52  43F8 00ED               1116          LEA     DISPOUND,A1
00001A56  103C 000E               1117          MOVE.B  #14,D0
00001A5A  4E4F                    1118          TRAP    #15
00001A5C                          1119  
00001A5C  4281                    1120          CLR.L   D1
00001A5E  1204                    1121          MOVE.B  D4,D1
00001A60  143C 000A               1122          MOVE.B  #10,D2
00001A64  103C 000F               1123          MOVE.B  #15,D0
00001A68  4E4F                    1124          TRAP    #15
00001A6A  4E75                    1125          RTS
00001A6C                          1126  PRINT_REG_SHIFT_INFO:
00001A6C  4EB9 0000266E           1127          JSR     PRINTSIZEOP
00001A72  4EB8 1A42               1128          JSR     SHIFT_IN1
00001A76  4EB9 00002852           1129          JSR     PRINTCOMMA
00001A7C  1807                    1130          MOVE.B  D7,D4
00001A7E  4EB9 000026AC           1131          JSR     PRINTDn
00001A84  4EB9 0000285E           1132          JSR     PRINTNEWLINE
00001A8A  4EB9 000028B2           1133          JSR     CLEAR_ALL
00001A90  4E75                    1134          RTS
00001A92                          1135  PRINT_MEM_SHIFT_INFO:
00001A92  1A3C 0001               1136          MOVE.B  #1,D5
00001A96  4EB9 0000266E           1137          JSR     PRINTSIZEOP
00001A9C                          1138  
00001A9C  4EB9 00001AC2           1139          JSR     PRINT_IS_MEM_IN
00001AA2  4EB9 0000286A           1140          JSR     PRINTDOLLAR
00001AA8  2206                    1141          MOVE.L  D6,D1
00001AAA  143C 0010               1142          MOVE.B  #16,D2
00001AAE  103C 000F               1143          MOVE.B  #15,D0
00001AB2  4E4F                    1144          TRAP    #15
00001AB4                          1145  
00001AB4  4EB9 0000285E           1146          JSR     PRINTNEWLINE
00001ABA  4EB9 000028B2           1147          JSR     CLEAR_ALL
00001AC0  4E75                    1148          RTS
00001AC2                          1149          
00001AC2                          1150  PRINT_IS_MEM_IN:
00001AC2  0C38 00FF 0010          1151          CMPI.B  #$FF,IS_IN_MEM_BOOL
00001AC8  6600 0DCA               1152          BNE     RETURN
00001ACC  11FC 0000 0010          1153          MOVE.B  #0,IS_IN_MEM_BOOL
00001AD2  4EB9 00002562           1154          JSR     PRINT_ADDA_INDIRECT_TYPE
00001AD8  4EB9 0000285E           1155          JSR     PRINTNEWLINE
00001ADE  341A                    1156          MOVE.W  (A2)+,D2    ; address should be incremented at the end of each print
00001AE0  B5F8 0004               1157          CMP.L   ENADR,A2   ; keep looping until reach the end
00001AE4  6D00 F60C               1158          BLT     LOOPMEM
00001AE8  6000 0DD8               1159          BRA     DONE
00001AEC                          1160  ************************************        
00001AEC                          1161  ******** PRINT LOGIC INSTRUCTIONS ********
00001AEC                          1162  ************************************
00001AEC                          1163  ; PRINT NOT EA:
00001AEC                          1164  PRINTNOT:
00001AEC  BC3C 0000               1165          CMP.B   #0,D6
00001AF0  6700 0026               1166          BEQ     PRINTNOT_REG
00001AF4  BC3C 0002               1167          CMP.B   #2,D6
00001AF8  6700 0040               1168          BEQ     PRINTNOT_INAn
00001AFC  BC3C 0003               1169          CMP.B   #3,D6
00001B00  6700 005A               1170          BEQ     PRINTNOT_POS_INAn
00001B04  BC3C 0004               1171          CMP.B   #4,D6
00001B08  6700 007A               1172          BEQ     PRINTNOT_PRE_INAn
00001B0C  BC3C 0007               1173          CMP.B   #7,D6
00001B10  6700 009A               1174          BEQ     PRINTNOT_ABS_ADR
00001B14  6000 FCF0               1175          BRA     INVALIDOP
00001B18                          1176  
00001B18                          1177  PRINTNOT_REG:
00001B18  4EB9 00002896           1178          JSR     PRINT_PC
00001B1E  43F8 0104               1179          LEA     DISNOT,A1   ; display NOT string
00001B22  103C 000E               1180          MOVE.B  #14,D0
00001B26  4E4F                    1181          TRAP    #15
00001B28  4EB9 0000266E           1182          JSR     PRINTSIZEOP
00001B2E  1807                    1183          MOVE.B  D7,D4
00001B30  4EB9 000026AC           1184          JSR     PRINTDn                 ; print the data register
00001B36  6000 0588               1185          BRA     CLOSING
00001B3A                          1186          
00001B3A                          1187  PRINTNOT_INAn:
00001B3A  4EB9 00002896           1188          JSR     PRINT_PC
00001B40  43F8 0104               1189          LEA     DISNOT,A1
00001B44  103C 000E               1190          MOVE.B  #14,D0
00001B48  4E4F                    1191          TRAP    #15
00001B4A  4EB9 0000266E           1192          JSR     PRINTSIZEOP
00001B50  1807                    1193          MOVE.B  D7,D4
00001B52  4EB9 000027EC           1194          JSR     PRINT_An_IN
00001B58  6000 0566               1195          BRA     CLOSING
00001B5C                          1196          
00001B5C                          1197  PRINTNOT_POS_INAn:
00001B5C  4EB9 00002896           1198          JSR     PRINT_PC
00001B62  43F8 0104               1199          LEA     DISNOT,A1
00001B66  103C 000E               1200          MOVE.B  #14,D0
00001B6A  4E4F                    1201          TRAP    #15
00001B6C  4EB9 0000266E           1202          JSR     PRINTSIZEOP
00001B72  1807                    1203          MOVE.B  D7,D4
00001B74  4EB9 000027EC           1204          JSR     PRINT_An_IN
00001B7A  4EB9 0000283A           1205          JSR     PRINTPLUS
00001B80  6000 053E               1206          BRA     CLOSING
00001B84                          1207  
00001B84                          1208  PRINTNOT_PRE_INAn:
00001B84  4EB9 00002896           1209          JSR     PRINT_PC
00001B8A  43F8 0104               1210          LEA     DISNOT,A1
00001B8E  103C 000E               1211          MOVE.B  #14,D0
00001B92  4E4F                    1212          TRAP    #15
00001B94  4EB9 0000266E           1213          JSR     PRINTSIZEOP
00001B9A  4EB9 00002846           1214          JSR     PRINTMINUS
00001BA0  1807                    1215          MOVE.B  D7,D4
00001BA2  4EB9 000027EC           1216          JSR     PRINT_An_IN
00001BA8  6000 0516               1217          BRA     CLOSING
00001BAC                          1218          
00001BAC                          1219  PRINTNOT_ABS_ADR:
00001BAC  4EB9 00002896           1220          JSR     PRINT_PC
00001BB2  43F8 0104               1221          LEA     DISNOT,A1
00001BB6  103C 000E               1222          MOVE.B  #14,D0
00001BBA  4E4F                    1223          TRAP    #15
00001BBC  4EB9 0000266E           1224          JSR     PRINTSIZEOP
00001BC2  4EB8 19CA               1225          JSR     DETERMINE_ADDR_MODE
00001BC6  4EB9 0000286A           1226          JSR     PRINTDOLLAR
00001BCC  2206                    1227          MOVE.L  D6,D1
00001BCE  143C 0010               1228          MOVE.B  #16,D2
00001BD2  103C 000F               1229          MOVE.B  #15,D0
00001BD6  4E4F                    1230          TRAP    #15
00001BD8  4EB9 0000285E           1231          JSR     PRINTNEWLINE
00001BDE  4EB9 000028B2           1232          JSR     CLEAR_ALL
00001BE4  B5F8 0004               1233          CMP.L   ENADR,A2
00001BE8  6D00 F508               1234          BLT     LOOPMEM
00001BEC  6000 0CD4               1235          BRA     DONE
00001BF0                          1236        
00001BF0                          1237  ; PRINT JSR EA  
00001BF0                          1238  PRINTJSR_ADR:
00001BF0  4EB9 00002896           1239          JSR     PRINT_PC
00001BF6  43F8 0108               1240          LEA     DISJSR,A1
00001BFA  103C 000E               1241          MOVE.B  #14,D0
00001BFE  4E4F                    1242          TRAP    #15
00001C00  1807                    1243          MOVE.B  D7,D4
00001C02  4EB9 000027EC           1244          JSR     PRINT_An_IN             ; Print the indirect address
00001C08  6000 04B6               1245          BRA     CLOSING
00001C0C                          1246          
00001C0C                          1247  PRINTJSR_ABS_ADR:
00001C0C  4EB9 00002896           1248          JSR     PRINT_PC
00001C12  43F8 0108               1249          LEA     DISJSR,A1
00001C16  103C 000E               1250          MOVE.B  #14,D0
00001C1A  4E4F                    1251          TRAP    #15
00001C1C  4EB8 19CA               1252          JSR     DETERMINE_ADDR_MODE
00001C20  4EB9 0000286A           1253          JSR     PRINTDOLLAR             ; Print the absolute address
00001C26  2206                    1254          MOVE.L  D6,D1
00001C28  143C 0010               1255          MOVE.B  #16,D2
00001C2C  103C 000F               1256          MOVE.B  #15,D0
00001C30  4E4F                    1257          TRAP    #15
00001C32  4EB9 0000285E           1258          JSR     PRINTNEWLINE
00001C38  4EB9 000028B2           1259          JSR     CLEAR_ALL
00001C3E  B5F8 0004               1260          CMP.L   ENADR,A2
00001C42  6D00 F4AE               1261          BLT     LOOPMEM
00001C46  6000 0C7A               1262          BRA     DONE
00001C4A                          1263          
00001C4A                          1264  ; PRINT LEA EA     
00001C4A                          1265  PRINTLEA_ADR:
00001C4A  4EB9 00002896           1266          JSR     PRINT_PC
00001C50  43F8 010E               1267          LEA     DISLEA,A1
00001C54  103C 000E               1268          MOVE.B  #14,D0
00001C58  4E4F                    1269          TRAP    #15
00001C5A  1807                    1270          MOVE.B  D7,D4
00001C5C  4EB9 000027EC           1271          JSR     PRINT_An_IN             ; Print indirect address of the LEA EA
00001C62  4EB9 00002852           1272          JSR     PRINTCOMMA
00001C68  1805                    1273          MOVE.B  D5,D4
00001C6A  4EB9 0000274C           1274          JSR     PRINTAn                 ;  Print the address register of the LEA destination
00001C70  6000 044E               1275          BRA     CLOSING
00001C74                          1276          
00001C74                          1277  PRINTLEA_ABS_ADR:
00001C74  4EB9 00002896           1278          JSR     PRINT_PC
00001C7A  43F8 010E               1279          LEA     DISLEA,A1
00001C7E  103C 000E               1280          MOVE.B  #14,D0
00001C82  4E4F                    1281          TRAP    #15
00001C84  4EB8 19CA               1282          JSR     DETERMINE_ADDR_MODE     ; Determine is it is a word or long absolute addressing
00001C88  4EB9 0000286A           1283          JSR     PRINTDOLLAR             ; print absolute address
00001C8E  2206                    1284          MOVE.L  D6,D1
00001C90  143C 0010               1285          MOVE.B  #16,D2
00001C94  103C 000F               1286          MOVE.B  #15,D0
00001C98  4E4F                    1287          TRAP    #15
00001C9A  4EB9 00002852           1288          JSR     PRINTCOMMA
00001CA0  1805                    1289          MOVE.B  D5,D4
00001CA2  4EB9 0000274C           1290          JSR     PRINTAn                 ; print destination address register
00001CA8  4EB9 0000285E           1291          JSR     PRINTNEWLINE
00001CAE  4EB9 000028B2           1292          JSR     CLEAR_ALL
00001CB4  B5F8 0004               1293          CMP.L   ENADR,A2
00001CB8  6D00 F438               1294          BLT     LOOPMEM
00001CBC  6000 0C04               1295          BRA     DONE
00001CC0                          1296          
00001CC0                          1297  ************************************        
00001CC0                          1298  ******** PRINT AND INSTRUCTIONS ********
00001CC0                          1299  ************************************       
00001CC0                          1300  PRINT_AND_DATA:
00001CC0  0805 0002               1301          BTST.L  #2,D5           ; determine opmode, start with 0 = <ea>, Dn; 1 = Dn, <ea>
00001CC4  6700 0006               1302          BEQ     PRINT_AND_EA_Dn
00001CC8  6000 0102               1303          BRA     PRINT_AND_Dn_EA
00001CCC                          1304          
00001CCC                          1305  PRINT_AND_EA_Dn:
00001CCC  BC3C 0000               1306          CMP.B   #0,D6
00001CD0  6700 0026               1307          BEQ     PRINT_AND_Dn_Dn
00001CD4  BC3C 0002               1308          CMP.B   #2,D6
00001CD8  6700 0040               1309          BEQ     PRINT_AND_INAn_Dn
00001CDC  BC3C 0003               1310          CMP.B   #3,D6
00001CE0  6700 005A               1311          BEQ     PRINT_AND_POS_INAn_Dn
00001CE4  BC3C 0004               1312          CMP.B   #4,D6
00001CE8  6700 007A               1313          BEQ     PRINT_AND_PRE_INAn_Dn
00001CEC  BC3C 0007               1314          CMP.B   #7,D6
00001CF0  6700 009A               1315          BEQ     PRINT_AND_ABS_ADR_Dn
00001CF4  6000 FB10               1316          BRA     INVALIDOP
00001CF8                          1317          
00001CF8                          1318          
00001CF8                          1319  PRINT_AND_Dn_Dn:
00001CF8  4EB9 00001E96           1320          JSR     PRINT_AND_OPENING
00001CFE  1604                    1321          MOVE.B  D4,D3       ; Temp. put the register to D3
00001D00  1807                    1322          MOVE.B  D7,D4
00001D02  4EB9 000026AC           1323          JSR     PRINTDn
00001D08  4EB9 00002852           1324          JSR     PRINTCOMMA
00001D0E  1803                    1325          MOVE.B  D3,D4
00001D10  4EB9 000026AC           1326          JSR     PRINTDn
00001D16  6000 03A8               1327          BRA     CLOSING
00001D1A                          1328          
00001D1A                          1329  PRINT_AND_INAn_Dn:
00001D1A  4EB9 00001E96           1330          JSR     PRINT_AND_OPENING
00001D20  1604                    1331          MOVE.B  D4,D3
00001D22  1807                    1332          MOVE.B  D7,D4
00001D24  4EB9 000027EC           1333          JSR     PRINT_An_IN
00001D2A  4EB9 00002852           1334          JSR     PRINTCOMMA
00001D30  1803                    1335          MOVE.B  D3,D4
00001D32  4EB9 000026AC           1336          JSR     PRINTDn
00001D38  6000 0386               1337          BRA     CLOSING
00001D3C                          1338          
00001D3C                          1339  PRINT_AND_POS_INAn_Dn:
00001D3C  4EB9 00001E96           1340          JSR     PRINT_AND_OPENING
00001D42  1604                    1341          MOVE.B  D4,D3
00001D44  1807                    1342          MOVE.B  D7,D4
00001D46  4EB9 000027EC           1343          JSR     PRINT_An_IN
00001D4C  4EB9 0000283A           1344          JSR     PRINTPLUS
00001D52  4EB9 00002852           1345          JSR     PRINTCOMMA
00001D58  1803                    1346          MOVE.B  D3,D4
00001D5A  4EB9 000026AC           1347          JSR     PRINTDn
00001D60  6000 035E               1348          BRA     CLOSING
00001D64                          1349          
00001D64                          1350  PRINT_AND_PRE_INAn_Dn:
00001D64  4EB9 00001E96           1351          JSR     PRINT_AND_OPENING
00001D6A  1604                    1352          MOVE.B  D4,D3
00001D6C  1807                    1353          MOVE.B  D7,D4
00001D6E  4EB9 00002846           1354          JSR     PRINTMINUS
00001D74  4EB9 000027EC           1355          JSR     PRINT_An_IN
00001D7A  4EB9 00002852           1356          JSR     PRINTCOMMA
00001D80  1803                    1357          MOVE.B  D3,D4
00001D82  4EB9 000026AC           1358          JSR     PRINTDn
00001D88  6000 0336               1359          BRA     CLOSING
00001D8C                          1360          
00001D8C                          1361  PRINT_AND_ABS_ADR_Dn:
00001D8C  4EB9 00001E96           1362          JSR     PRINT_AND_OPENING
00001D92  4EB8 19CA               1363          JSR     DETERMINE_ADDR_MODE
00001D96  4EB9 000020A4           1364          JSR     DOLLAR_OR_HASHTAG
00001D9C  2206                    1365          MOVE.L  D6,D1
00001D9E  143C 0010               1366          MOVE.B  #16,D2
00001DA2  103C 000F               1367          MOVE.B  #15,D0
00001DA6  4E4F                    1368          TRAP    #15
00001DA8  4EB9 00002852           1369          JSR     PRINTCOMMA
00001DAE  4EB9 000026AC           1370          JSR     PRINTDn
00001DB4  4EB9 0000285E           1371          JSR     PRINTNEWLINE
00001DBA  4EB9 000028B2           1372          JSR     CLEAR_ALL
00001DC0  B5F8 0004               1373          CMP.L   ENADR,A2
00001DC4  6D00 F32C               1374          BLT     LOOPMEM
00001DC8  6000 0AF8               1375          BRA     DONE 
00001DCC                          1376       
00001DCC                          1377  PRINT_AND_Dn_EA:
00001DCC  BC3C 0002               1378          CMP.B   #2,D6
00001DD0  6700 001E               1379          BEQ     PRINT_AND_Dn_INAn
00001DD4  BC3C 0003               1380          CMP.B   #3,D6
00001DD8  6700 0034               1381          BEQ     PRINT_AND_Dn_POS_INAn
00001DDC  BC3C 0004               1382          CMP.B   #4,D6
00001DE0  6700 0050               1383          BEQ     PRINT_AND_Dn_PRE_INAn
00001DE4  BC3C 0007               1384          CMP.B   #7,D6
00001DE8  6700 006C               1385          BEQ     PRINT_AND_Dn_ABS_ADR
00001DEC  6000 FA18               1386          BRA     INVALIDOP
00001DF0                          1387          
00001DF0                          1388  PRINT_AND_Dn_INAn:
00001DF0  4EB9 00001E96           1389          JSR     PRINT_AND_OPENING
00001DF6  4EB9 000026AC           1390          JSR     PRINTDn
00001DFC  4EB9 00002852           1391          JSR     PRINTCOMMA
00001E02  1807                    1392          MOVE.B  D7,D4
00001E04  4EB9 000027EC           1393          JSR     PRINT_An_IN
00001E0A  6000 02B4               1394          BRA     CLOSING
00001E0E                          1395          
00001E0E                          1396  PRINT_AND_Dn_POS_INAn:
00001E0E  4EB9 00001E96           1397          JSR     PRINT_AND_OPENING
00001E14  4EB9 000026AC           1398          JSR     PRINTDn
00001E1A  4EB9 00002852           1399          JSR     PRINTCOMMA
00001E20  1807                    1400          MOVE.B  D7,D4
00001E22  4EB9 000027EC           1401          JSR     PRINT_An_IN
00001E28  4EB9 0000283A           1402          JSR     PRINTPLUS
00001E2E  6000 0290               1403          BRA     CLOSING
00001E32                          1404  
00001E32                          1405  PRINT_AND_Dn_PRE_INAn:
00001E32  4EB9 00001E96           1406          JSR     PRINT_AND_OPENING
00001E38  4EB9 000026AC           1407          JSR     PRINTDn
00001E3E  4EB9 00002852           1408          JSR     PRINTCOMMA
00001E44  1807                    1409          MOVE.B  D7,D4
00001E46  4EB9 00002846           1410          JSR     PRINTMINUS
00001E4C  4EB9 000027EC           1411          JSR     PRINT_An_IN
00001E52  6000 026C               1412          BRA     CLOSING
00001E56                          1413          
00001E56                          1414  PRINT_AND_Dn_ABS_ADR:
00001E56  4EB9 00001E96           1415          JSR     PRINT_AND_OPENING
00001E5C  4EB9 000026AC           1416          JSR     PRINTDn
00001E62  4EB9 00002852           1417          JSR     PRINTCOMMA
00001E68  4EB8 19CA               1418          JSR     DETERMINE_ADDR_MODE
00001E6C  4EB9 0000286A           1419          JSR     PRINTDOLLAR
00001E72  2206                    1420          MOVE.L  D6,D1
00001E74  143C 0010               1421          MOVE.B  #16,D2
00001E78  103C 000F               1422          MOVE.B  #15,D0
00001E7C  4E4F                    1423          TRAP    #15
00001E7E  4EB9 0000285E           1424          JSR     PRINTNEWLINE
00001E84  4EB9 000028B2           1425          JSR     CLEAR_ALL
00001E8A  B5F8 0004               1426          CMP.L   ENADR,A2
00001E8E  6D00 F262               1427          BLT     LOOPMEM
00001E92  6000 0A2E               1428          BRA     DONE 
00001E96                          1429        
00001E96                          1430  PRINT_AND_OPENING:
00001E96  4EB9 00002896           1431          JSR     PRINT_PC
00001E9C  43F8 0114               1432          LEA     DISAND,A1
00001EA0  103C 000E               1433          MOVE.B  #14,D0
00001EA4  4E4F                    1434          TRAP    #15
00001EA6  0205 0003               1435          ANDI.B  #$3,D5
00001EAA  4EB9 0000266E           1436          JSR     PRINTSIZEOP
00001EB0  4E75                    1437          RTS
00001EB2                          1438          
00001EB2                          1439  ************************************        
00001EB2                          1440  ******** PRINT OR INSTRUCTIONS ********
00001EB2                          1441  ************************************       
00001EB2                          1442  PRINT_OR_DATA:
00001EB2  0805 0002               1443          BTST.L  #2,D5           ; determine opmode, start with 0 = <ea>, Dn; 1 = Dn, <ea>
00001EB6  6700 0006               1444          BEQ     PRINT_OR_EA_Dn
00001EBA  6000 0102               1445          BRA     PRINT_OR_Dn_EA
00001EBE                          1446          
00001EBE                          1447  PRINT_OR_EA_Dn:
00001EBE  BC3C 0000               1448          CMP.B   #0,D6
00001EC2  6700 0026               1449          BEQ     PRINT_OR_Dn_Dn
00001EC6  BC3C 0002               1450          CMP.B   #2,D6
00001ECA  6700 0040               1451          BEQ     PRINT_OR_INAn_Dn
00001ECE  BC3C 0003               1452          CMP.B   #3,D6
00001ED2  6700 005A               1453          BEQ     PRINT_OR_POS_INAn_Dn
00001ED6  BC3C 0004               1454          CMP.B   #4,D6
00001EDA  6700 007A               1455          BEQ     PRINT_OR_PRE_INAn_Dn
00001EDE  BC3C 0007               1456          CMP.B   #7,D6
00001EE2  6700 009A               1457          BEQ     PRINT_OR_ABS_ADR_Dn
00001EE6  6000 F91E               1458          BRA     INVALIDOP
00001EEA                          1459          
00001EEA                          1460          
00001EEA                          1461  PRINT_OR_Dn_Dn:
00001EEA  4EB9 00002088           1462          JSR     PRINT_OR_OPENING
00001EF0  1604                    1463          MOVE.B  D4,D3       ; Temp. put the register to D3
00001EF2  1807                    1464          MOVE.B  D7,D4
00001EF4  4EB9 000026AC           1465          JSR     PRINTDn
00001EFA  4EB9 00002852           1466          JSR     PRINTCOMMA
00001F00  1803                    1467          MOVE.B  D3,D4
00001F02  4EB9 000026AC           1468          JSR     PRINTDn
00001F08  6000 01B6               1469          BRA     CLOSING
00001F0C                          1470          
00001F0C                          1471  PRINT_OR_INAn_Dn:
00001F0C  4EB9 00002088           1472          JSR     PRINT_OR_OPENING
00001F12  1604                    1473          MOVE.B  D4,D3
00001F14  1807                    1474          MOVE.B  D7,D4
00001F16  4EB9 000027EC           1475          JSR     PRINT_An_IN
00001F1C  4EB9 00002852           1476          JSR     PRINTCOMMA
00001F22  1803                    1477          MOVE.B  D3,D4
00001F24  4EB9 000026AC           1478          JSR     PRINTDn
00001F2A  6000 0194               1479          BRA     CLOSING
00001F2E                          1480          
00001F2E                          1481  PRINT_OR_POS_INAn_Dn:
00001F2E  4EB9 00002088           1482          JSR     PRINT_OR_OPENING
00001F34  1604                    1483          MOVE.B  D4,D3
00001F36  1807                    1484          MOVE.B  D7,D4
00001F38  4EB9 000027EC           1485          JSR     PRINT_An_IN
00001F3E  4EB9 0000283A           1486          JSR     PRINTPLUS
00001F44  4EB9 00002852           1487          JSR     PRINTCOMMA
00001F4A  1803                    1488          MOVE.B  D3,D4
00001F4C  4EB9 000026AC           1489          JSR     PRINTDn
00001F52  6000 016C               1490          BRA     CLOSING
00001F56                          1491          
00001F56                          1492  PRINT_OR_PRE_INAn_Dn:
00001F56  4EB9 00002088           1493          JSR     PRINT_OR_OPENING
00001F5C  1604                    1494          MOVE.B  D4,D3
00001F5E  1807                    1495          MOVE.B  D7,D4
00001F60  4EB9 00002846           1496          JSR     PRINTMINUS
00001F66  4EB9 000027EC           1497          JSR     PRINT_An_IN
00001F6C  4EB9 00002852           1498          JSR     PRINTCOMMA
00001F72  1803                    1499          MOVE.B  D3,D4
00001F74  4EB9 000026AC           1500          JSR     PRINTDn
00001F7A  6000 0144               1501          BRA     CLOSING
00001F7E                          1502          
00001F7E                          1503  PRINT_OR_ABS_ADR_Dn:
00001F7E  4EB9 00002088           1504          JSR     PRINT_OR_OPENING
00001F84  4EB8 19CA               1505          JSR     DETERMINE_ADDR_MODE
00001F88  4EB9 000020A4           1506          JSR     DOLLAR_OR_HASHTAG
00001F8E  2206                    1507          MOVE.L  D6,D1
00001F90  143C 0010               1508          MOVE.B  #16,D2
00001F94  103C 000F               1509          MOVE.B  #15,D0
00001F98  4E4F                    1510          TRAP    #15
00001F9A  4EB9 00002852           1511          JSR     PRINTCOMMA
00001FA0  4EB9 000026AC           1512          JSR     PRINTDn
00001FA6  4EB9 0000285E           1513          JSR     PRINTNEWLINE
00001FAC  4EB9 000028B2           1514          JSR     CLEAR_ALL
00001FB2  B5F8 0004               1515          CMP.L   ENADR,A2
00001FB6  6D00 F13A               1516          BLT     LOOPMEM
00001FBA  6000 0906               1517          BRA     DONE 
00001FBE                          1518       
00001FBE                          1519  PRINT_OR_Dn_EA:
00001FBE  BC3C 0002               1520          CMP.B   #2,D6
00001FC2  6700 001E               1521          BEQ     PRINT_OR_Dn_INAn
00001FC6  BC3C 0003               1522          CMP.B   #3,D6
00001FCA  6700 0034               1523          BEQ     PRINT_OR_Dn_POS_INAn
00001FCE  BC3C 0004               1524          CMP.B   #4,D6
00001FD2  6700 0050               1525          BEQ     PRINT_OR_Dn_PRE_INAn
00001FD6  BC3C 0007               1526          CMP.B   #7,D6
00001FDA  6700 006C               1527          BEQ     PRINT_OR_Dn_ABS_ADR
00001FDE  6000 F826               1528          BRA     INVALIDOP
00001FE2                          1529          
00001FE2                          1530  PRINT_OR_Dn_INAn:
00001FE2  4EB9 00002088           1531          JSR     PRINT_OR_OPENING
00001FE8  4EB9 000026AC           1532          JSR     PRINTDn
00001FEE  4EB9 00002852           1533          JSR     PRINTCOMMA
00001FF4  1807                    1534          MOVE.B  D7,D4
00001FF6  4EB9 000027EC           1535          JSR     PRINT_An_IN
00001FFC  6000 00C2               1536          BRA     CLOSING
00002000                          1537          
00002000                          1538  PRINT_OR_Dn_POS_INAn:
00002000  4EB9 00002088           1539          JSR     PRINT_OR_OPENING
00002006  4EB9 000026AC           1540          JSR     PRINTDn
0000200C  4EB9 00002852           1541          JSR     PRINTCOMMA
00002012  1807                    1542          MOVE.B  D7,D4
00002014  4EB9 000027EC           1543          JSR     PRINT_An_IN
0000201A  4EB9 0000283A           1544          JSR     PRINTPLUS
00002020  6000 009E               1545          BRA     CLOSING
00002024                          1546  
00002024                          1547  PRINT_OR_Dn_PRE_INAn:
00002024  4EB9 00002088           1548          JSR     PRINT_OR_OPENING
0000202A  4EB9 000026AC           1549          JSR     PRINTDn
00002030  4EB9 00002852           1550          JSR     PRINTCOMMA
00002036  1807                    1551          MOVE.B  D7,D4
00002038  4EB9 00002846           1552          JSR     PRINTMINUS
0000203E  4EB9 000027EC           1553          JSR     PRINT_An_IN
00002044  6000 007A               1554          BRA     CLOSING
00002048                          1555          
00002048                          1556  PRINT_OR_Dn_ABS_ADR:
00002048  4EB9 00002088           1557          JSR     PRINT_OR_OPENING
0000204E  4EB9 000026AC           1558          JSR     PRINTDn
00002054  4EB9 00002852           1559          JSR     PRINTCOMMA
0000205A  4EB8 19CA               1560          JSR     DETERMINE_ADDR_MODE
0000205E  4EB9 0000286A           1561          JSR     PRINTDOLLAR
00002064  2206                    1562          MOVE.L  D6,D1
00002066  143C 0010               1563          MOVE.B  #16,D2
0000206A  103C 000F               1564          MOVE.B  #15,D0
0000206E  4E4F                    1565          TRAP    #15
00002070  4EB9 0000285E           1566          JSR     PRINTNEWLINE
00002076  4EB9 000028B2           1567          JSR     CLEAR_ALL
0000207C  B5F8 0004               1568          CMP.L   ENADR,A2
00002080  6D00 F070               1569          BLT     LOOPMEM
00002084  6000 083C               1570          BRA     DONE 
00002088                          1571        
00002088                          1572  PRINT_OR_OPENING:
00002088  4EB9 00002896           1573          JSR     PRINT_PC
0000208E  43F8 0118               1574          LEA     DISOR,A1
00002092  103C 000E               1575          MOVE.B  #14,D0
00002096  4E4F                    1576          TRAP    #15
00002098  0205 0003               1577          ANDI.B  #$3,D5
0000209C  4EB9 0000266E           1578          JSR     PRINTSIZEOP
000020A2  4E75                    1579          RTS
000020A4                          1580  
000020A4                          1581          
000020A4                          1582  DOLLAR_OR_HASHTAG:
000020A4  BE3C 0004               1583          CMP.B   #4,D7
000020A8  6700 0006               1584          BEQ     HASHTAG
000020AC  6000 000A               1585          BRA     DOLLAR
000020B0                          1586          
000020B0                          1587  HASHTAG:
000020B0  4EB9 00002816           1588          JSR     PRINTPOUND
000020B6  4E75                    1589          RTS
000020B8                          1590          
000020B8                          1591  DOLLAR:
000020B8  4EB9 0000286A           1592          JSR     PRINTDOLLAR
000020BE  4E75                    1593          RTS
000020C0                          1594    
000020C0                          1595  CLOSING:
000020C0  4EB9 0000285E           1596          JSR     PRINTNEWLINE
000020C6  4EB9 000028B2           1597          JSR     CLEAR_ALL
000020CC  341A                    1598          MOVE.W  (A2)+,D2
000020CE  B5F8 0004               1599          CMP.L   ENADR,A2
000020D2  6D00 F01E               1600          BLT     LOOPMEM
000020D6  6000 07EA               1601          BRA     DONE 
000020DA                          1602  
000020DA                          1603  ******** PRINT REGISTER SHIFTS ********
000020DA                          1604  ******** PRINT LOGIC REGISTER SHIFTS ********
000020DA                          1605  PRINTLSL_REG:
000020DA                          1606          * D7: register, D6: is Count/Dn
000020DA                          1607          * D5: Size Op,  D4: Count/Dn
000020DA  4EB9 00002896           1608          JSR     PRINT_PC
000020E0  43F8 011B               1609          LEA     DISLSL,A1
000020E4  103C 000E               1610          MOVE.B  #14,D0
000020E8  4E4F                    1611          TRAP    #15
000020EA                          1612  
000020EA  4EB8 1A6C               1613          JSR     PRINT_REG_SHIFT_INFO
000020EE  341A                    1614          MOVE.W  (A2)+,D2    ; address should be incremented at the end of each print
000020F0  B5F8 0004               1615          CMP.L   ENADR,A2   ; keep looping until reach the end
000020F4  6D00 EFFC               1616          BLT     LOOPMEM
000020F8  6000 07C8               1617          BRA     DONE
000020FC                          1618  PRINTLSR_REG:
000020FC                          1619          * D7: register, D6: is Count/Dn
000020FC                          1620          * D5: Size Op,  D4: Count/Dn
000020FC  4EB9 00002896           1621          JSR     PRINT_PC
00002102  43F8 011F               1622          LEA     DISLSR,A1
00002106  103C 000E               1623          MOVE.B  #14,D0
0000210A  4E4F                    1624          TRAP    #15
0000210C                          1625  
0000210C  4EB8 1A6C               1626          JSR     PRINT_REG_SHIFT_INFO
00002110  341A                    1627          MOVE.W  (A2)+,D2    ; address should be incremented at the end of each print
00002112  B5F8 0004               1628          CMP.L   ENADR,A2   ; keep looping until reach the end
00002116  6D00 EFDA               1629          BLT     LOOPMEM
0000211A  6000 07A6               1630          BRA     DONE
0000211E                          1631  ******** PRINT ARITHMETIC REGISTER SHIFTS ********
0000211E                          1632  PRINTASL_REG:
0000211E                          1633          * D7: register, D6: is Count/Dn
0000211E                          1634          * D5: Size Op,  D4: Count/Dn
0000211E  4EB9 00002896           1635          JSR     PRINT_PC
00002124  43F8 0123               1636          LEA     DISASL,A1
00002128  103C 000E               1637          MOVE.B  #14,D0
0000212C  4E4F                    1638          TRAP    #15
0000212E                          1639  
0000212E  4EB8 1A6C               1640          JSR     PRINT_REG_SHIFT_INFO
00002132  341A                    1641          MOVE.W  (A2)+,D2    ; address should be incremented at the end of each print
00002134  B5F8 0004               1642          CMP.L   ENADR,A2   ; keep looping until reach the end
00002138  6D00 EFB8               1643          BLT     LOOPMEM
0000213C  6000 0784               1644          BRA     DONE
00002140                          1645  PRINTASR_REG:
00002140                          1646          * D7: register, D6: is Count/Dn
00002140                          1647          * D5: Size Op,  D4: Count/Dn
00002140  4EB9 00002896           1648          JSR     PRINT_PC
00002146  43F8 0127               1649          LEA     DISASR,A1
0000214A  103C 000E               1650          MOVE.B  #14,D0
0000214E  4E4F                    1651          TRAP    #15
00002150                          1652  
00002150  4EB8 1A6C               1653          JSR     PRINT_REG_SHIFT_INFO
00002154  341A                    1654          MOVE.W  (A2)+,D2    ; address should be incremented at the end of each print
00002156  B5F8 0004               1655          CMP.L   ENADR,A2   ; keep looping until reach the end
0000215A  6D00 EF96               1656          BLT     LOOPMEM
0000215E  6000 0762               1657          BRA     DONE
00002162                          1658  ******** PRINT ROTATATE SHIFTS ********
00002162                          1659  PRINTROL_REG:
00002162                          1660          * D7: register, D6: is Count/Dn
00002162                          1661          * D5: Size Op,  D4: Count/Dn
00002162  4EB9 00002896           1662          JSR     PRINT_PC
00002168  43F8 012B               1663          LEA     DISROL,A1
0000216C  103C 000E               1664          MOVE.B  #14,D0
00002170  4E4F                    1665          TRAP    #15
00002172                          1666  
00002172  4EB8 1A6C               1667          JSR     PRINT_REG_SHIFT_INFO
00002176  341A                    1668          MOVE.W  (A2)+,D2    ; address should be incremented at the end of each print
00002178  B5F8 0004               1669          CMP.L   ENADR,A2   ; keep looping until reach the end
0000217C  6D00 EF74               1670          BLT     LOOPMEM
00002180  6000 0740               1671          BRA     DONE
00002184                          1672  PRINTROR_REG:
00002184                          1673          * D7: register, D6: is Count/Dn
00002184                          1674          * D5: Size Op,  D4: Count/Dn
00002184  4EB9 00002896           1675          JSR     PRINT_PC
0000218A  43F8 012F               1676          LEA     DISROR,A1
0000218E  103C 000E               1677          MOVE.B  #14,D0
00002192  4E4F                    1678          TRAP    #15
00002194                          1679  
00002194  4EB8 1A6C               1680          JSR     PRINT_REG_SHIFT_INFO
00002198  341A                    1681          MOVE.W  (A2)+,D2    ; address should be incremented at the end of each print
0000219A  B5F8 0004               1682          CMP.L   ENADR,A2   ; keep looping until reach the end
0000219E  6D00 EF52               1683          BLT     LOOPMEM
000021A2  6000 071E               1684          BRA     DONE
000021A6                          1685  ******** PRINT MEMORY SHIFTS ********
000021A6                          1686  ******** PRINT LOGIC MEMORY SHIFTS ********
000021A6                          1687  PRINTLSL_MEM:
000021A6                          1688          * D6 contains the EA
000021A6  4EB9 00002896           1689          JSR     PRINT_PC
000021AC  43F8 011B               1690          LEA     DISLSL,A1
000021B0  103C 000E               1691          MOVE.B  #14,D0
000021B4  4E4F                    1692          TRAP    #15
000021B6                          1693  
000021B6  4EB8 1A92               1694          JSR     PRINT_MEM_SHIFT_INFO
000021BA  B5F8 0004               1695          CMP.L   ENADR,A2   ; keep looping until reach the end
000021BE  6D00 EF32               1696          BLT     LOOPMEM
000021C2  6000 06FE               1697          BRA     DONE
000021C6                          1698  PRINTLSR_MEM:
000021C6                          1699          * D6 contains the EA
000021C6  4EB9 00002896           1700          JSR     PRINT_PC
000021CC  43F8 011F               1701          LEA     DISLSR,A1
000021D0  103C 000E               1702          MOVE.B  #14,D0
000021D4  4E4F                    1703          TRAP    #15
000021D6                          1704  
000021D6  4EB8 1A92               1705          JSR     PRINT_MEM_SHIFT_INFO
000021DA  B5F8 0004               1706          CMP.L   ENADR,A2   ; keep looping until reach the end
000021DE  6D00 EF12               1707          BLT     LOOPMEM
000021E2  6000 06DE               1708          BRA     DONE
000021E6                          1709  ******** PRINT ARITHMETIC MEMORY SHIFTS ********
000021E6                          1710  PRINTASL_MEM:
000021E6                          1711          * D6 contains the EA
000021E6  4EB9 00002896           1712          JSR     PRINT_PC
000021EC  43F8 0123               1713          LEA     DISASL,A1
000021F0  103C 000E               1714          MOVE.B  #14,D0
000021F4  4E4F                    1715          TRAP    #15
000021F6                          1716  
000021F6  4EB8 1A92               1717          JSR     PRINT_MEM_SHIFT_INFO
000021FA  B5F8 0004               1718          CMP.L   ENADR,A2   ; keep looping until reach the end
000021FE  6D00 EEF2               1719          BLT     LOOPMEM
00002202  6000 06BE               1720          BRA     DONE
00002206                          1721  PRINTASR_MEM:
00002206                          1722          * D6 contains the EA
00002206  4EB9 00002896           1723          JSR     PRINT_PC
0000220C  43F8 0127               1724          LEA     DISASR,A1
00002210  103C 000E               1725          MOVE.B  #14,D0
00002214  4E4F                    1726          TRAP    #15
00002216                          1727  
00002216  4EB8 1A92               1728          JSR     PRINT_MEM_SHIFT_INFO
0000221A  B5F8 0004               1729          CMP.L   ENADR,A2   ; keep looping until reach the end
0000221E  6D00 EED2               1730          BLT     LOOPMEM
00002222  6000 069E               1731          BRA     DONE
00002226                          1732  PRINTROL_MEM:
00002226                          1733          * D6 contains the EA
00002226  4EB9 00002896           1734          JSR     PRINT_PC
0000222C  43F8 012B               1735          LEA     DISROL,A1
00002230  103C 000E               1736          MOVE.B  #14,D0
00002234  4E4F                    1737          TRAP    #15
00002236                          1738  
00002236  4EB8 1A92               1739          JSR     PRINT_MEM_SHIFT_INFO
0000223A  B5F8 0004               1740          CMP.L   ENADR,A2   ; keep looping until reach the end
0000223E  6D00 EEB2               1741          BLT     LOOPMEM
00002242  6000 067E               1742          BRA     DONE
00002246                          1743  PRINTROR_MEM:
00002246                          1744          * D6 contains the EA
00002246  4EB9 00002896           1745          JSR     PRINT_PC
0000224C  43F8 012F               1746          LEA     DISROR,A1
00002250  103C 000E               1747          MOVE.B  #14,D0
00002254  4E4F                    1748          TRAP    #15
00002256                          1749  
00002256  4EB8 1A92               1750          JSR     PRINT_MEM_SHIFT_INFO
0000225A  B5F8 0004               1751          CMP.L   ENADR,A2   ; keep looping until reach the end
0000225E  6D00 EE92               1752          BLT     LOOPMEM
00002262  6000 065E               1753          BRA     DONE
00002266                          1754  ******** ADDITION INSTRUCTIONS ********
00002266                          1755  ******** PRINT ADD Dn,Dn ********
00002266                          1756  PRINT_ADD_Dn:
00002266                          1757  *   D7 - register mode, D4 - register number
00002266                          1758  *   D6 - opmode, D5 - register
00002266  4EB9 00002896           1759          JSR     PRINT_PC
0000226C  43F8 0133               1760          LEA     DISADD,A1
00002270  103C 000E               1761          MOVE.B  #14,D0
00002274  4E4F                    1762          TRAP    #15
00002276                          1763  
00002276  4EB9 0000259A           1764          JSR     PRINT_ADD_OPMODE
0000227C                          1765          * Check if its Dn, ea *
0000227C  0C06 0008               1766          CMPI.B  #8,D6 
00002280  6600 0030               1767          BNE     PRINT_ADD_Dn_Ea
00002284                          1768  
00002284  4EB9 0000253C           1769          JSR     PRINT_ADDA_Dn_OR_An
0000228A  4EB9 00002852           1770          JSR     PRINTCOMMA
00002290  3805                    1771          MOVE.W  D5,D4
00002292  4EB9 000026AC           1772          JSR     PRINTDn
00002298  4EB9 0000285E           1773          JSR     PRINTNEWLINE
0000229E  4EB9 000028B2           1774          JSR     CLEAR_ALL
000022A4                          1775  
000022A4  341A                    1776          MOVE.W  (A2)+,D2
000022A6  B5F8 0004               1777          CMP.L   ENADR,A2   ; keep looping until reach the end
000022AA  6D00 EE46               1778          BLT     LOOPMEM
000022AE  6000 0612               1779          BRA     DONE
000022B2                          1780  PRINT_ADD_Dn_Ea:
000022B2  3204                    1781          MOVE.W  D4,D1
000022B4  3805                    1782          MOVE.W  D5,D4
000022B6  4EB9 000026AC           1783          JSR     PRINTDn
000022BC  4EB9 00002852           1784          JSR     PRINTCOMMA
000022C2  3801                    1785          MOVE.W  D1,D4
000022C4  4EB9 0000253C           1786          JSR     PRINT_ADDA_Dn_OR_An
000022CA  4EB9 0000285E           1787          JSR     PRINTNEWLINE
000022D0  4EB9 000028B2           1788          JSR     CLEAR_ALL
000022D6                          1789  
000022D6  341A                    1790          MOVE.W  (A2)+,D2
000022D8  B5F8 0004               1791          CMP.L   ENADR,A2   ; keep looping until reach the end
000022DC  6D00 EE14               1792          BLT     LOOPMEM
000022E0  6000 05E0               1793          BRA     DONE  
000022E4                          1794  PRINT_ADD_EA:
000022E4                          1795  *   D7 - EA, D4 - register number
000022E4                          1796  *   D6 - opmode, D5 - register
000022E4  4EB9 00002896           1797          JSR     PRINT_PC
000022EA  43F8 0133               1798          LEA     DISADD,A1
000022EE  103C 000E               1799          MOVE.B  #14,D0
000022F2  4E4F                    1800          TRAP    #15
000022F4                          1801  
000022F4  4EB9 0000259A           1802          JSR     PRINT_ADD_OPMODE
000022FA  4EB9 000025A8           1803          JSR     PRINT_EA_DN_OR_DN_EA
00002300  4EB9 000028B2           1804          JSR     CLEAR_ALL
00002306                          1805  
00002306  3412                    1806          MOVE.W  (A2),D2
00002308  B5F8 0004               1807          CMP.L   ENADR,A2   ; keep looping until reach the end
0000230C  6D00 EDE4               1808          BLT     LOOPMEM
00002310  6000 05B0               1809          BRA     DONE
00002314                          1810  ******** PRINT ADDA Dn,An & An,An ********
00002314                          1811  PRINT_ADDA_DnAn:
00002314                          1812  *   D7 - ea mode, D4 - ea number
00002314                          1813  *   D6 - opmode, D5 - register
00002314  4EB9 00002896           1814          JSR     PRINT_PC
0000231A  43F8 0137               1815          LEA     DISADDA,A1
0000231E  103C 000E               1816          MOVE.B  #14,D0
00002322  4E4F                    1817          TRAP    #15
00002324                          1818  
00002324  4EB9 00002550           1819          JSR     PRINT_ADDA_OPMODE
0000232A  4EB9 0000253C           1820          JSR     PRINT_ADDA_Dn_OR_An
00002330  4EB9 00002852           1821          JSR     PRINTCOMMA
00002336  3805                    1822          MOVE.W  D5,D4
00002338  4EB9 0000274C           1823          JSR     PRINTAn
0000233E  4EB9 0000285E           1824          JSR     PRINTNEWLINE
00002344  4EB9 000028B2           1825          JSR     CLEAR_ALL
0000234A                          1826  
0000234A  341A                    1827          MOVE.W  (A2)+,D2
0000234C  B5F8 0004               1828          CMP.L   ENADR,A2   ; keep looping until reach the end
00002350  6D00 EDA0               1829          BLT     LOOPMEM
00002354  6000 056C               1830          BRA     DONE
00002358                          1831  ******** PRINT ADDA (An),An & (An)+,An & -(An),An ********
00002358                          1832  PRINT_ADDA_INDIRECT:
00002358  4EB9 00002896           1833          JSR     PRINT_PC
0000235E  43F8 0137               1834          LEA     DISADDA,A1
00002362  103C 000E               1835          MOVE.B  #14,D0
00002366  4E4F                    1836          TRAP    #15
00002368                          1837  
00002368  4EB9 00002550           1838          JSR     PRINT_ADDA_OPMODE
0000236E  4EB9 00002562           1839          JSR     PRINT_ADDA_INDIRECT_TYPE
00002374  4EB9 00002852           1840          JSR     PRINTCOMMA
0000237A                          1841  
0000237A  3805                    1842          MOVE.W  D5,D4
0000237C  4EB9 0000274C           1843          JSR     PRINTAn
00002382  4EB9 0000285E           1844          JSR     PRINTNEWLINE
00002388  4EB9 000028B2           1845          JSR     CLEAR_ALL
0000238E                          1846  
0000238E  341A                    1847          MOVE.W  (A2)+,D2
00002390  B5F8 0004               1848          CMP.L   ENADR,A2   ; keep looping until reach the end
00002394  6D00 ED5C               1849          BLT     LOOPMEM
00002398  6000 0528               1850          BRA     DONE
0000239C                          1851  ******** PRINT ADDA ea,An ********
0000239C                          1852  PRINT_ADDA_EA:
0000239C                          1853  *   D7 - EA, D4 - register number
0000239C                          1854  *   D6 - opmode, D5 - register
0000239C  4EB9 00002896           1855          JSR     PRINT_PC
000023A2  43F8 0137               1856          LEA     DISADDA,A1
000023A6  103C 000E               1857          MOVE.B  #14,D0
000023AA  4E4F                    1858          TRAP    #15
000023AC                          1859  
000023AC  4EB9 00002550           1860          JSR     PRINT_ADDA_OPMODE
000023B2  4EB9 0000257C           1861          JSR     IS_EA_OR_IMME_ADDA
000023B8  4EB9 00002586           1862          JSR     PRINT_ADDA_EADDR
000023BE  4EB9 00002852           1863          JSR     PRINTCOMMA
000023C4                          1864  
000023C4  3805                    1865          MOVE.W  D5,D4
000023C6  4EB9 0000274C           1866          JSR     PRINTAn
000023CC  4EB9 0000285E           1867          JSR     PRINTNEWLINE
000023D2  4EB9 000028B2           1868          JSR     CLEAR_ALL
000023D8                          1869  
000023D8  3412                    1870          MOVE.W  (A2),D2
000023DA  B5F8 0004               1871          CMP.L   ENADR,A2   ; keep looping until reach the end
000023DE  6D00 ED12               1872          BLT     LOOPMEM
000023E2  6000 04DE               1873          BRA     DONE 
000023E6                          1874  ******** PRINT ADDQ #data,Dn/An ********
000023E6                          1875  PRINT_ADDQ_AnDn:
000023E6                          1876  * D7 - mode, D6 - data
000023E6                          1877  * D5 - size, D4 - register
000023E6  4EB9 00002896           1878          JSR     PRINT_PC
000023EC  43F8 013C               1879          LEA     DISADDQ,A1
000023F0  103C 000E               1880          MOVE.B  #14,D0
000023F4  4E4F                    1881          TRAP    #15
000023F6                          1882  
000023F6  4EB9 0000266E           1883          JSR     PRINTSIZEOP
000023FC  4EB9 00002528           1884          JSR     PRINT_ADDQ_DATA
00002402  4EB9 00002852           1885          JSR     PRINTCOMMA
00002408  4EB9 0000253C           1886          JSR     PRINT_ADDA_Dn_OR_An
0000240E  4EB9 0000285E           1887          JSR     PRINTNEWLINE
00002414  4EB9 000028B2           1888          JSR     CLEAR_ALL
0000241A                          1889  
0000241A  341A                    1890          MOVE.W  (A2)+,D2
0000241C  B5F8 0004               1891          CMP.L   ENADR,A2   ; keep looping until reach the end
00002420  6D00 ECD0               1892          BLT     LOOPMEM
00002424  6000 049C               1893          BRA     DONE
00002428                          1894  PRINT_ADDQ_EA:
00002428  4EB9 00002896           1895          JSR     PRINT_PC
0000242E  43F8 013C               1896          LEA     DISADDQ,A1
00002432  103C 000E               1897          MOVE.B  #14,D0
00002436  4E4F                    1898          TRAP    #15
00002438                          1899  
00002438  4EB9 0000266E           1900          JSR     PRINTSIZEOP
0000243E  4EB9 00002528           1901          JSR     PRINT_ADDQ_DATA
00002444  4EB9 00002852           1902          JSR     PRINTCOMMA
0000244A  4EB9 00002586           1903          JSR     PRINT_ADDA_EADDR
00002450  4EB9 0000285E           1904          JSR     PRINTNEWLINE
00002456  4EB9 000028B2           1905          JSR     CLEAR_ALL
0000245C                          1906  
0000245C  3412                    1907          MOVE.W  (A2),D2
0000245E  B5F8 0004               1908          CMP.L   ENADR,A2   ; keep looping until reach the end
00002462  6D00 EC8E               1909          BLT     LOOPMEM
00002466  6000 045A               1910          BRA     DONE 
0000246A                          1911  PRINT_ADDQ_INDIRECT:
0000246A  4EB9 00002896           1912          JSR     PRINT_PC
00002470  43F8 013C               1913          LEA     DISADDQ,A1
00002474  103C 000E               1914          MOVE.B  #14,D0
00002478  4E4F                    1915          TRAP    #15
0000247A                          1916  
0000247A  4EB9 0000266E           1917          JSR     PRINTSIZEOP
00002480  4EB9 00002528           1918          JSR     PRINT_ADDQ_DATA
00002486  4EB9 00002852           1919          JSR     PRINTCOMMA
0000248C  4EB9 00002562           1920          JSR     PRINT_ADDA_INDIRECT_TYPE
00002492  4EB9 0000285E           1921          JSR     PRINTNEWLINE
00002498  4EB9 000028B2           1922          JSR     CLEAR_ALL
0000249E                          1923  
0000249E  341A                    1924          MOVE.W  (A2)+,D2
000024A0  B5F8 0004               1925          CMP.L   ENADR,A2   ; keep looping until reach the end
000024A4  6D00 EC4C               1926          BLT     LOOPMEM
000024A8  6000 0418               1927          BRA     DONE
000024AC                          1928  PRINT_SUB_Dn:
000024AC                          1929  *   D7 - register mode, D4 - register number
000024AC                          1930  *   D6 - opmode, D5 - register
000024AC  4EB9 00002896           1931          JSR     PRINT_PC
000024B2  43F8 0141               1932          LEA     DISSUB,A1
000024B6  103C 000E               1933          MOVE.B  #14,D0
000024BA  4E4F                    1934          TRAP    #15
000024BC                          1935  
000024BC  4EB9 0000259A           1936          JSR     PRINT_ADD_OPMODE
000024C2                          1937          * Check if its Dn, ea *
000024C2  0C06 0008               1938          CMPI.B  #8,D6 
000024C6  6600 FDEA               1939          BNE     PRINT_ADD_Dn_Ea
000024CA                          1940  
000024CA  4EB9 0000253C           1941          JSR     PRINT_ADDA_Dn_OR_An
000024D0  4EB9 00002852           1942          JSR     PRINTCOMMA
000024D6  3805                    1943          MOVE.W  D5,D4
000024D8  4EB9 000026AC           1944          JSR     PRINTDn
000024DE  4EB9 0000285E           1945          JSR     PRINTNEWLINE
000024E4  4EB9 000028B2           1946          JSR     CLEAR_ALL
000024EA                          1947  
000024EA  341A                    1948          MOVE.W  (A2)+,D2
000024EC  B5F8 0004               1949          CMP.L   ENADR,A2   ; keep looping until reach the end
000024F0  6D00 EC00               1950          BLT     LOOPMEM
000024F4  6000 03CC               1951          BRA     DONE
000024F8                          1952  PRINT_SUB_EA:
000024F8                          1953  *   D7 - EA, D4 - register number
000024F8                          1954  *   D6 - opmode, D5 - register
000024F8  4EB9 00002896           1955          JSR     PRINT_PC
000024FE  43F8 0141               1956          LEA     DISSUB,A1
00002502  103C 000E               1957          MOVE.B  #14,D0
00002506  4E4F                    1958          TRAP    #15
00002508                          1959  
00002508  4EB9 0000259A           1960          JSR     PRINT_ADD_OPMODE
0000250E  4EB9 000025A8           1961          JSR     PRINT_EA_DN_OR_DN_EA
00002514  4EB9 000028B2           1962          JSR     CLEAR_ALL
0000251A                          1963  
0000251A  3412                    1964          MOVE.W  (A2),D2
0000251C  B5F8 0004               1965          CMP.L   ENADR,A2   ; keep looping until reach the end
00002520  6D00 EBD0               1966          BLT     LOOPMEM
00002524  6000 039C               1967          BRA     DONE
00002528                          1968  ******** ADDQ FUNCTIONS ********
00002528                          1969  PRINT_ADDQ_DATA:
00002528  4EB9 00002816           1970          JSR     PRINTPOUND
0000252E  1206                    1971          MOVE.B  D6,D1
00002530  143C 000A               1972          MOVE.B  #10,D2
00002534  103C 000F               1973          MOVE.B  #15,D0
00002538  4E4F                    1974          TRAP    #15
0000253A  4E75                    1975          RTS    
0000253C                          1976  ******** ADDA FUNCTIONS ********
0000253C                          1977  PRINT_ADDA_Dn_OR_An:
0000253C  0C07 0000               1978          CMPI.B  #0,D7
00002540  6700 016A               1979          BEQ     PRINTDn
00002544  0C07 0001               1980          CMPI.B  #1,D7 
00002548  6700 0202               1981          BEQ     PRINTAn
0000254C  6000 0014               1982          BRA     PRINT_ADDA_INDIRECT_TYPE
00002550                          1983  PRINT_ADDA_OPMODE:
00002550  0C06 0003               1984          CMPI.B  #%011,D6
00002554  6700 013E               1985          BEQ     PRINTW
00002558  0C06 0007               1986          CMPI.B  #%111,D6
0000255C  6700 0142               1987          BEQ     PRINTL
00002560  4E75                    1988          RTS
00002562                          1989  PRINT_ADDA_INDIRECT_TYPE:
00002562  0C07 0002               1990          CMPI.B  #%010,D7
00002566  6700 0284               1991          BEQ     PRINT_An_IN
0000256A  0C07 0003               1992          CMPI.B  #%011,D7
0000256E  6700 028E               1993          BEQ     PRINT_An_POST
00002572  0C07 0004               1994          CMPI.B  #%100,D7
00002576  6700 0292               1995          BEQ     PRINT_An_PRE
0000257A  4E75                    1996          RTS
0000257C                          1997  IS_EA_OR_IMME_ADDA:
0000257C  0C04 0004               1998          CMPI.B  #%100,D4
00002580  6700 0294               1999          BEQ     PRINTPOUND
00002584  4E75                    2000          RTS
00002586                          2001  PRINT_ADDA_EADDR:
00002586  4EB9 0000286A           2002          JSR     PRINTDOLLAR
0000258C  2207                    2003          MOVE.L  D7,D1
0000258E  143C 0010               2004          MOVE.B  #16,D2
00002592  103C 000F               2005          MOVE.B  #15,D0
00002596  4E4F                    2006          TRAP    #15
00002598  4E75                    2007          RTS
0000259A                          2008  ******** ADD FUNCTIONS ********
0000259A                          2009  PRINT_ADD_OPMODE:
0000259A  4EB9 00002606           2010          JSR     ADD_EA_DN
000025A0  4EB9 0000264A           2011          JSR     ADD_DN_EA
000025A6  4E75                    2012          RTS
000025A8                          2013  PRINT_EA_DN_OR_DN_EA:
000025A8  0C46 0008               2014          CMPI.W  #8,D6
000025AC  6700 0008               2015          BEQ     PRINT_EA_DN
000025B0  6000 002C               2016          BRA     PRINT_DN_EA
000025B4  4E75                    2017          RTS
000025B6                          2018  ****************
000025B6                          2019  * Returns
000025B6                          2020  *   Prints ADD instruction from ea,Dn
000025B6                          2021  PRINT_EA_DN:
000025B6  4EB9 0000286A           2022          JSR     PRINTDOLLAR
000025BC  2207                    2023          MOVE.L  D7,D1
000025BE  143C 0010               2024          MOVE.B  #16,D2
000025C2  103C 000F               2025          MOVE.B  #15,D0
000025C6  4E4F                    2026          TRAP    #15
000025C8  4EB9 00002852           2027          JSR     PRINTCOMMA
000025CE  3805                    2028          MOVE.W  D5,D4
000025D0  4EB9 000026AC           2029          JSR     PRINTDn
000025D6  4EB9 0000285E           2030          JSR     PRINTNEWLINE
000025DC  4E75                    2031          RTS
000025DE                          2032  ****************
000025DE                          2033  * Returns
000025DE                          2034  *   Prints ADD instruction from Dn,ea
000025DE                          2035  PRINT_DN_EA:
000025DE  3805                    2036          MOVE.W  D5,D4
000025E0  4EB9 000026AC           2037          JSR     PRINTDn
000025E6  4EB9 00002852           2038          JSR     PRINTCOMMA
000025EC  4EB9 0000286A           2039          JSR     PRINTDOLLAR
000025F2                          2040  
000025F2  2207                    2041          MOVE.L  D7,D1
000025F4  143C 0010               2042          MOVE.B  #16,D2
000025F8  103C 000F               2043          MOVE.B  #15,D0
000025FC  4E4F                    2044          TRAP    #15
000025FE  4EB9 0000285E           2045          JSR     PRINTNEWLINE
00002604  4E75                    2046          RTS
00002606                          2047  ******************
00002606                          2048  * Returns
00002606                          2049  *   D6 - contains %1000 if ADD mode is ea,Dn
00002606                          2050  ADD_EA_DN:
00002606  0C06 0000               2051          CMPI.B  #0,D6
0000260A  4EB9 00002664           2052          JSR     IS_EA_TO_DN
00002610  6700 0076               2053          BEQ     PRINTB
00002614  0C06 0008               2054          CMPI.B  #8,D6      ; MOVE alters Z tag, must get it back.
00002618  6700 006E               2055          BEQ     PRINTB
0000261C                          2056  
0000261C  0C46 0001               2057          CMPI.W  #%001,D6
00002620  4EB9 00002664           2058          JSR     IS_EA_TO_DN
00002626  6700 006C               2059          BEQ     PRINTW
0000262A  0C06 0008               2060          CMPI.B  #8,D6   ; MOVE alters Z tag, must get it back.
0000262E  6700 0064               2061          BEQ     PRINTW
00002632                          2062  
00002632  0C46 0002               2063          CMPI.W  #%010,D6
00002636  4EB9 00002664           2064          JSR     IS_EA_TO_DN
0000263C  6700 0062               2065          BEQ     PRINTL
00002640  0C06 0008               2066          CMPI.B  #8,D6   ; MOVE alters Z tag, must get it back.
00002644  6700 005A               2067          BEQ     PRINTL
00002648  4E75                    2068          RTS
0000264A                          2069  ADD_DN_EA:
0000264A  0C46 0004               2070          CMPI.W  #%100,D6
0000264E  6700 0038               2071          BEQ     PRINTB
00002652  0C46 0005               2072          CMPI.W  #%101,D6
00002656  6700 003C               2073          BEQ     PRINTW
0000265A  0C46 0006               2074          CMPI.W  #%110,D6
0000265E  6700 0040               2075          BEQ     PRINTL
00002662  4E75                    2076          RTS
00002664                          2077  IS_EA_TO_DN:
00002664  6700 0004               2078          BEQ     TRUE_EA_TO_DN
00002668  4E75                    2079          RTS
0000266A                          2080  TRUE_EA_TO_DN:
0000266A  7C08                    2081          MOVE.L  #8,D6
0000266C  4E75                    2082          RTS
0000266E                          2083  ****************************************
0000266E                          2084  ******** PRINT INSTRUCTION SIZE ********
0000266E                          2085  ****************************************
0000266E                          2086  PRINTSIZEOP:
0000266E  0C05 0000               2087          CMPI.B  #$0,D5
00002672  6700 0014               2088          BEQ     PRINTB
00002676  0C05 0001               2089          CMPI.B  #$1,D5
0000267A  6700 0018               2090          BEQ     PRINTW
0000267E  0C05 0002               2091          CMPI.B  #$2,D5
00002682  6700 001C               2092          BEQ     PRINTL
00002686  4E75                    2093          RTS
00002688                          2094  PRINTB:
00002688  43F8 0169               2095          LEA     DISB,A1
0000268C  103C 000E               2096          MOVE.B  #14,D0
00002690  4E4F                    2097          TRAP    #15
00002692  4E75                    2098          RTS
00002694                          2099  PRINTW:
00002694  43F8 016E               2100          LEA     DISW,A1
00002698  103C 000E               2101          MOVE.B  #14,D0
0000269C  4E4F                    2102          TRAP    #15
0000269E  4E75                    2103          RTS
000026A0                          2104  PRINTL:
000026A0  43F8 0173               2105          LEA     DISL,A1
000026A4  103C 000E               2106          MOVE.B  #14,D0
000026A8  4E4F                    2107          TRAP    #15
000026AA  4E75                    2108          RTS
000026AC                          2109  **********************************************
000026AC                          2110  ******** PRINT ADDRESS/DATA REGISTERS ********
000026AC                          2111  **********************************************
000026AC                          2112  * D4 should contain data register
000026AC                          2113  PRINTDn:
000026AC  B83C 0007               2114          CMP.B #$7,D4
000026B0  6700 008E               2115          BEQ PRINTD7
000026B4  B83C 0006               2116          CMP.B #$6,D4
000026B8  6700 007A               2117          BEQ PRINTD6
000026BC  B83C 0005               2118          CMP.B #$5,D4
000026C0  6700 0066               2119          BEQ PRINTD5
000026C4  B83C 0004               2120          CMP.B #$4,D4
000026C8  6700 0052               2121          BEQ PRINTD4
000026CC  B83C 0003               2122          CMP.B #$3,D4
000026D0  6700 003E               2123          BEQ PRINTD3
000026D4  B83C 0002               2124          CMP.B #$2,D4
000026D8  6700 002A               2125          BEQ PRINTD2
000026DC  B83C 0001               2126          CMP.B #$1,D4
000026E0  6700 0016               2127          BEQ PRINTD1
000026E4  B83C 0000               2128          CMP.B #$0,D4
000026E8  6700 0002               2129          BEQ PRINTD0
000026EC                          2130  PRINTD0:
000026EC  43F8 0178               2131          LEA     DISD0,A1
000026F0  103C 000E               2132          MOVE.B  #14, D0
000026F4  4E4F                    2133          TRAP    #15
000026F6  4E75                    2134          RTS
000026F8                          2135  PRINTD1:
000026F8  43F8 017B               2136          LEA     DISD1,A1
000026FC  103C 000E               2137          MOVE.B  #14, D0
00002700  4E4F                    2138          TRAP    #15
00002702  4E75                    2139          RTS
00002704                          2140  PRINTD2:
00002704  43F8 017E               2141          LEA     DISD2,A1
00002708  103C 000E               2142          MOVE.B  #14, D0
0000270C  4E4F                    2143          TRAP    #15
0000270E  4E75                    2144          RTS
00002710                          2145  PRINTD3:
00002710  43F8 0181               2146          LEA     DISD3,A1
00002714  103C 000E               2147          MOVE.B  #14, D0
00002718  4E4F                    2148          TRAP    #15
0000271A  4E75                    2149          RTS
0000271C                          2150  PRINTD4:
0000271C  43F8 0184               2151          LEA     DISD4,A1
00002720  103C 000E               2152          MOVE.B  #14, D0
00002724  4E4F                    2153          TRAP    #15
00002726  4E75                    2154          RTS
00002728                          2155  PRINTD5:
00002728  43F8 0187               2156          LEA     DISD5,A1
0000272C  103C 000E               2157          MOVE.B  #14, D0
00002730  4E4F                    2158          TRAP    #15
00002732  4E75                    2159          RTS
00002734                          2160  PRINTD6:
00002734  43F8 018A               2161          LEA     DISD6,A1
00002738  103C 000E               2162          MOVE.B  #14, D0
0000273C  4E4F                    2163          TRAP    #15
0000273E  4E75                    2164          RTS
00002740                          2165  PRINTD7:
00002740  43F8 018D               2166          LEA     DISD7,A1
00002744  103C 000E               2167          MOVE.B  #14, D0
00002748  4E4F                    2168          TRAP    #15
0000274A  4E75                    2169          RTS
0000274C                          2170          
0000274C                          2171  * D4 should contain data register
0000274C                          2172  PRINTAn:
0000274C  B83C 0007               2173          CMP.B #$7,D4
00002750  6700 008E               2174          BEQ PRINTA7
00002754  B83C 0006               2175          CMP.B #$6,D4
00002758  6700 007A               2176          BEQ PRINTA6
0000275C  B83C 0005               2177          CMP.B #$5,D4
00002760  6700 0066               2178          BEQ PRINTA5
00002764  B83C 0004               2179          CMP.B #$4,D4
00002768  6700 0052               2180          BEQ PRINTA4
0000276C  B83C 0003               2181          CMP.B #$3,D4
00002770  6700 003E               2182          BEQ PRINTA3
00002774  B83C 0002               2183          CMP.B #$2,D4
00002778  6700 002A               2184          BEQ PRINTA2
0000277C  B83C 0001               2185          CMP.B #$1,D4
00002780  6700 0016               2186          BEQ PRINTA1
00002784  B83C 0000               2187          CMP.B #$0,D4
00002788  6700 0002               2188          BEQ PRINTA0
0000278C                          2189  PRINTA0:
0000278C  43F8 0190               2190          LEA     DISA0,A1
00002790  103C 000E               2191          MOVE.B  #14, D0
00002794  4E4F                    2192          TRAP    #15
00002796  4E75                    2193          RTS
00002798                          2194  PRINTA1:
00002798  43F8 0193               2195          LEA     DISA1,A1
0000279C  103C 000E               2196          MOVE.B  #14, D0
000027A0  4E4F                    2197          TRAP    #15
000027A2  4E75                    2198          RTS
000027A4                          2199  PRINTA2:
000027A4  43F8 0196               2200          LEA     DISA2,A1
000027A8  103C 000E               2201          MOVE.B  #14, D0
000027AC  4E4F                    2202          TRAP    #15
000027AE  4E75                    2203          RTS
000027B0                          2204  PRINTA3:
000027B0  43F8 0199               2205          LEA     DISA3,A1
000027B4  103C 000E               2206          MOVE.B  #14, D0
000027B8  4E4F                    2207          TRAP    #15
000027BA  4E75                    2208          RTS
000027BC                          2209  PRINTA4:
000027BC  43F8 019C               2210          LEA     DISA4,A1
000027C0  103C 000E               2211          MOVE.B  #14, D0
000027C4  4E4F                    2212          TRAP    #15
000027C6  4E75                    2213          RTS
000027C8                          2214  PRINTA5:
000027C8  43F8 019F               2215          LEA     DISA5,A1
000027CC  103C 000E               2216          MOVE.B  #14, D0
000027D0  4E4F                    2217          TRAP    #15
000027D2  4E75                    2218          RTS
000027D4                          2219  PRINTA6:
000027D4  43F8 01A2               2220          LEA     DISA6,A1
000027D8  103C 000E               2221          MOVE.B  #14, D0
000027DC  4E4F                    2222          TRAP    #15
000027DE  4E75                    2223          RTS
000027E0                          2224  PRINTA7:
000027E0  43F8 01A5               2225          LEA     DISA7,A1
000027E4  103C 000E               2226          MOVE.B  #14, D0
000027E8  4E4F                    2227          TRAP    #15
000027EA  4E75                    2228          RTS
000027EC                          2229  PRINT_An_IN:
000027EC  4EB9 00002822           2230          JSR     PRINTLEFTPAREN
000027F2  4EB8 274C               2231          JSR     PRINTAn
000027F6  4EB9 0000282E           2232          JSR     PRINTRIGHTPAREN
000027FC  4E75                    2233          RTS
000027FE                          2234  PRINT_An_POST:
000027FE  4EB8 27EC               2235          JSR     PRINT_An_IN
00002802  4EB9 0000283A           2236          JSR     PRINTPLUS
00002808  4E75                    2237          RTS
0000280A                          2238  PRINT_An_PRE:
0000280A  4EB9 00002846           2239          JSR     PRINTMINUS
00002810  4EB8 27EC               2240          JSR     PRINT_An_IN
00002814  4E75                    2241          RTS
00002816                          2242  
00002816                          2243          
00002816                          2244  ****************************************
00002816                          2245  ******** PRINT COMMON CHARCTERS ********
00002816                          2246  ****************************************
00002816                          2247  PRINTPOUND:
00002816  43F8 00ED               2248          LEA     DISPOUND,A1
0000281A  103C 000E               2249          MOVE.B  #14,D0
0000281E  4E4F                    2250          TRAP    #15
00002820  4E75                    2251          RTS
00002822                          2252  PRINTLEFTPAREN:
00002822  43F8 00F1               2253          LEA     DISPARENL,A1
00002826  103C 000E               2254          MOVE.B  #14,D0
0000282A  4E4F                    2255          TRAP    #15
0000282C  4E75                    2256          RTS
0000282E                          2257  PRINTRIGHTPAREN:
0000282E  43F8 00F3               2258          LEA     DISPARENR,A1
00002832  103C 000E               2259          MOVE.B  #14,D0
00002836  4E4F                    2260          TRAP    #15
00002838  4E75                    2261          RTS
0000283A                          2262  PRINTPLUS:
0000283A  43F8 00F5               2263          LEA     DISPLUS,A1
0000283E  103C 000E               2264          MOVE.B  #14,D0
00002842  4E4F                    2265          TRAP    #15
00002844  4E75                    2266          RTS
00002846                          2267  PRINTMINUS:
00002846  43F8 00F7               2268          LEA     DISMIN,A1
0000284A  103C 000E               2269          MOVE.B  #14,D0
0000284E  4E4F                    2270          TRAP    #15
00002850  4E75                    2271          RTS
00002852                          2272  PRINTCOMMA:
00002852  43F8 00EB               2273          LEA     DISCOMMA,A1
00002856  103C 000E               2274          MOVE.B  #14,D0
0000285A  4E4F                    2275          TRAP    #15
0000285C  4E75                    2276          RTS
0000285E                          2277  PRINTNEWLINE:
0000285E  43F8 00E8               2278          LEA     NEWLINE,A1
00002862  103C 000E               2279          MOVE.B  #14,D0
00002866  4E4F                    2280          TRAP    #15
00002868  4E75                    2281          RTS
0000286A                          2282  PRINTDOLLAR:
0000286A  43F8 00EF               2283          LEA     DISDOLLAR,A1
0000286E  103C 000E               2284          MOVE.B  #14,D0
00002872  4E4F                    2285          TRAP    #15
00002874  4E75                    2286          RTS
00002876                          2287  ***********************
00002876                          2288  ******** MISC. ********
00002876                          2289  ***********************
00002876                          2290  WAIT:
00002876  6D00 001C               2291          BLT     RETURN     
0000287A  43F8 0083               2292          LEA     DISWAIT,A1
0000287E  103C 000E               2293          MOVE.B  #14,D0
00002882  4E4F                    2294          TRAP    #15
00002884                          2295  
00002884  103C 0005               2296          MOVE.B  #5,D0
00002888  4E4F                    2297          TRAP    #15
0000288A                          2298  
0000288A  21FC 00000000 0008      2299          MOVE.L  #0,LOOPCOUNT
00002892  4E75                    2300          RTS
00002894                          2301  RETURN:
00002894  4E75                    2302          RTS
00002896                          2303  PRINT_PC:
00002896  2238 000C               2304          MOVE.L  PC_COUNT,D1
0000289A  143C 0010               2305          MOVE.B  #16,D2
0000289E  103C 000F               2306          MOVE.B  #15,D0
000028A2  4E4F                    2307          TRAP    #15
000028A4  4281                    2308          CLR.L   D1   ; prevent dirty writing
000028A6  43F8 00F9               2309          LEA     DISTAB,A1
000028AA  103C 000E               2310          MOVE.B  #14,D0
000028AE  4E4F                    2311          TRAP    #15
000028B0                          2312  
000028B0  4E75                    2313          RTS
000028B2                          2314  CLEAR_ALL:
000028B2  4281                    2315          CLR.L   D1
000028B4  4282                    2316          CLR.L   D2
000028B6  4283                    2317          CLR.L   D3
000028B8  4284                    2318          CLR.L   D4
000028BA  4285                    2319          CLR.L   D5
000028BC  4286                    2320          CLR.L   D6
000028BE  4287                    2321          CLR.L   D7
000028C0  4E75                    2322          RTS
000028C2                          2323  DONE:
000028C2  43F8 00AF               2324          LEA     DISDONE,A1
000028C6  103C 000E               2325          MOVE.B  #14,D0
000028CA  4E4F                    2326          TRAP    #15
000028CC  4281                    2327          CLR.L   D1          ; clear up the data registers used.
000028CE  4282                    2328          CLR.L   D2
000028D0  4283                    2329          CLR.L   D3
000028D2  4287                    2330          CLR.L   D7
000028D4                          2331          END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD_DN_EA           264A
ADD_EA_DN           2606
ADD_LONG_ADDR       194A
ADD_WORD_ADDR       1942
ASKEN               37
ASKST               11
BRANCH_LONG         16A6
BRANCH_WORD         166A
CHARLOOP            1020
CHECK_IS_MOVEM_OR_JSR  1172
CLEAR_ALL           28B2
CLOSING             20C0
CONVERTTOHEX        1038
CR                  D
DECODEADDS          12EE
DECODEASL_REG       1232
DECODEASR_REG       126A
DECODEBRANCHES      141E
DECODEJSR_REG       1188
DECODELEA_MEM       11A2
DECODELOGICS        1126
DECODELOGIC_CODE    1148
DECODELSL_REG       1218
DECODELSR_REG       1250
DECODENOP           110A
DECODENOT_REG       117E
DECODEROL_REG       123C
DECODEROR_REG       1274
DECODERTS           1118
DECODESHIFTS        11F0
DECODE_ADDA_ANDN    1356
DECODE_ADDA_EA      137C
DECODE_ADDQ         1386
DECODE_ADDQ_ANDN    1396
DECODE_ADDQ_EA      13CC
DECODE_ADD_DN       1324
DECODE_ADD_EA       133A
DECODE_AND          11BC
DECODE_ASL_MEM      12AC
DECODE_ASR_MEM      12DA
DECODE_BEQ          1614
DECODE_BGE          15BE
DECODE_BGT          1512
DECODE_BLE          1568
DECODE_BLT          14BC
DECODE_BRA          1466
DECODE_LSL_MEM      1292
DECODE_LSR_MEM      12C0
DECODE_MOVE         1734
DECODE_MOVEA        1780
DECODE_MOVEM        17B6
DECODE_MOVEQ        17A2
DECODE_OR           11D6
DECODE_REG          120E
DECODE_ROL_MEM      12B6
DECODE_ROR_MEM      12E4
DECODE_SHIFT_MEM    1288
DECODE_SUB          13D6
DECODE_SUB_DN       13E6
DECODE_SUB_EA       1414
DETERMINE_ADDR_MODE  19CA
DISA0               190
DISA1               193
DISA2               196
DISA3               199
DISA4               19C
DISA5               19F
DISA6               1A2
DISA7               1A5
DISADD              133
DISADDA             137
DISADDQ             13C
DISAND              114
DISASL              123
DISASR              127
DISB                169
DISBEQ              163
DISBGE              15D
DISBGT              151
DISBLE              157
DISBLT              14B
DISBRA              145
DISCOMMA            EB
DISD0               178
DISD1               17B
DISD2               17E
DISD3               181
DISD4               184
DISD5               187
DISD6               18A
DISD7               18D
DISDATA             1A8
DISDOLLAR           EF
DISDONE             AF
DISEN               71
DISJSR              108
DISL                173
DISLEA              10E
DISLSL              11B
DISLSR              11F
DISMIN              F7
DISNOP              FC
DISNOT              104
DISOR               118
DISPARENL           F1
DISPARENR           F3
DISPLUS             F5
DISPOUND            ED
DISROL              12B
DISROR              12F
DISRTS              100
DISST               5D
DISSUB              141
DISTAB              F9
DISW                16E
DISWAIT             83
DOLLAR              20B8
DOLLAR_OR_HASHTAG   20A4
DONE                28C2
ENADR               4
ENDADR              100E
GET_ADDQ_DATA       18D4
GET_ADDQ_SIZE       18C6
GET_ADD_EA          1926
GET_ADD_MODE_REG    18E4
GET_ADD_OPMODE      190A
GET_ADD_REG         1918
GET_AND_DATA        189A
GET_DISPLACEMENT    16E2
GET_JSR_LOGIC_DATA  1864
GET_LEA_LOGIC_DATA  1878
GET_MEM_SHIFT_DATA  1984
GET_MOVE_DEST       17DA
GET_MOVE_SIZE       17CC
GET_MOVE_SOURCE     17F2
GET_NOT_LOGIC_DATA  1846
GET_REG_SHIFT_DATA  1952
HASHTAG             20B0
INVALID             10A2
INVALIDMSG          B9
INVALIDOP           1806
ISEND               102C
ISLASTIN            108E
ISLOW               1066
ISUPP               1050
IS_EA_OR_IMME_ADDA  257C
IS_EA_TO_DN         2664
IS_IN_MEM_BOOL      10
IS_MEM_INDIRECT     19AE
LF                  A
LONG_ADDR           19E6
LOOPCOUNT           8
LOOPMEM             10F2
NEWLINE             E8
PC_COUNT            C
PRESSEDENT          108C
PRINTA0             278C
PRINTA1             2798
PRINTA2             27A4
PRINTA3             27B0
PRINTA4             27BC
PRINTA5             27C8
PRINTA6             27D4
PRINTA7             27E0
PRINTAN             274C
PRINTASL_MEM        21E6
PRINTASL_REG        211E
PRINTASR_MEM        2206
PRINTASR_REG        2140
PRINTB              2688
PRINTCOMMA          2852
PRINTD0             26EC
PRINTD1             26F8
PRINTD2             2704
PRINTD3             2710
PRINTD4             271C
PRINTD5             2728
PRINTD6             2734
PRINTD7             2740
PRINTDN             26AC
PRINTDOLLAR         286A
PRINTJSR_ABS_ADR    1C0C
PRINTJSR_ADR        1BF0
PRINTL              26A0
PRINTLEA_ABS_ADR    1C74
PRINTLEA_ADR        1C4A
PRINTLEFTPAREN      2822
PRINTLSL_MEM        21A6
PRINTLSL_REG        20DA
PRINTLSR_MEM        21C6
PRINTLSR_REG        20FC
PRINTMINUS          2846
PRINTNEWLINE        285E
PRINTNOP            19EE
PRINTNOT            1AEC
PRINTNOT_ABS_ADR    1BAC
PRINTNOT_INAN       1B3A
PRINTNOT_POS_INAN   1B5C
PRINTNOT_PRE_INAN   1B84
PRINTNOT_REG        1B18
PRINTPLUS           283A
PRINTPOUND          2816
PRINTRIGHTPAREN     282E
PRINTROL_MEM        2226
PRINTROL_REG        2162
PRINTROR_MEM        2246
PRINTROR_REG        2184
PRINTRTS            1A18
PRINTSIZEOP         266E
PRINTW              2694
PRINT_ADDA_DNAN     2314
PRINT_ADDA_DN_OR_AN  253C
PRINT_ADDA_EA       239C
PRINT_ADDA_EADDR    2586
PRINT_ADDA_INDIRECT  2358
PRINT_ADDA_INDIRECT_TYPE  2562
PRINT_ADDA_OPMODE   2550
PRINT_ADDQ_ANDN     23E6
PRINT_ADDQ_DATA     2528
PRINT_ADDQ_EA       2428
PRINT_ADDQ_INDIRECT  246A
PRINT_ADD_DN        2266
PRINT_ADD_DN_EA     22B2
PRINT_ADD_EA        22E4
PRINT_ADD_OPMODE    259A
PRINT_AND_ABS_ADR_DN  1D8C
PRINT_AND_DATA      1CC0
PRINT_AND_DN_ABS_ADR  1E56
PRINT_AND_DN_DN     1CF8
PRINT_AND_DN_EA     1DCC
PRINT_AND_DN_INAN   1DF0
PRINT_AND_DN_POS_INAN  1E0E
PRINT_AND_DN_PRE_INAN  1E32
PRINT_AND_EA_DN     1CCC
PRINT_AND_INAN_DN   1D1A
PRINT_AND_OPENING   1E96
PRINT_AND_POS_INAN_DN  1D3C
PRINT_AND_PRE_INAN_DN  1D64
PRINT_AN_IN         27EC
PRINT_AN_POST       27FE
PRINT_AN_PRE        280A
PRINT_BEQ           1728
PRINT_BGE           171C
PRINT_BGT           1704
PRINT_BLE           1710
PRINT_BLT           16F8
PRINT_BRA           16EC
PRINT_DN_EA         25DE
PRINT_EA_DN         25B6
PRINT_EA_DN_OR_DN_EA  25A8
PRINT_IS_MEM_IN     1AC2
PRINT_MEM_SHIFT_INFO  1A92
PRINT_OR_ABS_ADR_DN  1F7E
PRINT_OR_DATA       1EB2
PRINT_OR_DN_ABS_ADR  2048
PRINT_OR_DN_DN      1EEA
PRINT_OR_DN_EA      1FBE
PRINT_OR_DN_INAN    1FE2
PRINT_OR_DN_POS_INAN  2000
PRINT_OR_DN_PRE_INAN  2024
PRINT_OR_EA_DN      1EBE
PRINT_OR_INAN_DN    1F0C
PRINT_OR_OPENING    2088
PRINT_OR_POS_INAN_DN  1F2E
PRINT_OR_PRE_INAN_DN  1F56
PRINT_PC            2896
PRINT_REG_SHIFT_INFO  1A6C
PRINT_SHIFT_REG_CONT  1A52
PRINT_SUB_DN        24AC
PRINT_SUB_EA        24F8
READMEM             10DA
RETURN              2894
SHIFT4NXT           107E
SHIFT_IN1           1A42
STADR               0
START               1000
STARTADR            1000
TRUE_EA_TO_DN       266A
VALIDATEIN          10C0
WAIT                2876
WORD_ADDR           19DE
